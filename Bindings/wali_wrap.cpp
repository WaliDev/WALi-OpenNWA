/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,				    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,				    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, what());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* unknown exception handler  */
  class UnknownExceptionHandler {
#ifdef SWIG_DIRECTOR_UEH
    static void handler() {
      try {
        throw;
      } catch (DirectorException& e) {
        std::cerr << "SWIG Director exception caught:" << std::endl
                  << e.what() << std::endl;
      } catch (std::exception& e) {
        std::cerr << "std::exception caught: "<< e.what() << std::endl;
      } catch (...) {
        std::cerr << "Unknown exception caught." << std::endl;
      }

      std::cerr << std::endl
                << "Python interpreter traceback:" << std::endl;
      PyErr_Print();
      std::cerr << std::endl;

      std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
                << "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
                << std::endl
                << "Exception is being re-thrown, program will likely abort/terminate." << std::endl;
      throw;
    }

  public:

    std::unexpected_handler old;
    UnknownExceptionHandler(std::unexpected_handler nh = handler) {
      old = std::set_unexpected(nh);
    }

    ~UnknownExceptionHandler() {
      std::set_unexpected(old);
    }
#endif
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard {
    PyThread_type_lock &mutex_;

  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex) {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }

    ~Guard() {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object, optionally taking ownership */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
      swig_incref();
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AccessibleStateMap swig_types[0]
#define SWIGTYPE_p_AccessibleStateSetMap swig_types[1]
#define SWIGTYPE_p_EpsilonCloseCache swig_types[2]
#define SWIGTYPE_p_ITrans swig_types[3]
#define SWIGTYPE_p_ITransLT swig_types[4]
#define SWIGTYPE_p_IncomingTransMap_t swig_types[5]
#define SWIGTYPE_p_KeyPair swig_types[6]
#define SWIGTYPE_p_PredHash_t swig_types[7]
#define SWIGTYPE_p_PySemElem swig_types[8]
#define SWIGTYPE_p_SemElem swig_types[9]
#define SWIGTYPE_p_StateSet_t swig_types[10]
#define SWIGTYPE_p_TaggedWeight swig_types[11]
#define SWIGTYPE_p_TransSet swig_types[12]
#define SWIGTYPE_p_WeightMaker swig_types[13]
#define SWIGTYPE_p_Word swig_types[14]
#define SWIGTYPE_p__object swig_types[15]
#define SWIGTYPE_p_allocator_type swig_types[16]
#define SWIGTYPE_p_boost__functionT_bool_fITrans_const_pF_t swig_types[17]
#define SWIGTYPE_p_boost__functionT_void_fITrans_const_pF_t swig_types[18]
#define SWIGTYPE_p_boost__functionT_void_fITrans_pF_t swig_types[19]
#define SWIGTYPE_p_boost__functionT_wali__sem_elem_t_fwali__sem_elem_tF_t swig_types[20]
#define SWIGTYPE_p_boost__functionT_wali__wfa__delta__DeltaResult_fwali__wfa__WFA_const_RF_t swig_types[21]
#define SWIGTYPE_p_bucket_type swig_types[22]
#define SWIGTYPE_p_char swig_types[23]
#define SWIGTYPE_p_const_iterator swig_types[24]
#define SWIGTYPE_p_const_reference swig_types[25]
#define SWIGTYPE_p_count_t swig_types[26]
#define SWIGTYPE_p_difference_type swig_types[27]
#define SWIGTYPE_p_domains__SemElemSet__SemElemSubsumptionComputer swig_types[28]
#define SWIGTYPE_p_element_type swig_types[29]
#define SWIGTYPE_p_eps_map_t swig_types[30]
#define SWIGTYPE_p_first_type swig_types[31]
#define SWIGTYPE_p_hashmap_type swig_types[32]
#define SWIGTYPE_p_impl_t swig_types[33]
#define SWIGTYPE_p_iterator swig_types[34]
#define SWIGTYPE_p_key_type swig_types[35]
#define SWIGTYPE_p_kp_map_t swig_types[36]
#define SWIGTYPE_p_mapped_type swig_types[37]
#define SWIGTYPE_p_merge_fn_t swig_types[38]
#define SWIGTYPE_p_merge_rule_hash_t swig_types[39]
#define SWIGTYPE_p_p__object swig_types[40]
#define SWIGTYPE_p_pair_type swig_types[41]
#define SWIGTYPE_p_progress_t swig_types[42]
#define SWIGTYPE_p_reference swig_types[43]
#define SWIGTYPE_p_second_type swig_types[44]
#define SWIGTYPE_p_sem_elem_t swig_types[45]
#define SWIGTYPE_p_size_t swig_types[46]
#define SWIGTYPE_p_size_type swig_types[47]
#define SWIGTYPE_p_state_map_t swig_types[48]
#define SWIGTYPE_p_std__allocatorT_wali__wfa__Trans_p_t swig_types[49]
#define SWIGTYPE_p_std__invalid_argument swig_types[50]
#define SWIGTYPE_p_std__lessT_size_t_t swig_types[51]
#define SWIGTYPE_p_std__mapT_size_t_domains__SemElemSet__ElementSet_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_domains__SemElemSet__ElementSet_t_t_t swig_types[52]
#define SWIGTYPE_p_std__mapT_size_t_size_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_size_t_t_t_t swig_types[53]
#define SWIGTYPE_p_std__mapT_size_t_std__mapT_size_t_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_t_t_t_t_t_t swig_types[54]
#define SWIGTYPE_p_std__mapT_size_t_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_t_t_t swig_types[55]
#define SWIGTYPE_p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t swig_types[56]
#define SWIGTYPE_p_std__ostream swig_types[57]
#define SWIGTYPE_p_std__pairT_ITrans_const_p_bool_t swig_types[58]
#define SWIGTYPE_p_std__pairT_ITrans_p_bool_t swig_types[59]
#define SWIGTYPE_p_std__pairT_KeyPair_TransSet_t swig_types[60]
#define SWIGTYPE_p_std__pairT_sem_elem_t_sem_elem_t_t swig_types[61]
#define SWIGTYPE_p_std__pairT_size_t_size_t_t swig_types[62]
#define SWIGTYPE_p_std__pairT_size_t_wali__ref_ptrT_wali__SemElem_t_t swig_types[63]
#define SWIGTYPE_p_std__pairT_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t_bool_t swig_types[64]
#define SWIGTYPE_p_std__pairT_wali__ref_ptrT_PySemElem_t_wali__ref_ptrT_PySemElem_t_t swig_types[65]
#define SWIGTYPE_p_std__pairT_wali__ref_ptrT_wali__SemElem_t_wali__ref_ptrT_wali__SemElem_t_t swig_types[66]
#define SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t swig_types[67]
#define SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__const_iterator swig_types[68]
#define SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__iterator swig_types[69]
#define SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t swig_types[70]
#define SWIGTYPE_p_std__vectorT__Tp_p__Alloc_t swig_types[71]
#define SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t swig_types[72]
#define SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t swig_types[73]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[74]
#define SWIGTYPE_p_util__WeightChanger swig_types[75]
#define SWIGTYPE_p_value_type swig_types[76]
#define SWIGTYPE_p_wali__HashMapConstIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t swig_types[77]
#define SWIGTYPE_p_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t swig_types[78]
#define SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t swig_types[79]
#define SWIGTYPE_p_wali__KeySource swig_types[80]
#define SWIGTYPE_p_wali__KeySpace swig_types[81]
#define SWIGTYPE_p_wali__Printable swig_types[82]
#define SWIGTYPE_p_wali__Reach swig_types[83]
#define SWIGTYPE_p_wali__SemElem swig_types[84]
#define SWIGTYPE_p_wali__SemElemRefPtrContainerLessThan swig_types[85]
#define SWIGTYPE_p_wali__SemElemRefPtrEqual swig_types[86]
#define SWIGTYPE_p_wali__SemElemRefPtrHash swig_types[87]
#define SWIGTYPE_p_wali__WorklistT_wali__wfa__State_t swig_types[88]
#define SWIGTYPE_p_wali__ref_ptrT_PySemElem_t swig_types[89]
#define SWIGTYPE_p_wali__ref_ptrT_WorklistData_t swig_types[90]
#define SWIGTYPE_p_wali__ref_ptrT_Wrapper_t swig_types[91]
#define SWIGTYPE_p_wali__ref_ptrT_wali__KeySource_t swig_types[92]
#define SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t swig_types[93]
#define SWIGTYPE_p_wali__ref_ptrT_wali__WorklistT_wali__wfa__ITrans_t_t swig_types[94]
#define SWIGTYPE_p_wali__ref_ptrT_wali__regex__Regex_t swig_types[95]
#define SWIGTYPE_p_wali__ref_ptrT_wali__wpds__Wrapper_t swig_types[96]
#define SWIGTYPE_p_wali__ref_ptrT_wali__wpds__ewpds__ERule_t swig_types[97]
#define SWIGTYPE_p_wali__wfa__ConstTransFunctor swig_types[98]
#define SWIGTYPE_p_wali__wfa__DeterminizeWeightGen swig_types[99]
#define SWIGTYPE_p_wali__wfa__DotAttributePrinter swig_types[100]
#define SWIGTYPE_p_wali__wfa__ITrans swig_types[101]
#define SWIGTYPE_p_wali__wfa__State swig_types[102]
#define SWIGTYPE_p_wali__wfa__Trans swig_types[103]
#define SWIGTYPE_p_wali__wfa__TransFunctor swig_types[104]
#define SWIGTYPE_p_wali__wfa__TransSet swig_types[105]
#define SWIGTYPE_p_wali__wfa__WFA swig_types[106]
#define SWIGTYPE_p_wali__wpds__Config swig_types[107]
#define SWIGTYPE_p_wali__wpds__ConstRuleFunctor swig_types[108]
#define SWIGTYPE_p_wali__wpds__GenKeySource swig_types[109]
#define SWIGTYPE_p_wali__wpds__RuleFunctor swig_types[110]
#define SWIGTYPE_p_wali__wpds__WPDS swig_types[111]
#define SWIGTYPE_p_wali__wpds__ewpds__EWPDS swig_types[112]
#define SWIGTYPE_p_wali__wpds__fwpds__FWPDS swig_types[113]
#define SWIGTYPE_p_wali__wpds__rule_t swig_types[114]
static swig_type_info *swig_types[116];
static swig_module_info swig_module = {swig_types, 115, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _wali.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__wali

#else
#  define SWIG_init    init_wali

#endif
#define SWIG_name    "_wali"

#define SWIGVERSION 0x030002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>


#include <utility>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
#if PY_VERSION_HEX >= 0x03000000
      {
        long v = PyLong_AsLong(obj);
        if (!PyErr_Occurred()) {
          if (v < 0) {
            return SWIG_OverflowError;
          }
        } else {
          PyErr_Clear();
        }
      }
#endif
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyLong_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <algorithm>


#include <set>


#include <map>


#include <algorithm>


#include <vector>


/* Util stuff */
#include "../Source/wali/ref_ptr.hpp"
#include "../Source/wali/Countable.hpp"
#include "../Source/wali/IMarkable.hpp"
#include "../Source/wali/Printable.hpp"
#include "../Source/wali/Key.hpp"
#include "../Source/wali/regex/Regex.hpp"

/* WFA Util stuff */
#include "../Source/wali/wfa/TransFunctor.hpp"
/* WFA */
#include "../Source/wali/wfa/WFA.hpp"
#include "../Source/wali/wfa/State.hpp"
  
/* WPDS util stuff */
#include "../Source/wali/wpds/Rule.hpp"
#include "../Source/wali/wpds/GenKeySource.hpp"

/* WPDS's */
#include "../Source/wali/wpds/WPDS.hpp"
#include "../Source/wali/wpds/ewpds/EWPDS.hpp"
#include "../Source/wali/wpds/fwpds/FWPDS.hpp"

/* Example Weight Domains */
#include "../Source/wali/Reach.cpp"

#include <sstream>
#include <utility>

using namespace wali;
using namespace wali::wpds;
using namespace wali::wfa;
typedef wali::wfa::ITrans::WorklistData WorklistData; // (!)


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< int >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}





#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


wali::Key getEpsilonKey() {
    return wali::getKey("*");
}

SWIGINTERN PyObject *wali_SemElem___str__(wali::SemElem *self){
        std::ostringstream outs;
        self->print(outs);

        return PyString_FromString(outs.str().c_str());
    }

namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


namespace swig {
  template <> struct traits<size_t > {
    typedef value_category category;
    static const char* type_name() { return"size_t"; }
  };  
  template <>  struct traits_asval<size_t > {   
    typedef size_t value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_size_t (obj, val);
    }
  };
  template <>  struct traits_from<size_t > {
    typedef size_t value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_size_t  (val);
    }
  };
}


  namespace swig {

















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(PyObject* first, PyObject* second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>);
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = &(vp->second);
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = 0;
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  return res1 > res2 ? res1 : res2;
	}	
      }

      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	int res = SWIG_ERROR;
	if (PyTuple_Check(obj)) {
	  if (PyTuple_GET_SIZE(obj) == 2) {
	    res = get_pair(PyTuple_GET_ITEM(obj,0),PyTuple_GET_ITEM(obj,1), val);
	  }
	} else if (PySequence_Check(obj)) {
	  if (PySequence_Size(obj) == 2) {
	    swig::SwigVar_PyObject first = PySequence_GetItem(obj,0);
	    swig::SwigVar_PyObject second = PySequence_GetItem(obj,1);
	    res = get_pair(first, second, val);
	  }
	} else {
	  value_type *p;
	  res = SWIG_ConvertPtr(obj,(void**)&p,swig::type_info<value_type>(),0);
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }





































      namespace swig {
	template <>  struct traits<std::pair<size_t,size_t > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "size_t" "," "size_t" " >";
	  }
	};
      }
    

SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


class PySemElem : public wali::SemElem {
    protected:
      PyObject* userdata;
    public:
      PySemElem() : wali::SemElem() {
        userdata = NULL;
      }
      virtual std::string __str__ () const {
        std::stringstream out;
        out << "<PySemElem at ";
        out << this;
        out << ": ";
        
        /* get representation of userdata*/
        std::string repr = "None";
        PyObject* py_repr = PyObject_Repr (userdata);
        if ( py_repr && PyString_Check(py_repr) ) {
          repr = PyString_AsString(py_repr);
        }
        Py_XDECREF( py_repr );
        out << repr;

        out << " >";
        return out.str();
      }
      virtual std::ostream& print( std::ostream & o ) const {
        return o << __str__();
      }

      void setuserdata(PyObject* data) {
        Py_XDECREF(userdata);
        Py_XINCREF(data);
        userdata = data;
      }
      PyObject* getuserdata() {
        /* Python will assume the object is its own (without ref'ing it):
        teach it that we still have a ref */
        Py_XINCREF(userdata);
        return userdata;
      }

      virtual wali::ref_ptr<PySemElem> pycombine (PySemElem* se) const = 0;
      virtual wali::ref_ptr<PySemElem> pyextend (PySemElem* se) const = 0;

      sem_elem_t combine( SemElem* se )
      {
        PySemElem* rhs = dynamic_cast< PySemElem* >(se);
        return pycombine(rhs);
      }

      sem_elem_t extend( SemElem* se )
      {
        PySemElem* rhs = dynamic_cast< PySemElem* >(se);
        return pyextend(rhs);
      }

      virtual std::pair< wali::ref_ptr<PySemElem> , wali::ref_ptr<PySemElem> > pydelta( PySemElem * se ) = 0;
      std::pair< sem_elem_t , sem_elem_t > delta( SemElem * se ) {
        PySemElem* rhs = dynamic_cast< PySemElem* >(se);
        return pydelta(rhs);
      }

      virtual bool pyequal( PySemElem * se ) const = 0;
      bool equal( SemElem * se ) const {
        PySemElem* rhs = dynamic_cast< PySemElem* >(se);
        bool toret = pyequal(rhs);
        return toret;
      }

      virtual bool pyunderApproximates (PySemElem* se) const  = 0;
      bool underApproximates( SemElem * se ) {
          PySemElem * rhs = dynamic_cast< PySemElem* >(se);
          bool toret = pyunderApproximates(rhs);
          return toret;
      }

      virtual wali::ref_ptr<PySemElem> pystar () = 0;
      sem_elem_t star() {
          return pystar();
      }

      virtual wali::ref_ptr<PySemElem> pyextendAndDiff(
          PySemElem * next,
          PySemElem * subtrahend) = 0;
      sem_elem_t extendAndDiff(sem_elem_t next,
                               sem_elem_t subtrahend)
      {
          PySemElem * n = dynamic_cast< PySemElem* >(next.get_ptr());
          PySemElem * s = dynamic_cast< PySemElem* >(subtrahend.get_ptr());
          return pyextendAndDiff(n, s);
      }

      virtual wali::ref_ptr<PySemElem> pydiff(PySemElem * se) = 0;
      sem_elem_t diff(SemElem * se) {
          PySemElem * rhs = dynamic_cast< PySemElem* >(se);
          return pydiff(rhs);
      }

      virtual wali::ref_ptr<PySemElem> pyone() const = 0;
      virtual wali::ref_ptr<PySemElem> pyzero() const = 0;
      sem_elem_t one() const {
        return pyone();
      }
      sem_elem_t zero() const {
        return pyzero();
      }
};


  namespace swig {
    template <>  struct traits<sem_elem_t > {
      typedef pointer_category category;
      static const char* type_name() { return"sem_elem_t"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::pair<sem_elem_t,sem_elem_t > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "sem_elem_t" "," "sem_elem_t" " >";
	  }
	};
      }
    

  namespace swig {
    template <>  struct traits<wali::ref_ptr< PySemElem > > {
      typedef pointer_category category;
      static const char* type_name() { return"wali::ref_ptr< PySemElem >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::pair<wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "wali::ref_ptr< PySemElem >" "," "wali::ref_ptr< PySemElem >" " >";
	  }
	};
      }
    

  namespace swig {
    template <>  struct traits<ITrans > {
      typedef pointer_category category;
      static const char* type_name() { return"ITrans"; }
    };
  }


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if ( j < 0 ) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      if (ii > jj) {
        typename Sequence::const_reverse_iterator sb = self->rbegin();
        typename Sequence::const_reverse_iterator se = self->rbegin();
        std::advance(sb,size-ii-1);
        std::advance(se,size-jj-1);
        typename Sequence::const_reverse_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<-step && it!=se; ++c)
            it++;
        }
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj < ii)
        jj = ii;
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      if (jj > ii)
        jj = ii;
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj > ii) {
        typename Sequence::iterator sb = self->begin();
        std::advance(sb,ii);
        if (step == 1) {
          typename Sequence::iterator se = self->begin();
          std::advance(se,jj);
          self->erase(sb,se);
        } else {
          typename Sequence::iterator it = sb;
          size_t delcount = (jj - ii + step - 1) / step;
          while (delcount) {
            it = self->erase(it);
            for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
              it++;
            delcount--;
          }
        }
      }
    } else {
      if (ii > jj) {
        typename Sequence::reverse_iterator sb = self->rbegin();
        std::advance(sb,size-ii-1);
        typename Sequence::reverse_iterator it = sb;
        size_t delcount = (ii - jj - step - 1) / -step;
        while (delcount) {
          it = typename Sequence::reverse_iterator(self->erase((++it).base()));
          for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
            it++;
          delcount--;
        }
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


  namespace swig {
    template <>  struct traits<ITrans * > {
      typedef pointer_category category;
      static const char* type_name() { return"ITrans *"; }
    };
  }


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class SwigPySeq, class T> 
    inline void 
    assign(const SwigPySeq& swigpyseq, std::set<T>* seq) {
      // seq->insert(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
      typedef typename SwigPySeq::value_type value_type;
      typename SwigPySeq::const_iterator it = swigpyseq.begin();
      for (;it != swigpyseq.end(); ++it) {
	seq->insert(seq->end(),(value_type)(*it));
      }
    }

    template <class T>
    struct traits_asptr<std::set<T> >  {
      static int asptr(PyObject *obj, std::set<T> **s) {
	return traits_asptr_stdseq<std::set<T> >::asptr(obj, s);
      }
    };

    template <class T>
    struct traits_from<std::set<T> > {
      static PyObject *from(const std::set<T>& vec) {
	return traits_from_stdseq<std::set<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::set<ITrans *, ITransLT, std::allocator< ITrans * > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::set<" "ITrans *" "," "ITransLT" "," "std::allocator< ITrans * >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_set_Sl_ITrans_Sm__Sc_ITransLT_Sg__iterator(std::set< ITrans *,ITransLT > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_set_Sl_ITrans_Sm__Sc_ITransLT_Sg____nonzero__(std::set< ITrans *,ITransLT > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_set_Sl_ITrans_Sm__Sc_ITransLT_Sg____bool__(std::set< ITrans *,ITransLT > const *self){
      return !(self->empty());
    }
SWIGINTERN std::set< ITrans *,ITransLT >::size_type std_set_Sl_ITrans_Sm__Sc_ITransLT_Sg____len__(std::set< ITrans *,ITransLT > const *self){
      return self->size();
    }
SWIGINTERN void std_set_Sl_ITrans_Sm__Sc_ITransLT_Sg__append(std::set< ITrans *,ITransLT > *self,std::set< ITrans *,ITransLT >::value_type x){
       self->insert(x);
     }
SWIGINTERN bool std_set_Sl_ITrans_Sm__Sc_ITransLT_Sg____contains__(std::set< ITrans *,ITransLT > *self,std::set< ITrans *,ITransLT >::value_type x){
       return self->find(x) != self->end();
     }
SWIGINTERN std::set< ITrans *,ITransLT >::value_type std_set_Sl_ITrans_Sm__Sc_ITransLT_Sg____getitem__(std::set< ITrans *,ITransLT > const *self,std::set< ITrans *,ITransLT >::difference_type i){
       return *(swig::cgetpos(self, i));
     }
SWIGINTERN void std_set_Sl_ITrans_Sm__Sc_ITransLT_Sg__add(std::set< ITrans *,ITransLT > *self,std::set< ITrans *,ITransLT >::value_type x){
       self->insert(x);
     }
SWIGINTERN void std_set_Sl_ITrans_Sm__Sc_ITransLT_Sg__discard(std::set< ITrans *,ITransLT > *self,std::set< ITrans *,ITransLT >::value_type x){
       self->erase(x);
     }
SWIGINTERN std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > wali_wfa_TransSet_asList(wali::wfa::TransSet *self){
        std::vector< Trans* > toRet;

        TransSet::iterator it = self->begin();
        TransSet::iterator itend = self->end();
        for( ; it != itend ; it++ ) {
          toRet.push_back( static_cast<wali::wfa::Trans*>(*it) );
        }

        return toRet;
    }

  namespace swig {
    template <>  struct traits<wali::wfa::Trans > {
      typedef pointer_category category;
      static const char* type_name() { return"wali::wfa::Trans"; }
    };
  }


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<wali::wfa::Trans*, std::allocator< wali::wfa::Trans * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "wali::wfa::Trans" " *," "std::allocator< wali::wfa::Trans * >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_wali_wfa_Trans_Sm__Sg__iterator(std::vector< wali::wfa::Trans * > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_wali_wfa_Trans_Sm__Sg____nonzero__(std::vector< wali::wfa::Trans * > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_wali_wfa_Trans_Sm__Sg____bool__(std::vector< wali::wfa::Trans * > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< wali::wfa::Trans * >::size_type std_vector_Sl_wali_wfa_Trans_Sm__Sg____len__(std::vector< wali::wfa::Trans * > const *self){
      return self->size();
    }
SWIGINTERN std::vector< wali::wfa::Trans * >::value_type std_vector_Sl_wali_wfa_Trans_Sm__Sg__pop(std::vector< wali::wfa::Trans * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > *std_vector_Sl_wali_wfa_Trans_Sm__Sg____getslice__(std::vector< wali::wfa::Trans * > *self,std::vector< wali::wfa::Trans * >::difference_type i,std::vector< wali::wfa::Trans * >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_wali_wfa_Trans_Sm__Sg____setslice____SWIG_0(std::vector< wali::wfa::Trans * > *self,std::vector< wali::wfa::Trans * >::difference_type i,std::vector< wali::wfa::Trans * >::difference_type j,std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > const &v=std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_wali_wfa_Trans_Sm__Sg____delslice__(std::vector< wali::wfa::Trans * > *self,std::vector< wali::wfa::Trans * >::difference_type i,std::vector< wali::wfa::Trans * >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_wali_wfa_Trans_Sm__Sg____delitem____SWIG_0(std::vector< wali::wfa::Trans * > *self,std::vector< wali::wfa::Trans * >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > *std_vector_Sl_wali_wfa_Trans_Sm__Sg____getitem____SWIG_0(std::vector< wali::wfa::Trans * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >::difference_type id = i;
      std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_wali_wfa_Trans_Sm__Sg____setitem____SWIG_0(std::vector< wali::wfa::Trans * > *self,PySliceObject *slice,std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >::difference_type id = i;
      std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_wali_wfa_Trans_Sm__Sg____setitem____SWIG_1(std::vector< wali::wfa::Trans * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >::difference_type id = i;
      std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_wali_wfa_Trans_Sm__Sg____delitem____SWIG_1(std::vector< wali::wfa::Trans * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >::difference_type id = i;
      std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< wali::wfa::Trans * >::value_type std_vector_Sl_wali_wfa_Trans_Sm__Sg____getitem____SWIG_1(std::vector< wali::wfa::Trans * > *self,std::vector< wali::wfa::Trans * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_wali_wfa_Trans_Sm__Sg____setitem____SWIG_2(std::vector< wali::wfa::Trans * > *self,std::vector< wali::wfa::Trans * >::difference_type i,std::vector< wali::wfa::Trans * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_wali_wfa_Trans_Sm__Sg__append(std::vector< wali::wfa::Trans * > *self,std::vector< wali::wfa::Trans * >::value_type x){
      self->push_back(x);
    }
SWIGINTERN PyObject *wali_wfa_WFA___str__(wali::wfa::WFA *self){
        std::ostringstream outs;
        self->print(outs);

        return PyString_FromString(outs.str().c_str());
    }
SWIGINTERN PyObject *wali_wfa_WFA_print_dot__SWIG_3(wali::wfa::WFA *self){
        std::ostringstream outs;
        self->print_dot(outs);

        return PyString_FromString(outs.str().c_str());
    }

      namespace swig {
	template <>  struct traits<std::set<size_t, std::less< size_t >, std::allocator< size_t > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::set<" "size_t" "," "std::less< size_t >" "," "std::allocator< size_t >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_set_Sl_size_t_Sg__iterator(std::set< size_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_set_Sl_size_t_Sg____nonzero__(std::set< size_t > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_set_Sl_size_t_Sg____bool__(std::set< size_t > const *self){
      return !(self->empty());
    }
SWIGINTERN std::set< size_t >::size_type std_set_Sl_size_t_Sg____len__(std::set< size_t > const *self){
      return self->size();
    }
SWIGINTERN void std_set_Sl_size_t_Sg__append(std::set< size_t > *self,std::set< size_t >::value_type x){
       self->insert(x);
     }
SWIGINTERN bool std_set_Sl_size_t_Sg____contains__(std::set< size_t > *self,std::set< size_t >::value_type x){
       return self->find(x) != self->end();
     }
SWIGINTERN std::set< size_t >::value_type std_set_Sl_size_t_Sg____getitem__(std::set< size_t > const *self,std::set< size_t >::difference_type i){
       return *(swig::cgetpos(self, i));
     }
SWIGINTERN void std_set_Sl_size_t_Sg__add(std::set< size_t > *self,std::set< size_t >::value_type x){
       self->insert(x);
     }
SWIGINTERN void std_set_Sl_size_t_Sg__discard(std::set< size_t > *self,std::set< size_t >::value_type x){
       self->erase(x);
     }
SWIGINTERN PyObject *wali_wpds_WPDS___str__(wali::wpds::WPDS *self){
        std::ostringstream outs;
        self->print(outs);

        return PyString_FromString(outs.str().c_str());
    }
SWIGINTERN PyObject *wali_wpds_ewpds_EWPDS___str__(wali::wpds::ewpds::EWPDS *self){
        std::ostringstream outs;
        self->print(outs);

        return PyString_FromString(outs.str().c_str());
    }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "wali_wrap.h"

SwigDirector_PySemElem::SwigDirector_PySemElem(PyObject *self): PySemElem(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((PySemElem *)this, this); 
}




SwigDirector_PySemElem::~SwigDirector_PySemElem() {
}

std::ostream &SwigDirector_PySemElem::marshall(std::ostream &o) const {
  return wali::SemElem::marshall(o);
}


bool SwigDirector_PySemElem::containerLessThan(wali::SemElem const *other) const {
  bool c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(other), SWIGTYPE_p_wali__SemElem,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PySemElem.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char * const swig_method_name = "container_less_than";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"container_less_than", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'PySemElem.container_less_than'");
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


size_t SwigDirector_PySemElem::hash() const {
  size_t c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PySemElem.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char * const swig_method_name = "hash";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "hash", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'PySemElem.hash'");
    }
  }
  size_t swig_val;
  int swig_res = SWIG_AsVal_size_t(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""size_t""'");
  }
  c_result = static_cast< size_t >(swig_val);
  return (size_t) c_result;
}


std::ostream &SwigDirector_PySemElem::print_typename(std::ostream &os) const {
  void *swig_argp ;
  int swig_res ;
  swig_owntype own ;
  
  std::ostream *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&os), SWIGTYPE_p_std__ostream,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PySemElem.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char * const swig_method_name = "print_typename";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"print_typename", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'PySemElem.print_typename'");
    }
  }
  swig_res = SWIG_ConvertPtrAndOwn(result, &swig_argp, SWIGTYPE_p_std__ostream,  0  | SWIG_POINTER_DISOWN, &own);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""std::ostream &""'");
  }
  if (!swig_argp) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ValueError), "invalid null reference " "in output value of type '""std::ostream &""'"); 
  }
  c_result = reinterpret_cast< std::ostream * >(swig_argp);
  swig_acquire_ownership_obj(SWIG_as_voidptr(c_result), own /* & TODO: SWIG_POINTER_OWN */);
  return (std::ostream &) *c_result;
}


std::string SwigDirector_PySemElem::__str__() const {
  std::string c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PySemElem.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char * const swig_method_name = "__str__";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "__str__", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'PySemElem.__str__'");
    }
  }
  std::string *swig_optr = 0;
  int swig_ores = SWIG_AsPtr_std_string(result, &swig_optr);
  if (!SWIG_IsOK(swig_ores) || !swig_optr) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError((swig_optr ? swig_ores : SWIG_TypeError))), "in output value of type '""std::string""'");
  }
  c_result = *swig_optr;
  if (SWIG_IsNewObj(swig_ores)) delete swig_optr;
  return (std::string) c_result;
}


wali::ref_ptr< PySemElem > SwigDirector_PySemElem::pycombine(PySemElem *se) const {
  void *swig_argp ;
  int swig_res = 0 ;
  
  wali::ref_ptr< PySemElem > c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(se), SWIGTYPE_p_PySemElem,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PySemElem.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char * const swig_method_name = "pycombine";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"pycombine", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'PySemElem.pycombine'");
    }
  }
  swig_res = SWIG_ConvertPtr(result,&swig_argp,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t,  0  | 0);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""wali::ref_ptr< PySemElem >""'");
  }
  c_result = *(reinterpret_cast< wali::ref_ptr< PySemElem > * >(swig_argp));
  if (SWIG_IsNewObj(swig_res)) delete reinterpret_cast< wali::ref_ptr< PySemElem > * >(swig_argp);
  return (wali::ref_ptr< PySemElem >) c_result;
}


wali::ref_ptr< PySemElem > SwigDirector_PySemElem::pyextend(PySemElem *se) const {
  void *swig_argp ;
  int swig_res = 0 ;
  
  wali::ref_ptr< PySemElem > c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(se), SWIGTYPE_p_PySemElem,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PySemElem.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 5;
  const char * const swig_method_name = "pyextend";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"pyextend", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'PySemElem.pyextend'");
    }
  }
  swig_res = SWIG_ConvertPtr(result,&swig_argp,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t,  0  | 0);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""wali::ref_ptr< PySemElem >""'");
  }
  c_result = *(reinterpret_cast< wali::ref_ptr< PySemElem > * >(swig_argp));
  if (SWIG_IsNewObj(swig_res)) delete reinterpret_cast< wali::ref_ptr< PySemElem > * >(swig_argp);
  return (wali::ref_ptr< PySemElem >) c_result;
}


std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > SwigDirector_PySemElem::pydelta(PySemElem *se) {
  void *swig_argp ;
  int swig_res = 0 ;
  
  std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(se), SWIGTYPE_p_PySemElem,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PySemElem.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 6;
  const char * const swig_method_name = "pydelta";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"pydelta", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'PySemElem.pydelta'");
    }
  }
  swig_res = SWIG_ConvertPtr(result,&swig_argp,SWIGTYPE_p_std__pairT_wali__ref_ptrT_PySemElem_t_wali__ref_ptrT_PySemElem_t_t,  0  | 0);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > >""'");
  }
  c_result = *(reinterpret_cast< std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > * >(swig_argp));
  if (SWIG_IsNewObj(swig_res)) delete reinterpret_cast< std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > * >(swig_argp);
  return (std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > >) c_result;
}


bool SwigDirector_PySemElem::pyequal(PySemElem *se) const {
  bool c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(se), SWIGTYPE_p_PySemElem,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PySemElem.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 7;
  const char * const swig_method_name = "pyequal";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"pyequal", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'PySemElem.pyequal'");
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


bool SwigDirector_PySemElem::pyunderApproximates(PySemElem *se) const {
  bool c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(se), SWIGTYPE_p_PySemElem,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PySemElem.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 8;
  const char * const swig_method_name = "pyunder_approximates";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"pyunder_approximates", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'PySemElem.pyunder_approximates'");
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


wali::ref_ptr< PySemElem > SwigDirector_PySemElem::pystar() {
  void *swig_argp ;
  int swig_res = 0 ;
  
  wali::ref_ptr< PySemElem > c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PySemElem.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 9;
  const char * const swig_method_name = "pystar";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "pystar", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'PySemElem.pystar'");
    }
  }
  swig_res = SWIG_ConvertPtr(result,&swig_argp,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t,  0  | 0);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""wali::ref_ptr< PySemElem >""'");
  }
  c_result = *(reinterpret_cast< wali::ref_ptr< PySemElem > * >(swig_argp));
  if (SWIG_IsNewObj(swig_res)) delete reinterpret_cast< wali::ref_ptr< PySemElem > * >(swig_argp);
  return (wali::ref_ptr< PySemElem >) c_result;
}


wali::ref_ptr< PySemElem > SwigDirector_PySemElem::pyextendAndDiff(PySemElem *next, PySemElem *subtrahend) {
  void *swig_argp ;
  int swig_res = 0 ;
  
  wali::ref_ptr< PySemElem > c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(next), SWIGTYPE_p_PySemElem,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(subtrahend), SWIGTYPE_p_PySemElem,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PySemElem.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 10;
  const char * const swig_method_name = "pyextend_and_diff";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"pyextend_and_diff", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'PySemElem.pyextend_and_diff'");
    }
  }
  swig_res = SWIG_ConvertPtr(result,&swig_argp,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t,  0  | 0);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""wali::ref_ptr< PySemElem >""'");
  }
  c_result = *(reinterpret_cast< wali::ref_ptr< PySemElem > * >(swig_argp));
  if (SWIG_IsNewObj(swig_res)) delete reinterpret_cast< wali::ref_ptr< PySemElem > * >(swig_argp);
  return (wali::ref_ptr< PySemElem >) c_result;
}


wali::ref_ptr< PySemElem > SwigDirector_PySemElem::pydiff(PySemElem *se) {
  void *swig_argp ;
  int swig_res = 0 ;
  
  wali::ref_ptr< PySemElem > c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(se), SWIGTYPE_p_PySemElem,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PySemElem.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 11;
  const char * const swig_method_name = "pydiff";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"pydiff", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'PySemElem.pydiff'");
    }
  }
  swig_res = SWIG_ConvertPtr(result,&swig_argp,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t,  0  | 0);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""wali::ref_ptr< PySemElem >""'");
  }
  c_result = *(reinterpret_cast< wali::ref_ptr< PySemElem > * >(swig_argp));
  if (SWIG_IsNewObj(swig_res)) delete reinterpret_cast< wali::ref_ptr< PySemElem > * >(swig_argp);
  return (wali::ref_ptr< PySemElem >) c_result;
}


wali::ref_ptr< PySemElem > SwigDirector_PySemElem::pyone() const {
  void *swig_argp ;
  int swig_res = 0 ;
  
  wali::ref_ptr< PySemElem > c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PySemElem.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 12;
  const char * const swig_method_name = "pyone";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "pyone", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'PySemElem.pyone'");
    }
  }
  swig_res = SWIG_ConvertPtr(result,&swig_argp,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t,  0  | 0);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""wali::ref_ptr< PySemElem >""'");
  }
  c_result = *(reinterpret_cast< wali::ref_ptr< PySemElem > * >(swig_argp));
  if (SWIG_IsNewObj(swig_res)) delete reinterpret_cast< wali::ref_ptr< PySemElem > * >(swig_argp);
  return (wali::ref_ptr< PySemElem >) c_result;
}


wali::ref_ptr< PySemElem > SwigDirector_PySemElem::pyzero() const {
  void *swig_argp ;
  int swig_res = 0 ;
  
  wali::ref_ptr< PySemElem > c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PySemElem.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 13;
  const char * const swig_method_name = "pyzero";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "pyzero", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'PySemElem.pyzero'");
    }
  }
  swig_res = SWIG_ConvertPtr(result,&swig_argp,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t,  0  | 0);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""wali::ref_ptr< PySemElem >""'");
  }
  c_result = *(reinterpret_cast< wali::ref_ptr< PySemElem > * >(swig_argp));
  if (SWIG_IsNewObj(swig_res)) delete reinterpret_cast< wali::ref_ptr< PySemElem > * >(swig_argp);
  return (wali::ref_ptr< PySemElem >) c_result;
}


#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Printable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::Printable *arg1 = (wali::Printable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Printable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__Printable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Printable" "', argument " "1"" of type '" "wali::Printable *""'"); 
  }
  arg1 = reinterpret_cast< wali::Printable * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Printable_to_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::Printable *arg1 = (wali::Printable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Printable_to_string",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__Printable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Printable_to_string" "', argument " "1"" of type '" "wali::Printable const *""'"); 
  }
  arg1 = reinterpret_cast< wali::Printable * >(argp1);
  result = ((wali::Printable const *)arg1)->to_string();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Printable_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::Printable *arg1 = (wali::Printable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Printable_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__Printable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Printable_toString" "', argument " "1"" of type '" "wali::Printable const *""'"); 
  }
  arg1 = reinterpret_cast< wali::Printable * >(argp1);
  result = ((wali::Printable const *)arg1)->toString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Printable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wali__Printable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_get_key_space(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::KeySpace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":get_key_space")) SWIG_fail;
  result = (wali::KeySpace *)wali::getKeySpace();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__KeySpace, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clear_keyspace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":clear_keyspace")) SWIG_fail;
  wali::clearKeyspace();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_key__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< wali::ref_ptr< wali::KeySource > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:get_key",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wali__ref_ptrT_wali__KeySource_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_key" "', argument " "1"" of type '" "wali::key_src_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_key" "', argument " "1"" of type '" "wali::key_src_t""'");
    } else {
      wali::key_src_t * temp = reinterpret_cast< wali::key_src_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = wali::getKey(arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_key__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:get_key",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_key" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_key" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = wali::getKey((std::string const &)*arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_key__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:get_key",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_key" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = wali::getKey((char const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_key__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:get_key",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_key" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = wali::getKey(arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_key__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::Key arg1 ;
  wali::Key arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:get_key",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_key" "', argument " "1"" of type '" "wali::Key""'");
  } 
  arg1 = static_cast< wali::Key >(val1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "get_key" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  result = wali::getKey(arg1,arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_key__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:get_key",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_key" "', argument " "1"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_key" "', argument " "1"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > >""'");
    } else {
      std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > * temp = reinterpret_cast< std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = wali::getKey(arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_key(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wali__ref_ptrT_wali__KeySource_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_get_key__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_get_key__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_get_key__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_get_key__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_get_key__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_get_key__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'get_key'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::getKey(wali::key_src_t)\n"
    "    wali::getKey(std::string const &)\n"
    "    wali::getKey(char const *)\n"
    "    wali::getKey(int)\n"
    "    wali::getKey(wali::Key,wali::Key)\n"
    "    wali::getKey(std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_get_key_source(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::Key arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< wali::ref_ptr< wali::KeySource > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:get_key_source",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_key_source" "', argument " "1"" of type '" "wali::Key""'");
  } 
  arg1 = static_cast< wali::Key >(val1);
  result = wali::getKeySource(arg1);
  resultobj = SWIG_NewPointerObj((new wali::key_src_t(static_cast< const wali::key_src_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__KeySource_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_print_key__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  wali::Key arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:print_key",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "print_key" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "print_key" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "print_key" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "print_key" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (std::ostream *) &wali::printKey(*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_print_key__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  wali::Key arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:print_key",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "print_key" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "print_key" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "print_key" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  result = (std::ostream *) &wali::printKey(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_print_key(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_print_key__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_print_key__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'print_key'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::printKey(std::ostream &,wali::Key,bool)\n"
    "    wali::printKey(std::ostream &,wali::Key)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_key_2str(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::Key arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:key_2str",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "key_2str" "', argument " "1"" of type '" "wali::Key""'");
  } 
  arg1 = static_cast< wali::Key >(val1);
  result = wali::key2str(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_epsilon_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)":get_epsilon_key")) SWIG_fail;
  result = getEpsilonKey();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_KeySource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::KeySource *arg1 = (wali::KeySource *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_KeySource",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__KeySource, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KeySource" "', argument " "1"" of type '" "wali::KeySource *""'"); 
  }
  arg1 = reinterpret_cast< wali::KeySource * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeySource_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::KeySource *arg1 = (wali::KeySource *) 0 ;
  wali::KeySource *arg2 = (wali::KeySource *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeySource_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__KeySource, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeySource_equal" "', argument " "1"" of type '" "wali::KeySource *""'"); 
  }
  arg1 = reinterpret_cast< wali::KeySource * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__KeySource, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeySource_equal" "', argument " "2"" of type '" "wali::KeySource *""'"); 
  }
  arg2 = reinterpret_cast< wali::KeySource * >(argp2);
  result = (bool)(arg1)->equal(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeySource_hash(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::KeySource *arg1 = (wali::KeySource *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KeySource_hash",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__KeySource, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeySource_hash" "', argument " "1"" of type '" "wali::KeySource const *""'"); 
  }
  arg1 = reinterpret_cast< wali::KeySource * >(argp1);
  result = ((wali::KeySource const *)arg1)->hash();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *KeySource_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wali__KeySource, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GenKeySource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  wali::Key arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::wpds::GenKeySource *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_GenKeySource",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GenKeySource" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GenKeySource" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  result = (wali::wpds::GenKeySource *)new wali::wpds::GenKeySource(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wpds__GenKeySource, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GenKeySource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::GenKeySource *arg1 = (wali::wpds::GenKeySource *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GenKeySource",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__GenKeySource, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GenKeySource" "', argument " "1"" of type '" "wali::wpds::GenKeySource *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::GenKeySource * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenKeySource_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::GenKeySource *arg1 = (wali::wpds::GenKeySource *) 0 ;
  wali::KeySource *arg2 = (wali::KeySource *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GenKeySource_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__GenKeySource, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenKeySource_equal" "', argument " "1"" of type '" "wali::wpds::GenKeySource *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::GenKeySource * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__KeySource, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GenKeySource_equal" "', argument " "2"" of type '" "wali::KeySource *""'"); 
  }
  arg2 = reinterpret_cast< wali::KeySource * >(argp2);
  result = (bool)(arg1)->equal(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenKeySource_hash(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::GenKeySource *arg1 = (wali::wpds::GenKeySource *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GenKeySource_hash",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__GenKeySource, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenKeySource_hash" "', argument " "1"" of type '" "wali::wpds::GenKeySource const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::GenKeySource * >(argp1);
  result = ((wali::wpds::GenKeySource const *)arg1)->hash();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenKeySource_get_generation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::GenKeySource *arg1 = (wali::wpds::GenKeySource *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GenKeySource_get_generation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__GenKeySource, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenKeySource_get_generation" "', argument " "1"" of type '" "wali::wpds::GenKeySource const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::GenKeySource * >(argp1);
  result = ((wali::wpds::GenKeySource const *)arg1)->getGeneration();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GenKeySource_get_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::GenKeySource *arg1 = (wali::wpds::GenKeySource *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GenKeySource_get_key",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__GenKeySource, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GenKeySource_get_key" "', argument " "1"" of type '" "wali::wpds::GenKeySource const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::GenKeySource * >(argp1);
  result = ((wali::wpds::GenKeySource const *)arg1)->getKey();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GenKeySource_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wali__wpds__GenKeySource, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_SemElem_xmltag_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SemElem_xmltag is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SemElem_xmltag_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(wali::SemElem::XMLTag));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_delete_SemElem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SemElem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SemElem" "', argument " "1"" of type '" "wali::SemElem *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  arg1->count--;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_one(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElem_one",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_one" "', argument " "1"" of type '" "wali::SemElem const *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  result = ((wali::SemElem const *)arg1)->one();
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElem_zero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_zero" "', argument " "1"" of type '" "wali::SemElem const *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  result = ((wali::SemElem const *)arg1)->zero();
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_extend__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  wali::SemElem *arg2 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElem_extend",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_extend" "', argument " "1"" of type '" "wali::SemElem *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElem_extend" "', argument " "2"" of type '" "wali::SemElem *""'"); 
  }
  arg2 = reinterpret_cast< wali::SemElem * >(argp2);
  result = (arg1)->extend(arg2);
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_combine__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  wali::SemElem *arg2 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElem_combine",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_combine" "', argument " "1"" of type '" "wali::SemElem *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElem_combine" "', argument " "2"" of type '" "wali::SemElem *""'"); 
  }
  arg2 = reinterpret_cast< wali::SemElem * >(argp2);
  result = (arg1)->combine(arg2);
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_equal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  wali::SemElem *arg2 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElem_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_equal" "', argument " "1"" of type '" "wali::SemElem const *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElem_equal" "', argument " "2"" of type '" "wali::SemElem *""'"); 
  }
  arg2 = reinterpret_cast< wali::SemElem * >(argp2);
  result = (bool)((wali::SemElem const *)arg1)->equal(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_under_approximates__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  wali::SemElem *arg2 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElem_under_approximates",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_under_approximates" "', argument " "1"" of type '" "wali::SemElem *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElem_under_approximates" "', argument " "2"" of type '" "wali::SemElem *""'"); 
  }
  arg2 = reinterpret_cast< wali::SemElem * >(argp2);
  result = (bool)(arg1)->underApproximates(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_marshall_weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElem_marshall_weight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_marshall_weight" "', argument " "1"" of type '" "wali::SemElem const *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElem_marshall_weight" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElem_marshall_weight" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (std::ostream *) &((wali::SemElem const *)arg1)->marshallWeight(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_diff__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  wali::SemElem *arg2 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElem_diff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_diff" "', argument " "1"" of type '" "wali::SemElem *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElem_diff" "', argument " "2"" of type '" "wali::SemElem *""'"); 
  }
  arg2 = reinterpret_cast< wali::SemElem * >(argp2);
  result = (arg1)->diff(arg2);
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_quasi_one(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElem_quasi_one",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_quasi_one" "', argument " "1"" of type '" "wali::SemElem const *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  result = ((wali::SemElem const *)arg1)->quasi_one();
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_delta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  wali::SemElem *arg2 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< wali::ref_ptr< wali::SemElem >,wali::ref_ptr< wali::SemElem > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElem_delta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_delta" "', argument " "1"" of type '" "wali::SemElem *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElem_delta" "', argument " "2"" of type '" "wali::SemElem *""'"); 
  }
  arg2 = reinterpret_cast< wali::SemElem * >(argp2);
  result = (arg1)->delta(arg2);
  resultobj = SWIG_NewPointerObj((new std::pair< wali::sem_elem_t,wali::sem_elem_t >(static_cast< const std::pair< wali::sem_elem_t,wali::sem_elem_t >& >(result))), SWIGTYPE_p_std__pairT_wali__ref_ptrT_wali__SemElem_t_wali__ref_ptrT_wali__SemElem_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_star(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElem_star",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_star" "', argument " "1"" of type '" "wali::SemElem *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  result = (arg1)->star();
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_extend__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElem_extend",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_extend" "', argument " "1"" of type '" "wali::SemElem *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElem_extend" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElem_extend" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->extend(arg2);
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_extend(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__SemElem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__SemElem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElem_extend__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__SemElem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElem_extend__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SemElem_extend'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::SemElem::extend(wali::SemElem *)\n"
    "    wali::SemElem::extend(wali::sem_elem_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SemElem_combine__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElem_combine",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_combine" "', argument " "1"" of type '" "wali::SemElem *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElem_combine" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElem_combine" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->combine(arg2);
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_combine(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__SemElem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__SemElem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElem_combine__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__SemElem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElem_combine__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SemElem_combine'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::SemElem::combine(wali::SemElem *)\n"
    "    wali::SemElem::combine(wali::sem_elem_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SemElem_equal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElem_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_equal" "', argument " "1"" of type '" "wali::SemElem const *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElem_equal" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElem_equal" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)((wali::SemElem const *)arg1)->equal(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_equal(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__SemElem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__SemElem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElem_equal__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__SemElem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElem_equal__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SemElem_equal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::SemElem::equal(wali::SemElem *) const\n"
    "    wali::SemElem::equal(wali::sem_elem_t) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SemElem_under_approximates__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElem_under_approximates",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_under_approximates" "', argument " "1"" of type '" "wali::SemElem *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElem_under_approximates" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElem_under_approximates" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->underApproximates(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_under_approximates(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__SemElem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__SemElem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElem_under_approximates__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__SemElem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElem_under_approximates__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SemElem_under_approximates'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::SemElem::underApproximates(wali::SemElem *)\n"
    "    wali::SemElem::underApproximates(wali::sem_elem_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SemElem_diff__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElem_diff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_diff" "', argument " "1"" of type '" "wali::SemElem *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElem_diff" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElem_diff" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->diff(arg2);
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_diff(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__SemElem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__SemElem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElem_diff__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__SemElem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElem_diff__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SemElem_diff'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::SemElem::diff(wali::SemElem *)\n"
    "    wali::SemElem::diff(wali::sem_elem_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SemElem_delta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< wali::ref_ptr< wali::SemElem >,wali::ref_ptr< wali::SemElem > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElem_delta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_delta" "', argument " "1"" of type '" "wali::SemElem *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElem_delta" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElem_delta" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->delta(arg2);
  resultobj = SWIG_NewPointerObj((new std::pair< wali::sem_elem_t,wali::sem_elem_t >(static_cast< const std::pair< wali::sem_elem_t,wali::sem_elem_t >& >(result))), SWIGTYPE_p_std__pairT_wali__ref_ptrT_wali__SemElem_t_wali__ref_ptrT_wali__SemElem_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_delta(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__SemElem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__SemElem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElem_delta__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__SemElem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElem_delta__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SemElem_delta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::SemElem::delta(wali::SemElem *)\n"
    "    wali::SemElem::delta(wali::sem_elem_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SemElem_extend_and_diff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  wali::sem_elem_t arg2 ;
  wali::sem_elem_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SemElem_extend_and_diff",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_extend_and_diff" "', argument " "1"" of type '" "wali::SemElem *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElem_extend_and_diff" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElem_extend_and_diff" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SemElem_extend_and_diff" "', argument " "3"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElem_extend_and_diff" "', argument " "3"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (arg1)->extendAndDiff(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_container_less_than__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  wali::SemElem *arg2 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElem_container_less_than",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_container_less_than" "', argument " "1"" of type '" "wali::SemElem const *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElem_container_less_than" "', argument " "2"" of type '" "wali::SemElem const *""'"); 
  }
  arg2 = reinterpret_cast< wali::SemElem * >(argp2);
  result = (bool)((wali::SemElem const *)arg1)->containerLessThan((wali::SemElem const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_container_less_than__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElem_container_less_than",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_container_less_than" "', argument " "1"" of type '" "wali::SemElem const *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElem_container_less_than" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElem_container_less_than" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)((wali::SemElem const *)arg1)->containerLessThan(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_container_less_than(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__SemElem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__SemElem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElem_container_less_than__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__SemElem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElem_container_less_than__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SemElem_container_less_than'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::SemElem::containerLessThan(wali::SemElem const *) const\n"
    "    wali::SemElem::containerLessThan(wali::sem_elem_t) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SemElem_hash(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElem_hash",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_hash" "', argument " "1"" of type '" "wali::SemElem const *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  result = ((wali::SemElem const *)arg1)->hash();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_print_typename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElem_print_typename",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_print_typename" "', argument " "1"" of type '" "wali::SemElem const *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElem_print_typename" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElem_print_typename" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (std::ostream *) &((wali::SemElem const *)arg1)->print_typename(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_to_string_typename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElem_to_string_typename",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_to_string_typename" "', argument " "1"" of type '" "wali::SemElem const *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  result = ((wali::SemElem const *)arg1)->toStringTypename();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem_getuserdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElem_getuserdata",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem_getuserdata" "', argument " "1"" of type '" "wali::SemElem *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  result = (PyObject *)(arg1)->getuserdata();
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElem___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElem___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElem___str__" "', argument " "1"" of type '" "wali::SemElem *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  result = (PyObject *)wali_SemElem___str__(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SemElem_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wali__SemElem, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_test_semelem_impl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::sem_elem_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:test_semelem_impl",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_semelem_impl" "', argument " "1"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "test_semelem_impl" "', argument " "1"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  wali::test_semelem_impl(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemRefPtrContainerLessThan___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElemRefPtrContainerLessThan *arg1 = (wali::SemElemRefPtrContainerLessThan *) 0 ;
  wali::sem_elem_t arg2 ;
  wali::sem_elem_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SemElemRefPtrContainerLessThan___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElemRefPtrContainerLessThan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemRefPtrContainerLessThan___call__" "', argument " "1"" of type '" "wali::SemElemRefPtrContainerLessThan const *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElemRefPtrContainerLessThan * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemRefPtrContainerLessThan___call__" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemRefPtrContainerLessThan___call__" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SemElemRefPtrContainerLessThan___call__" "', argument " "3"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemRefPtrContainerLessThan___call__" "', argument " "3"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)((wali::SemElemRefPtrContainerLessThan const *)arg1)->operator ()(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SemElemRefPtrContainerLessThan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElemRefPtrContainerLessThan *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SemElemRefPtrContainerLessThan")) SWIG_fail;
  result = (wali::SemElemRefPtrContainerLessThan *)new wali::SemElemRefPtrContainerLessThan();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__SemElemRefPtrContainerLessThan, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SemElemRefPtrContainerLessThan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElemRefPtrContainerLessThan *arg1 = (wali::SemElemRefPtrContainerLessThan *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SemElemRefPtrContainerLessThan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElemRefPtrContainerLessThan, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SemElemRefPtrContainerLessThan" "', argument " "1"" of type '" "wali::SemElemRefPtrContainerLessThan *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElemRefPtrContainerLessThan * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SemElemRefPtrContainerLessThan_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wali__SemElemRefPtrContainerLessThan, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SemElemRefPtrHash___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElemRefPtrHash *arg1 = (wali::SemElemRefPtrHash *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemRefPtrHash___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElemRefPtrHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemRefPtrHash___call__" "', argument " "1"" of type '" "wali::SemElemRefPtrHash const *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElemRefPtrHash * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemRefPtrHash___call__" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemRefPtrHash___call__" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = ((wali::SemElemRefPtrHash const *)arg1)->operator ()(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SemElemRefPtrHash(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElemRefPtrHash *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SemElemRefPtrHash")) SWIG_fail;
  result = (wali::SemElemRefPtrHash *)new wali::SemElemRefPtrHash();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__SemElemRefPtrHash, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SemElemRefPtrHash(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElemRefPtrHash *arg1 = (wali::SemElemRefPtrHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SemElemRefPtrHash",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElemRefPtrHash, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SemElemRefPtrHash" "', argument " "1"" of type '" "wali::SemElemRefPtrHash *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElemRefPtrHash * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SemElemRefPtrHash_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wali__SemElemRefPtrHash, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SemElemRefPtrEqual___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElemRefPtrEqual *arg1 = (wali::SemElemRefPtrEqual *) 0 ;
  wali::sem_elem_t arg2 ;
  wali::sem_elem_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SemElemRefPtrEqual___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElemRefPtrEqual, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemRefPtrEqual___call__" "', argument " "1"" of type '" "wali::SemElemRefPtrEqual const *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElemRefPtrEqual * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemRefPtrEqual___call__" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemRefPtrEqual___call__" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SemElemRefPtrEqual___call__" "', argument " "3"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemRefPtrEqual___call__" "', argument " "3"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)((wali::SemElemRefPtrEqual const *)arg1)->operator ()(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SemElemRefPtrEqual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElemRefPtrEqual *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SemElemRefPtrEqual")) SWIG_fail;
  result = (wali::SemElemRefPtrEqual *)new wali::SemElemRefPtrEqual();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__SemElemRefPtrEqual, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SemElemRefPtrEqual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElemRefPtrEqual *arg1 = (wali::SemElemRefPtrEqual *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SemElemRefPtrEqual",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElemRefPtrEqual, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SemElemRefPtrEqual" "', argument " "1"" of type '" "wali::SemElemRefPtrEqual *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElemRefPtrEqual * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SemElemRefPtrEqual_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wali__SemElemRefPtrEqual, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SemElemPtr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::SemElem *arg1 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::ref_ptr< SemElem > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SemElemPtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SemElemPtr" "', argument " "1"" of type '" "wali::SemElem *""'"); 
  }
  arg1 = reinterpret_cast< wali::SemElem * >(argp1);
  result = (wali::ref_ptr< SemElem > *)new wali::ref_ptr< SemElem >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SemElemPtr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SemElemPtr")) SWIG_fail;
  result = (wali::ref_ptr< SemElem > *)new wali::ref_ptr< SemElem >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SemElemPtr__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< wali::SemElem > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::ref_ptr< SemElem > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SemElemPtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SemElemPtr" "', argument " "1"" of type '" "wali::ref_ptr< wali::SemElem > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SemElemPtr" "', argument " "1"" of type '" "wali::ref_ptr< wali::SemElem > const &""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< wali::SemElem > * >(argp1);
  result = (wali::ref_ptr< SemElem > *)new wali::ref_ptr< SemElem >((wali::ref_ptr< wali::SemElem > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SemElemPtr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SemElemPtr__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__SemElem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SemElemPtr__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SemElemPtr__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SemElemPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::ref_ptr< SemElem >::ref_ptr(wali::SemElem *)\n"
    "    wali::ref_ptr< SemElem >::ref_ptr()\n"
    "    wali::ref_ptr< SemElem >::ref_ptr(wali::ref_ptr< wali::SemElem > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SemElemPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SemElemPtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SemElemPtr" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  wali::ref_ptr< wali::SemElem > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtr___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr___eq__" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr___eq__" "', argument " "2"" of type '" "wali::ref_ptr< wali::SemElem > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemPtr___eq__" "', argument " "2"" of type '" "wali::ref_ptr< wali::SemElem > const &""'"); 
  }
  arg2 = reinterpret_cast< wali::ref_ptr< wali::SemElem > * >(argp2);
  result = (bool)((wali::ref_ptr< SemElem > const *)arg1)->operator ==((wali::ref_ptr< wali::SemElem > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  wali::ref_ptr< wali::SemElem > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtr___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr___ne__" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr___ne__" "', argument " "2"" of type '" "wali::ref_ptr< wali::SemElem > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemPtr___ne__" "', argument " "2"" of type '" "wali::ref_ptr< wali::SemElem > const &""'"); 
  }
  arg2 = reinterpret_cast< wali::ref_ptr< wali::SemElem > * >(argp2);
  result = (bool)((wali::ref_ptr< SemElem > const *)arg1)->operator !=((wali::ref_ptr< wali::SemElem > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_get_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::SemElem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElemPtr_get_ptr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_get_ptr" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  result = (wali::SemElem *)((wali::ref_ptr< SemElem > const *)arg1)->get_ptr();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__SemElem, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::SemElem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElemPtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr___deref__" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  result = (wali::SemElem *)((wali::ref_ptr< SemElem > const *)arg1)->operator ->();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__SemElem, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::SemElem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElemPtr___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr___ref__" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  result = (wali::SemElem *) &((wali::ref_ptr< SemElem > const *)arg1)->operator *();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__SemElem, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  wali::ref_ptr< wali::SemElem > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtr___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr___lt__" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr___lt__" "', argument " "2"" of type '" "wali::ref_ptr< wali::SemElem > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemPtr___lt__" "', argument " "2"" of type '" "wali::ref_ptr< wali::SemElem > const &""'"); 
  }
  arg2 = reinterpret_cast< wali::ref_ptr< wali::SemElem > * >(argp2);
  result = (bool)((wali::ref_ptr< SemElem > const *)arg1)->operator <((wali::ref_ptr< wali::SemElem > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_is_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElemPtr_is_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_is_empty" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  result = (bool)((wali::ref_ptr< SemElem > const *)arg1)->is_empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_is_valid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElemPtr_is_valid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_is_valid" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  result = (bool)((wali::ref_ptr< SemElem > const *)arg1)->is_valid();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_xmltag_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElemPtr_xmltag_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_xmltag_get" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  result = (std::string *) & (wali::SemElem::XMLTag);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_one(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElemPtr_one",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_one" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  result = (*arg1)->one();
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElemPtr_zero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_zero" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  result = (*arg1)->zero();
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_extend__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  wali::SemElem *arg2 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtr_extend",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_extend" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr_extend" "', argument " "2"" of type '" "wali::SemElem *""'"); 
  }
  arg2 = reinterpret_cast< wali::SemElem * >(argp2);
  result = (*arg1)->extend(arg2);
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_extend__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtr_extend",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_extend" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr_extend" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemPtr_extend" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (*arg1)->extend(arg2);
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_extend(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__SemElem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElemPtr_extend__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElemPtr_extend__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SemElemPtr_extend'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::SemElem::extend(wali::SemElem *)\n"
    "    wali::SemElem::extend(wali::sem_elem_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_combine__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  wali::SemElem *arg2 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtr_combine",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_combine" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr_combine" "', argument " "2"" of type '" "wali::SemElem *""'"); 
  }
  arg2 = reinterpret_cast< wali::SemElem * >(argp2);
  result = (*arg1)->combine(arg2);
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_combine__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtr_combine",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_combine" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr_combine" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemPtr_combine" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (*arg1)->combine(arg2);
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_combine(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__SemElem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElemPtr_combine__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElemPtr_combine__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SemElemPtr_combine'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::SemElem::combine(wali::SemElem *)\n"
    "    wali::SemElem::combine(wali::sem_elem_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_equal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  wali::SemElem *arg2 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtr_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_equal" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr_equal" "', argument " "2"" of type '" "wali::SemElem *""'"); 
  }
  arg2 = reinterpret_cast< wali::SemElem * >(argp2);
  result = (bool)(*arg1)->equal(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_equal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtr_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_equal" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr_equal" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemPtr_equal" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(*arg1)->equal(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_equal(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__SemElem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElemPtr_equal__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElemPtr_equal__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SemElemPtr_equal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::SemElem::equal(wali::SemElem *) const\n"
    "    wali::SemElem::equal(wali::sem_elem_t) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_under_approximates__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  wali::SemElem *arg2 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtr_under_approximates",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_under_approximates" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr_under_approximates" "', argument " "2"" of type '" "wali::SemElem *""'"); 
  }
  arg2 = reinterpret_cast< wali::SemElem * >(argp2);
  result = (bool)(*arg1)->underApproximates(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_under_approximates__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtr_under_approximates",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_under_approximates" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr_under_approximates" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemPtr_under_approximates" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(*arg1)->underApproximates(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_under_approximates(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__SemElem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElemPtr_under_approximates__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElemPtr_under_approximates__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SemElemPtr_under_approximates'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::SemElem::underApproximates(wali::SemElem *)\n"
    "    wali::SemElem::underApproximates(wali::sem_elem_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_marshall_weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtr_marshall_weight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_marshall_weight" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr_marshall_weight" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemPtr_marshall_weight" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (std::ostream *) &(*arg1)->marshallWeight(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_diff__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  wali::SemElem *arg2 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtr_diff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_diff" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr_diff" "', argument " "2"" of type '" "wali::SemElem *""'"); 
  }
  arg2 = reinterpret_cast< wali::SemElem * >(argp2);
  result = (*arg1)->diff(arg2);
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_diff__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtr_diff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_diff" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr_diff" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemPtr_diff" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (*arg1)->diff(arg2);
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_diff(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__SemElem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElemPtr_diff__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElemPtr_diff__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SemElemPtr_diff'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::SemElem::diff(wali::SemElem *)\n"
    "    wali::SemElem::diff(wali::sem_elem_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_quasi_one(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElemPtr_quasi_one",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_quasi_one" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  result = (*arg1)->quasi_one();
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_delta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  wali::SemElem *arg2 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< wali::ref_ptr< wali::SemElem >,wali::ref_ptr< wali::SemElem > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtr_delta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_delta" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr_delta" "', argument " "2"" of type '" "wali::SemElem *""'"); 
  }
  arg2 = reinterpret_cast< wali::SemElem * >(argp2);
  result = (*arg1)->delta(arg2);
  resultobj = SWIG_NewPointerObj((new std::pair< wali::sem_elem_t,wali::sem_elem_t >(static_cast< const std::pair< wali::sem_elem_t,wali::sem_elem_t >& >(result))), SWIGTYPE_p_std__pairT_wali__ref_ptrT_wali__SemElem_t_wali__ref_ptrT_wali__SemElem_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_delta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< wali::ref_ptr< wali::SemElem >,wali::ref_ptr< wali::SemElem > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtr_delta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_delta" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr_delta" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemPtr_delta" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (*arg1)->delta(arg2);
  resultobj = SWIG_NewPointerObj((new std::pair< wali::sem_elem_t,wali::sem_elem_t >(static_cast< const std::pair< wali::sem_elem_t,wali::sem_elem_t >& >(result))), SWIGTYPE_p_std__pairT_wali__ref_ptrT_wali__SemElem_t_wali__ref_ptrT_wali__SemElem_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_delta(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__SemElem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElemPtr_delta__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElemPtr_delta__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SemElemPtr_delta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::SemElem::delta(wali::SemElem *)\n"
    "    wali::SemElem::delta(wali::sem_elem_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_star(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElemPtr_star",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_star" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  result = (*arg1)->star();
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_extend_and_diff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  wali::sem_elem_t arg2 ;
  wali::sem_elem_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SemElemPtr_extend_and_diff",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_extend_and_diff" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr_extend_and_diff" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemPtr_extend_and_diff" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SemElemPtr_extend_and_diff" "', argument " "3"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemPtr_extend_and_diff" "', argument " "3"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (*arg1)->extendAndDiff(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_container_less_than__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  wali::SemElem *arg2 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtr_container_less_than",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_container_less_than" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr_container_less_than" "', argument " "2"" of type '" "wali::SemElem const *""'"); 
  }
  arg2 = reinterpret_cast< wali::SemElem * >(argp2);
  result = (bool)(*arg1)->containerLessThan((wali::SemElem const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_container_less_than__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtr_container_less_than",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_container_less_than" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr_container_less_than" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemPtr_container_less_than" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(*arg1)->containerLessThan(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_container_less_than(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__SemElem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElemPtr_container_less_than__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SemElemPtr_container_less_than__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SemElemPtr_container_less_than'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::SemElem::containerLessThan(wali::SemElem const *) const\n"
    "    wali::SemElem::containerLessThan(wali::sem_elem_t) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_hash(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElemPtr_hash",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_hash" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  result = (*arg1)->hash();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_print_typename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtr_print_typename",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_print_typename" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtr_print_typename" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemPtr_print_typename" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (std::ostream *) &(*arg1)->print_typename(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_to_string_typename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElemPtr_to_string_typename",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_to_string_typename" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  result = (*arg1)->toStringTypename();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_getuserdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElemPtr_getuserdata",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_getuserdata" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  result = (PyObject *)(*arg1)->getuserdata();
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElemPtr___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr___str__" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  result = (PyObject *)wali_SemElem___str__((wali::SemElem*)(arg1)->operator ->());
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_to_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElemPtr_to_string",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_to_string" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  result = (*arg1)->to_string();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtr_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< SemElem > *arg1 = (wali::ref_ptr< SemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElemPtr_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtr_toString" "', argument " "1"" of type '" "wali::ref_ptr< SemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< SemElem > * >(argp1);
  result = (*arg1)->toString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SemElemPtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_KeyPair__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< size_t,size_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_KeyPair")) SWIG_fail;
  result = (std::pair< size_t,size_t > *)new std::pair< size_t,size_t >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_size_t_size_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KeyPair__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< size_t,size_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_KeyPair",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KeyPair" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_KeyPair" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (std::pair< size_t,size_t > *)new std::pair< size_t,size_t >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_size_t_size_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KeyPair__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< size_t,size_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::pair< size_t,size_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KeyPair",&obj0)) SWIG_fail;
  {
    std::pair<size_t,size_t > *ptr = (std::pair<size_t,size_t > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KeyPair" "', argument " "1"" of type '" "std::pair< size_t,size_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KeyPair" "', argument " "1"" of type '" "std::pair< size_t,size_t > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< size_t,size_t > *)new std::pair< size_t,size_t >((std::pair< size_t,size_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_size_t_size_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KeyPair(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_KeyPair__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair<size_t,size_t >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_KeyPair__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_KeyPair__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_KeyPair'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< size_t,size_t >::pair()\n"
    "    std::pair< size_t,size_t >::pair(size_t,size_t)\n"
    "    std::pair< size_t,size_t >::pair(std::pair< size_t,size_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KeyPair_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< size_t,size_t > *arg1 = (std::pair< size_t,size_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeyPair_first_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_size_t_size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPair_first_set" "', argument " "1"" of type '" "std::pair< size_t,size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< size_t,size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KeyPair_first_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->first = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPair_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< size_t,size_t > *arg1 = (std::pair< size_t,size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KeyPair_first_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_size_t_size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPair_first_get" "', argument " "1"" of type '" "std::pair< size_t,size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< size_t,size_t > * >(argp1);
  result =  ((arg1)->first);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPair_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< size_t,size_t > *arg1 = (std::pair< size_t,size_t > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeyPair_second_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_size_t_size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPair_second_set" "', argument " "1"" of type '" "std::pair< size_t,size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< size_t,size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KeyPair_second_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->second = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPair_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< size_t,size_t > *arg1 = (std::pair< size_t,size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KeyPair_second_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_size_t_size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPair_second_get" "', argument " "1"" of type '" "std::pair< size_t,size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< size_t,size_t > * >(argp1);
  result =  ((arg1)->second);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_KeyPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< size_t,size_t > *arg1 = (std::pair< size_t,size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_KeyPair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_size_t_size_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KeyPair" "', argument " "1"" of type '" "std::pair< size_t,size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< size_t,size_t > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *KeyPair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_size_t_size_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_strhashfn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:strhashfn",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "strhashfn" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (unsigned long)wali::strhashfn((char const *)arg1);
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KeyPairMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KeyPairMap",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KeyPairMap" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::size_type""'");
  } 
  arg1 = static_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::size_type >(val1);
  result = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *)new wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KeyPairMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_KeyPairMap")) SWIG_fail;
  result = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *)new wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KeyPairMap__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KeyPairMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KeyPairMap" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KeyPairMap" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > > const &""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > > * >(argp1);
  result = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *)new wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >((wali::HashMap< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KeyPairMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_KeyPairMap__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_KeyPairMap__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_KeyPairMap__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_KeyPairMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::HashMap(wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::size_type)\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::HashMap()\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::HashMap(wali::HashMap< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_KeyPairMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_KeyPairMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KeyPairMap" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KeyPairMap_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_clear" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KeyPairMap_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_size" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  result = ((wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KeyPairMap_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_capacity" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  result = ((wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  KeyPair *arg2 = 0 ;
  TransSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::pair< wali::HashMapIterator< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > >,bool > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:KeyPairMap_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_insert" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_KeyPair,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairMap_insert" "', argument " "2"" of type '" "KeyPair const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairMap_insert" "', argument " "2"" of type '" "KeyPair const &""'"); 
  }
  arg2 = reinterpret_cast< KeyPair * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_TransSet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KeyPairMap_insert" "', argument " "3"" of type '" "TransSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairMap_insert" "', argument " "3"" of type '" "TransSet const &""'"); 
  }
  arg3 = reinterpret_cast< TransSet * >(argp3);
  result = (arg1)->insert((KeyPair const &)*arg2,(TransSet const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::pair< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator,bool >(static_cast< const std::pair< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator,bool >& >(result))), SWIGTYPE_p_std__pairT_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t_bool_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  KeyPair *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeyPairMap_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_erase" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_KeyPair,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairMap_erase" "', argument " "2"" of type '" "KeyPair const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairMap_erase" "', argument " "2"" of type '" "KeyPair const &""'"); 
  }
  arg2 = reinterpret_cast< KeyPair * >(argp2);
  (arg1)->erase((KeyPair const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< wali::HashMapIterator< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KeyPairMap_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_begin" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj((new wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator(static_cast< const wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator& >(result))), SWIGTYPE_p_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< wali::HashMapIterator< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KeyPairMap_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_end" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj((new wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator(static_cast< const wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator& >(result))), SWIGTYPE_p_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< wali::HashMapConstIterator< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KeyPairMap_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_begin" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  result = ((wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj((new wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator(static_cast< const wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator& >(result))), SWIGTYPE_p_wali__HashMapConstIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_begin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_KeyPairMap_begin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_KeyPairMap_begin__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KeyPairMap_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::begin()\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< wali::HashMapConstIterator< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KeyPairMap_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_end" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  result = ((wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj((new wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator(static_cast< const wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator& >(result))), SWIGTYPE_p_wali__HashMapConstIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_end(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_KeyPairMap_end__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_KeyPairMap_end__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KeyPairMap_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::end()\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_key__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  KeyPair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeyPairMap_key",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_key" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairMap_key" "', argument " "2"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairMap_key" "', argument " "2"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator &""'"); 
  }
  arg2 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator * >(argp2);
  result = (KeyPair *) &(arg1)->key(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_KeyPair, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_key__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  KeyPair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeyPairMap_key",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_key" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__HashMapConstIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairMap_key" "', argument " "2"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairMap_key" "', argument " "2"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator &""'"); 
  }
  arg2 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator * >(argp2);
  result = (KeyPair *) &((wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *)arg1)->key(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_KeyPair, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_key(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KeyPairMap_key__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__HashMapConstIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KeyPairMap_key__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KeyPairMap_key'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::key(wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator &)\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::key(wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_value__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TransSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeyPairMap_value",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_value" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairMap_value" "', argument " "2"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairMap_value" "', argument " "2"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator &""'"); 
  }
  arg2 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator * >(argp2);
  result = (TransSet *) &(arg1)->value(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TransSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_value__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TransSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeyPairMap_value",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_value" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__HashMapConstIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairMap_value" "', argument " "2"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairMap_value" "', argument " "2"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator &""'"); 
  }
  arg2 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator * >(argp2);
  result = (TransSet *) &((wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *)arg1)->value(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TransSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_value(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KeyPairMap_value__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__HashMapConstIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KeyPairMap_value__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KeyPairMap_value'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::value(wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator &)\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::value(wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_data__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TransSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeyPairMap_data",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_data" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairMap_data" "', argument " "2"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairMap_data" "', argument " "2"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator &""'"); 
  }
  arg2 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator * >(argp2);
  result = (TransSet *) &(arg1)->data(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TransSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_data__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TransSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeyPairMap_data",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_data" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__HashMapConstIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairMap_data" "', argument " "2"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairMap_data" "', argument " "2"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator &""'"); 
  }
  arg2 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator * >(argp2);
  result = (TransSet *) &((wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *)arg1)->data(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TransSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_data(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KeyPairMap_data__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__HashMapConstIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KeyPairMap_data__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KeyPairMap_data'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::data(wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator &)\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::data(wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_print_stats__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeyPairMap_print_stats",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_print_stats" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairMap_print_stats" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairMap_print_stats" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ((wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *)arg1)->print_stats(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_print_stats__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KeyPairMap_print_stats",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_print_stats" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  ((wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *)arg1)->print_stats();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_print_stats(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_KeyPairMap_print_stats__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KeyPairMap_print_stats__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KeyPairMap_print_stats'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::print_stats(std::ostream &) const\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::print_stats() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< wali::HashMapIterator< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > >,bool > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeyPairMap_insert",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_insert" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__pairT_KeyPair_TransSet_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairMap_insert" "', argument " "2"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairMap_insert" "', argument " "2"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::value_type * >(argp2);
  result = (arg1)->insert((wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::pair< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator,bool >(static_cast< const std::pair< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator,bool >& >(result))), SWIGTYPE_p_std__pairT_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t_bool_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__pairT_KeyPair_TransSet_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KeyPairMap_insert__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_KeyPair, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_TransSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_KeyPairMap_insert__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KeyPairMap_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::insert(KeyPair const &,TransSet const &)\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::insert(wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_find__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  KeyPair *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< wali::HashMapIterator< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeyPairMap_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_find" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_KeyPair,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairMap_find" "', argument " "2"" of type '" "KeyPair const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairMap_find" "', argument " "2"" of type '" "KeyPair const &""'"); 
  }
  arg2 = reinterpret_cast< KeyPair * >(argp2);
  result = (arg1)->find((KeyPair const &)*arg2);
  resultobj = SWIG_NewPointerObj((new wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator(static_cast< const wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator& >(result))), SWIGTYPE_p_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_find__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  KeyPair *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< wali::HashMapConstIterator< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeyPairMap_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_find" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_KeyPair,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairMap_find" "', argument " "2"" of type '" "KeyPair const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairMap_find" "', argument " "2"" of type '" "KeyPair const &""'"); 
  }
  arg2 = reinterpret_cast< KeyPair * >(argp2);
  result = ((wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *)arg1)->find((KeyPair const &)*arg2);
  resultobj = SWIG_NewPointerObj((new wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator(static_cast< const wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator& >(result))), SWIGTYPE_p_wali__HashMapConstIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_find(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_KeyPair, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KeyPairMap_find__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_KeyPair, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KeyPairMap_find__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KeyPairMap_find'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::find(KeyPair const &)\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::find(KeyPair const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *arg1 = (wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *) 0 ;
  SwigValueWrapper< wali::HashMapIterator< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeyPairMap_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeyPairMap_erase" "', argument " "1"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *""'"); 
  }
  arg1 = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeyPairMap_erase" "', argument " "2"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeyPairMap_erase" "', argument " "2"" of type '" "wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator""'");
    } else {
      wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator * temp = reinterpret_cast< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->erase(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeyPairMap_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_KeyPair, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KeyPairMap_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KeyPairMap_erase__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KeyPairMap_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::erase(KeyPair const &)\n"
    "    wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::erase(wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *KeyPairMap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PySemElem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  PySemElem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PySemElem",&obj0)) SWIG_fail;
  arg1 = obj0;
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (PySemElem *)new SwigDirector_PySemElem(arg1); 
  } else {
    SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
    SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PySemElem, SWIG_POINTER_NEW |  0 );
  result->count++;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_setuserdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElem_setuserdata",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_setuserdata" "', argument " "1"" of type '" "PySemElem *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  arg2 = obj1;
  (arg1)->setuserdata(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_getuserdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElem_getuserdata",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_getuserdata" "', argument " "1"" of type '" "PySemElem *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  result = (PyObject *)(arg1)->getuserdata();
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElem___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem___str__" "', argument " "1"" of type '" "PySemElem const *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = ((PySemElem const *)arg1)->PySemElem::__str__();
    } else {
      result = ((PySemElem const *)arg1)->__str__();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_pycombine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  PySemElem *arg2 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  wali::ref_ptr< PySemElem > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElem_pycombine",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_pycombine" "', argument " "1"" of type '" "PySemElem const *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElem_pycombine" "', argument " "2"" of type '" "PySemElem *""'"); 
  }
  arg2 = reinterpret_cast< PySemElem * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("PySemElem::pycombine");
    } else {
      result = ((PySemElem const *)arg1)->pycombine(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj((new wali::ref_ptr< PySemElem >(static_cast< const wali::ref_ptr< PySemElem >& >(result))), SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_combine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  SemElem *arg2 = (SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElem_combine",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_combine" "', argument " "1"" of type '" "PySemElem *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElem_combine" "', argument " "2"" of type '" "SemElem *""'"); 
  }
  arg2 = reinterpret_cast< SemElem * >(argp2);
  result = (arg1)->combine(arg2);
  resultobj = SWIG_NewPointerObj((new sem_elem_t(static_cast< const sem_elem_t& >(result))), SWIGTYPE_p_sem_elem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_pyextend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  PySemElem *arg2 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  wali::ref_ptr< PySemElem > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElem_pyextend",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_pyextend" "', argument " "1"" of type '" "PySemElem const *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElem_pyextend" "', argument " "2"" of type '" "PySemElem *""'"); 
  }
  arg2 = reinterpret_cast< PySemElem * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("PySemElem::pyextend");
    } else {
      result = ((PySemElem const *)arg1)->pyextend(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj((new wali::ref_ptr< PySemElem >(static_cast< const wali::ref_ptr< PySemElem >& >(result))), SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_extend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  SemElem *arg2 = (SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElem_extend",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_extend" "', argument " "1"" of type '" "PySemElem *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElem_extend" "', argument " "2"" of type '" "SemElem *""'"); 
  }
  arg2 = reinterpret_cast< SemElem * >(argp2);
  result = (arg1)->extend(arg2);
  resultobj = SWIG_NewPointerObj((new sem_elem_t(static_cast< const sem_elem_t& >(result))), SWIGTYPE_p_sem_elem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_pydelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  PySemElem *arg2 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElem_pydelta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_pydelta" "', argument " "1"" of type '" "PySemElem *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElem_pydelta" "', argument " "2"" of type '" "PySemElem *""'"); 
  }
  arg2 = reinterpret_cast< PySemElem * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("PySemElem::pydelta");
    } else {
      result = (arg1)->pydelta(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj((new std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > >(static_cast< const std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > >& >(result))), SWIGTYPE_p_std__pairT_wali__ref_ptrT_PySemElem_t_wali__ref_ptrT_PySemElem_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_delta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  SemElem *arg2 = (SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< sem_elem_t,sem_elem_t > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElem_delta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_delta" "', argument " "1"" of type '" "PySemElem *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElem_delta" "', argument " "2"" of type '" "SemElem *""'"); 
  }
  arg2 = reinterpret_cast< SemElem * >(argp2);
  result = (arg1)->delta(arg2);
  resultobj = SWIG_NewPointerObj((new std::pair< sem_elem_t,sem_elem_t >(static_cast< const std::pair< sem_elem_t,sem_elem_t >& >(result))), SWIGTYPE_p_std__pairT_sem_elem_t_sem_elem_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_pyequal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  PySemElem *arg2 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElem_pyequal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_pyequal" "', argument " "1"" of type '" "PySemElem const *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElem_pyequal" "', argument " "2"" of type '" "PySemElem *""'"); 
  }
  arg2 = reinterpret_cast< PySemElem * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("PySemElem::pyequal");
    } else {
      result = (bool)((PySemElem const *)arg1)->pyequal(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  SemElem *arg2 = (SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElem_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_equal" "', argument " "1"" of type '" "PySemElem const *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElem_equal" "', argument " "2"" of type '" "SemElem *""'"); 
  }
  arg2 = reinterpret_cast< SemElem * >(argp2);
  result = (bool)((PySemElem const *)arg1)->equal(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_pyunder_approximates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  PySemElem *arg2 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElem_pyunder_approximates",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_pyunder_approximates" "', argument " "1"" of type '" "PySemElem const *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElem_pyunder_approximates" "', argument " "2"" of type '" "PySemElem *""'"); 
  }
  arg2 = reinterpret_cast< PySemElem * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("PySemElem::pyunderApproximates");
    } else {
      result = (bool)((PySemElem const *)arg1)->pyunderApproximates(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_under_approximates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  SemElem *arg2 = (SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElem_under_approximates",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_under_approximates" "', argument " "1"" of type '" "PySemElem *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElem_under_approximates" "', argument " "2"" of type '" "SemElem *""'"); 
  }
  arg2 = reinterpret_cast< SemElem * >(argp2);
  result = (bool)(arg1)->underApproximates(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_pystar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  wali::ref_ptr< PySemElem > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElem_pystar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_pystar" "', argument " "1"" of type '" "PySemElem *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("PySemElem::pystar");
    } else {
      result = (arg1)->pystar();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj((new wali::ref_ptr< PySemElem >(static_cast< const wali::ref_ptr< PySemElem >& >(result))), SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_star(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElem_star",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_star" "', argument " "1"" of type '" "PySemElem *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  result = (arg1)->star();
  resultobj = SWIG_NewPointerObj((new sem_elem_t(static_cast< const sem_elem_t& >(result))), SWIGTYPE_p_sem_elem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_pyextend_and_diff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  PySemElem *arg2 = (PySemElem *) 0 ;
  PySemElem *arg3 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  wali::ref_ptr< PySemElem > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PySemElem_pyextend_and_diff",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_pyextend_and_diff" "', argument " "1"" of type '" "PySemElem *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElem_pyextend_and_diff" "', argument " "2"" of type '" "PySemElem *""'"); 
  }
  arg2 = reinterpret_cast< PySemElem * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PySemElem_pyextend_and_diff" "', argument " "3"" of type '" "PySemElem *""'"); 
  }
  arg3 = reinterpret_cast< PySemElem * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("PySemElem::pyextendAndDiff");
    } else {
      result = (arg1)->pyextendAndDiff(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj((new wali::ref_ptr< PySemElem >(static_cast< const wali::ref_ptr< PySemElem >& >(result))), SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_extend_and_diff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  sem_elem_t arg2 ;
  sem_elem_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PySemElem_extend_and_diff",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_extend_and_diff" "', argument " "1"" of type '" "PySemElem *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_sem_elem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElem_extend_and_diff" "', argument " "2"" of type '" "sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySemElem_extend_and_diff" "', argument " "2"" of type '" "sem_elem_t""'");
    } else {
      sem_elem_t * temp = reinterpret_cast< sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_sem_elem_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PySemElem_extend_and_diff" "', argument " "3"" of type '" "sem_elem_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySemElem_extend_and_diff" "', argument " "3"" of type '" "sem_elem_t""'");
    } else {
      sem_elem_t * temp = reinterpret_cast< sem_elem_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (arg1)->extendAndDiff(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new sem_elem_t(static_cast< const sem_elem_t& >(result))), SWIGTYPE_p_sem_elem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_pydiff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  PySemElem *arg2 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  wali::ref_ptr< PySemElem > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElem_pydiff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_pydiff" "', argument " "1"" of type '" "PySemElem *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElem_pydiff" "', argument " "2"" of type '" "PySemElem *""'"); 
  }
  arg2 = reinterpret_cast< PySemElem * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("PySemElem::pydiff");
    } else {
      result = (arg1)->pydiff(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj((new wali::ref_ptr< PySemElem >(static_cast< const wali::ref_ptr< PySemElem >& >(result))), SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_diff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  SemElem *arg2 = (SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElem_diff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_diff" "', argument " "1"" of type '" "PySemElem *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElem_diff" "', argument " "2"" of type '" "SemElem *""'"); 
  }
  arg2 = reinterpret_cast< SemElem * >(argp2);
  result = (arg1)->diff(arg2);
  resultobj = SWIG_NewPointerObj((new sem_elem_t(static_cast< const sem_elem_t& >(result))), SWIGTYPE_p_sem_elem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_pyone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  wali::ref_ptr< PySemElem > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElem_pyone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_pyone" "', argument " "1"" of type '" "PySemElem const *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("PySemElem::pyone");
    } else {
      result = ((PySemElem const *)arg1)->pyone();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj((new wali::ref_ptr< PySemElem >(static_cast< const wali::ref_ptr< PySemElem >& >(result))), SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_pyzero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  wali::ref_ptr< PySemElem > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElem_pyzero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_pyzero" "', argument " "1"" of type '" "PySemElem const *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("PySemElem::pyzero");
    } else {
      result = ((PySemElem const *)arg1)->pyzero();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj((new wali::ref_ptr< PySemElem >(static_cast< const wali::ref_ptr< PySemElem >& >(result))), SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_one(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElem_one",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_one" "', argument " "1"" of type '" "PySemElem const *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  result = ((PySemElem const *)arg1)->one();
  resultobj = SWIG_NewPointerObj((new sem_elem_t(static_cast< const sem_elem_t& >(result))), SWIGTYPE_p_sem_elem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElem_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElem_zero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElem_zero" "', argument " "1"" of type '" "PySemElem const *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  result = ((PySemElem const *)arg1)->zero();
  resultobj = SWIG_NewPointerObj((new sem_elem_t(static_cast< const sem_elem_t& >(result))), SWIGTYPE_p_sem_elem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PySemElem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PySemElem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PySemElem" "', argument " "1"" of type '" "PySemElem *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  arg1->count--;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_PySemElem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_PySemElem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_PySemElem" "', argument " "1"" of type '" "PySemElem *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PySemElem_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PySemElem, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SemElemPtrPair__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< sem_elem_t,sem_elem_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SemElemPtrPair")) SWIG_fail;
  result = (std::pair< sem_elem_t,sem_elem_t > *)new std::pair< sem_elem_t,sem_elem_t >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_sem_elem_t_sem_elem_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SemElemPtrPair__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  sem_elem_t arg1 ;
  sem_elem_t arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< sem_elem_t,sem_elem_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SemElemPtrPair",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_sem_elem_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SemElemPtrPair" "', argument " "1"" of type '" "sem_elem_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SemElemPtrPair" "', argument " "1"" of type '" "sem_elem_t""'");
    } else {
      sem_elem_t * temp = reinterpret_cast< sem_elem_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_sem_elem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SemElemPtrPair" "', argument " "2"" of type '" "sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SemElemPtrPair" "', argument " "2"" of type '" "sem_elem_t""'");
    } else {
      sem_elem_t * temp = reinterpret_cast< sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::pair< sem_elem_t,sem_elem_t > *)new std::pair< sem_elem_t,sem_elem_t >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_sem_elem_t_sem_elem_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SemElemPtrPair__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< sem_elem_t,sem_elem_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::pair< sem_elem_t,sem_elem_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SemElemPtrPair",&obj0)) SWIG_fail;
  {
    std::pair<sem_elem_t,sem_elem_t > *ptr = (std::pair<sem_elem_t,sem_elem_t > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SemElemPtrPair" "', argument " "1"" of type '" "std::pair< sem_elem_t,sem_elem_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SemElemPtrPair" "', argument " "1"" of type '" "std::pair< sem_elem_t,sem_elem_t > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< sem_elem_t,sem_elem_t > *)new std::pair< sem_elem_t,sem_elem_t >((std::pair< sem_elem_t,sem_elem_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_sem_elem_t_sem_elem_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SemElemPtrPair(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SemElemPtrPair__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair<sem_elem_t,sem_elem_t >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SemElemPtrPair__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_sem_elem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_sem_elem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SemElemPtrPair__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SemElemPtrPair'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< sem_elem_t,sem_elem_t >::pair()\n"
    "    std::pair< sem_elem_t,sem_elem_t >::pair(sem_elem_t,sem_elem_t)\n"
    "    std::pair< sem_elem_t,sem_elem_t >::pair(std::pair< sem_elem_t,sem_elem_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SemElemPtrPair_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< sem_elem_t,sem_elem_t > *arg1 = (std::pair< sem_elem_t,sem_elem_t > *) 0 ;
  sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtrPair_first_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_sem_elem_t_sem_elem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtrPair_first_set" "', argument " "1"" of type '" "std::pair< sem_elem_t,sem_elem_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< sem_elem_t,sem_elem_t > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_sem_elem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtrPair_first_set" "', argument " "2"" of type '" "sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemPtrPair_first_set" "', argument " "2"" of type '" "sem_elem_t""'");
    } else {
      sem_elem_t * temp = reinterpret_cast< sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->first = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtrPair_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< sem_elem_t,sem_elem_t > *arg1 = (std::pair< sem_elem_t,sem_elem_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElemPtrPair_first_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_sem_elem_t_sem_elem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtrPair_first_get" "', argument " "1"" of type '" "std::pair< sem_elem_t,sem_elem_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< sem_elem_t,sem_elem_t > * >(argp1);
  result =  ((arg1)->first);
  resultobj = SWIG_NewPointerObj((new sem_elem_t(static_cast< const sem_elem_t& >(result))), SWIGTYPE_p_sem_elem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtrPair_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< sem_elem_t,sem_elem_t > *arg1 = (std::pair< sem_elem_t,sem_elem_t > *) 0 ;
  sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SemElemPtrPair_second_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_sem_elem_t_sem_elem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtrPair_second_set" "', argument " "1"" of type '" "std::pair< sem_elem_t,sem_elem_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< sem_elem_t,sem_elem_t > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_sem_elem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SemElemPtrPair_second_set" "', argument " "2"" of type '" "sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SemElemPtrPair_second_set" "', argument " "2"" of type '" "sem_elem_t""'");
    } else {
      sem_elem_t * temp = reinterpret_cast< sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->second = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SemElemPtrPair_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< sem_elem_t,sem_elem_t > *arg1 = (std::pair< sem_elem_t,sem_elem_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SemElemPtrPair_second_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_sem_elem_t_sem_elem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SemElemPtrPair_second_get" "', argument " "1"" of type '" "std::pair< sem_elem_t,sem_elem_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< sem_elem_t,sem_elem_t > * >(argp1);
  result =  ((arg1)->second);
  resultobj = SWIG_NewPointerObj((new sem_elem_t(static_cast< const sem_elem_t& >(result))), SWIGTYPE_p_sem_elem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SemElemPtrPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< sem_elem_t,sem_elem_t > *arg1 = (std::pair< sem_elem_t,sem_elem_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SemElemPtrPair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_sem_elem_t_sem_elem_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SemElemPtrPair" "', argument " "1"" of type '" "std::pair< sem_elem_t,sem_elem_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< sem_elem_t,sem_elem_t > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SemElemPtrPair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_sem_elem_t_sem_elem_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PySemElemPtr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PySemElem *arg1 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::ref_ptr< PySemElem > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PySemElemPtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PySemElemPtr" "', argument " "1"" of type '" "PySemElem *""'"); 
  }
  arg1 = reinterpret_cast< PySemElem * >(argp1);
  result = (wali::ref_ptr< PySemElem > *)new wali::ref_ptr< PySemElem >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PySemElemPtr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PySemElemPtr")) SWIG_fail;
  result = (wali::ref_ptr< PySemElem > *)new wali::ref_ptr< PySemElem >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PySemElemPtr__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::ref_ptr< PySemElem > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PySemElemPtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wali__ref_ptrT_PySemElem_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PySemElemPtr" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PySemElemPtr" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const &""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (wali::ref_ptr< PySemElem > *)new wali::ref_ptr< PySemElem >((wali::ref_ptr< PySemElem > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PySemElemPtr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PySemElemPtr__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PySemElem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PySemElemPtr__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PySemElemPtr__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PySemElemPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::ref_ptr< PySemElem >::ref_ptr(PySemElem *)\n"
    "    wali::ref_ptr< PySemElem >::ref_ptr()\n"
    "    wali::ref_ptr< PySemElem >::ref_ptr(wali::ref_ptr< PySemElem > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PySemElemPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PySemElemPtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PySemElemPtr" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  wali::ref_ptr< PySemElem > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr___eq__" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_PySemElem_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr___eq__" "', argument " "2"" of type '" "wali::ref_ptr< PySemElem > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySemElemPtr___eq__" "', argument " "2"" of type '" "wali::ref_ptr< PySemElem > const &""'"); 
  }
  arg2 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp2);
  result = (bool)((wali::ref_ptr< PySemElem > const *)arg1)->operator ==((wali::ref_ptr< PySemElem > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  wali::ref_ptr< PySemElem > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr___ne__" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_PySemElem_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr___ne__" "', argument " "2"" of type '" "wali::ref_ptr< PySemElem > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySemElemPtr___ne__" "', argument " "2"" of type '" "wali::ref_ptr< PySemElem > const &""'"); 
  }
  arg2 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp2);
  result = (bool)((wali::ref_ptr< PySemElem > const *)arg1)->operator !=((wali::ref_ptr< PySemElem > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_get_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  PySemElem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtr_get_ptr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_get_ptr" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (PySemElem *)((wali::ref_ptr< PySemElem > const *)arg1)->get_ptr();
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PySemElem, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  PySemElem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr___deref__" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (PySemElem *)((wali::ref_ptr< PySemElem > const *)arg1)->operator ->();
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PySemElem, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  PySemElem *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtr___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr___ref__" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (PySemElem *) &((wali::ref_ptr< PySemElem > const *)arg1)->operator *();
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PySemElem, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  wali::ref_ptr< PySemElem > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr___lt__" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_PySemElem_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr___lt__" "', argument " "2"" of type '" "wali::ref_ptr< PySemElem > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySemElemPtr___lt__" "', argument " "2"" of type '" "wali::ref_ptr< PySemElem > const &""'"); 
  }
  arg2 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp2);
  result = (bool)((wali::ref_ptr< PySemElem > const *)arg1)->operator <((wali::ref_ptr< PySemElem > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_is_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtr_is_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_is_empty" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (bool)((wali::ref_ptr< PySemElem > const *)arg1)->is_empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_is_valid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtr_is_valid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_is_valid" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (bool)((wali::ref_ptr< PySemElem > const *)arg1)->is_valid();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_setuserdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr_setuserdata",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_setuserdata" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  arg2 = obj1;
  (*arg1)->setuserdata(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_getuserdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtr_getuserdata",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_getuserdata" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (PyObject *)(*arg1)->getuserdata();
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtr___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr___str__" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (*arg1)->__str__();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_pycombine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  PySemElem *arg2 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::ref_ptr< PySemElem > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr_pycombine",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_pycombine" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr_pycombine" "', argument " "2"" of type '" "PySemElem *""'"); 
  }
  arg2 = reinterpret_cast< PySemElem * >(argp2);
  result = (*arg1)->pycombine(arg2);
  resultobj = SWIG_NewPointerObj((new wali::ref_ptr< PySemElem >(static_cast< const wali::ref_ptr< PySemElem >& >(result))), SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_combine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  SemElem *arg2 = (SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr_combine",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_combine" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr_combine" "', argument " "2"" of type '" "SemElem *""'"); 
  }
  arg2 = reinterpret_cast< SemElem * >(argp2);
  result = (*arg1)->combine(arg2);
  resultobj = SWIG_NewPointerObj((new sem_elem_t(static_cast< const sem_elem_t& >(result))), SWIGTYPE_p_sem_elem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_pyextend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  PySemElem *arg2 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::ref_ptr< PySemElem > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr_pyextend",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_pyextend" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr_pyextend" "', argument " "2"" of type '" "PySemElem *""'"); 
  }
  arg2 = reinterpret_cast< PySemElem * >(argp2);
  result = (*arg1)->pyextend(arg2);
  resultobj = SWIG_NewPointerObj((new wali::ref_ptr< PySemElem >(static_cast< const wali::ref_ptr< PySemElem >& >(result))), SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_extend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  SemElem *arg2 = (SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr_extend",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_extend" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr_extend" "', argument " "2"" of type '" "SemElem *""'"); 
  }
  arg2 = reinterpret_cast< SemElem * >(argp2);
  result = (*arg1)->extend(arg2);
  resultobj = SWIG_NewPointerObj((new sem_elem_t(static_cast< const sem_elem_t& >(result))), SWIGTYPE_p_sem_elem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_pydelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  PySemElem *arg2 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr_pydelta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_pydelta" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr_pydelta" "', argument " "2"" of type '" "PySemElem *""'"); 
  }
  arg2 = reinterpret_cast< PySemElem * >(argp2);
  result = (*arg1)->pydelta(arg2);
  resultobj = SWIG_NewPointerObj((new std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > >(static_cast< const std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > >& >(result))), SWIGTYPE_p_std__pairT_wali__ref_ptrT_PySemElem_t_wali__ref_ptrT_PySemElem_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_delta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  SemElem *arg2 = (SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< sem_elem_t,sem_elem_t > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr_delta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_delta" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr_delta" "', argument " "2"" of type '" "SemElem *""'"); 
  }
  arg2 = reinterpret_cast< SemElem * >(argp2);
  result = (*arg1)->delta(arg2);
  resultobj = swig::from(static_cast< std::pair<sem_elem_t,sem_elem_t > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_pyequal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  PySemElem *arg2 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr_pyequal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_pyequal" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr_pyequal" "', argument " "2"" of type '" "PySemElem *""'"); 
  }
  arg2 = reinterpret_cast< PySemElem * >(argp2);
  result = (bool)(*arg1)->pyequal(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  SemElem *arg2 = (SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_equal" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr_equal" "', argument " "2"" of type '" "SemElem *""'"); 
  }
  arg2 = reinterpret_cast< SemElem * >(argp2);
  result = (bool)(*arg1)->equal(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_pyunder_approximates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  PySemElem *arg2 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr_pyunder_approximates",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_pyunder_approximates" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr_pyunder_approximates" "', argument " "2"" of type '" "PySemElem *""'"); 
  }
  arg2 = reinterpret_cast< PySemElem * >(argp2);
  result = (bool)(*arg1)->pyunderApproximates(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_under_approximates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  SemElem *arg2 = (SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr_under_approximates",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_under_approximates" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr_under_approximates" "', argument " "2"" of type '" "SemElem *""'"); 
  }
  arg2 = reinterpret_cast< SemElem * >(argp2);
  result = (bool)(*arg1)->underApproximates(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_pystar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::ref_ptr< PySemElem > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtr_pystar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_pystar" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (*arg1)->pystar();
  resultobj = SWIG_NewPointerObj((new wali::ref_ptr< PySemElem >(static_cast< const wali::ref_ptr< PySemElem >& >(result))), SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_star(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtr_star",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_star" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (*arg1)->star();
  resultobj = SWIG_NewPointerObj((new sem_elem_t(static_cast< const sem_elem_t& >(result))), SWIGTYPE_p_sem_elem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_pyextend_and_diff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  PySemElem *arg2 = (PySemElem *) 0 ;
  PySemElem *arg3 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  wali::ref_ptr< PySemElem > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PySemElemPtr_pyextend_and_diff",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_pyextend_and_diff" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr_pyextend_and_diff" "', argument " "2"" of type '" "PySemElem *""'"); 
  }
  arg2 = reinterpret_cast< PySemElem * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PySemElemPtr_pyextend_and_diff" "', argument " "3"" of type '" "PySemElem *""'"); 
  }
  arg3 = reinterpret_cast< PySemElem * >(argp3);
  result = (*arg1)->pyextendAndDiff(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new wali::ref_ptr< PySemElem >(static_cast< const wali::ref_ptr< PySemElem >& >(result))), SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_extend_and_diff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  sem_elem_t arg2 ;
  sem_elem_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PySemElemPtr_extend_and_diff",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_extend_and_diff" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_sem_elem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr_extend_and_diff" "', argument " "2"" of type '" "sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySemElemPtr_extend_and_diff" "', argument " "2"" of type '" "sem_elem_t""'");
    } else {
      sem_elem_t * temp = reinterpret_cast< sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_sem_elem_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PySemElemPtr_extend_and_diff" "', argument " "3"" of type '" "sem_elem_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySemElemPtr_extend_and_diff" "', argument " "3"" of type '" "sem_elem_t""'");
    } else {
      sem_elem_t * temp = reinterpret_cast< sem_elem_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (*arg1)->extendAndDiff(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new sem_elem_t(static_cast< const sem_elem_t& >(result))), SWIGTYPE_p_sem_elem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_pydiff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  PySemElem *arg2 = (PySemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::ref_ptr< PySemElem > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr_pydiff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_pydiff" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_PySemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr_pydiff" "', argument " "2"" of type '" "PySemElem *""'"); 
  }
  arg2 = reinterpret_cast< PySemElem * >(argp2);
  result = (*arg1)->pydiff(arg2);
  resultobj = SWIG_NewPointerObj((new wali::ref_ptr< PySemElem >(static_cast< const wali::ref_ptr< PySemElem >& >(result))), SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_diff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  SemElem *arg2 = (SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr_diff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_diff" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr_diff" "', argument " "2"" of type '" "SemElem *""'"); 
  }
  arg2 = reinterpret_cast< SemElem * >(argp2);
  result = (*arg1)->diff(arg2);
  resultobj = SWIG_NewPointerObj((new sem_elem_t(static_cast< const sem_elem_t& >(result))), SWIGTYPE_p_sem_elem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_pyone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::ref_ptr< PySemElem > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtr_pyone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_pyone" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (*arg1)->pyone();
  resultobj = SWIG_NewPointerObj((new wali::ref_ptr< PySemElem >(static_cast< const wali::ref_ptr< PySemElem >& >(result))), SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_pyzero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::ref_ptr< PySemElem > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtr_pyzero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_pyzero" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (*arg1)->pyzero();
  resultobj = SWIG_NewPointerObj((new wali::ref_ptr< PySemElem >(static_cast< const wali::ref_ptr< PySemElem >& >(result))), SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_one(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtr_one",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_one" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (*arg1)->one();
  resultobj = SWIG_NewPointerObj((new sem_elem_t(static_cast< const sem_elem_t& >(result))), SWIGTYPE_p_sem_elem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtr_zero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_zero" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (*arg1)->zero();
  resultobj = SWIG_NewPointerObj((new sem_elem_t(static_cast< const sem_elem_t& >(result))), SWIGTYPE_p_sem_elem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_xmltag_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtr_xmltag_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_xmltag_get" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (std::string *) & (wali::SemElem::XMLTag);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_marshall_weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr_marshall_weight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_marshall_weight" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr_marshall_weight" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySemElemPtr_marshall_weight" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (std::ostream *) &(*arg1)->marshallWeight(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_quasi_one(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtr_quasi_one",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_quasi_one" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (*arg1)->quasi_one();
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_container_less_than__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  wali::SemElem *arg2 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr_container_less_than",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_container_less_than" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr_container_less_than" "', argument " "2"" of type '" "wali::SemElem const *""'"); 
  }
  arg2 = reinterpret_cast< wali::SemElem * >(argp2);
  result = (bool)(*arg1)->containerLessThan((wali::SemElem const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_container_less_than__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr_container_less_than",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_container_less_than" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr_container_less_than" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySemElemPtr_container_less_than" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(*arg1)->containerLessThan(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_container_less_than(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__SemElem, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PySemElemPtr_container_less_than__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PySemElemPtr_container_less_than__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PySemElemPtr_container_less_than'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::SemElem::containerLessThan(wali::SemElem const *) const\n"
    "    wali::SemElem::containerLessThan(wali::sem_elem_t) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_hash(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtr_hash",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_hash" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (*arg1)->hash();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_print_typename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtr_print_typename",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_print_typename" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtr_print_typename" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySemElemPtr_print_typename" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (std::ostream *) &(*arg1)->print_typename(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_to_string_typename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtr_to_string_typename",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_to_string_typename" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (*arg1)->toStringTypename();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_to_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtr_to_string",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_to_string" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (*arg1)->to_string();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtr_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > *arg1 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtr_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtr_toString" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem > const *""'"); 
  }
  arg1 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
  result = (*arg1)->toString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PySemElemPtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PySemElemPtrPair__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PySemElemPtrPair")) SWIG_fail;
  result = (std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *)new std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_wali__ref_ptrT_PySemElem_t_wali__ref_ptrT_PySemElem_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PySemElemPtrPair__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::ref_ptr< PySemElem > arg1 ;
  wali::ref_ptr< PySemElem > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PySemElemPtrPair",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wali__ref_ptrT_PySemElem_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PySemElemPtrPair" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PySemElemPtrPair" "', argument " "1"" of type '" "wali::ref_ptr< PySemElem >""'");
    } else {
      wali::ref_ptr< PySemElem > * temp = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_PySemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PySemElemPtrPair" "', argument " "2"" of type '" "wali::ref_ptr< PySemElem >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PySemElemPtrPair" "', argument " "2"" of type '" "wali::ref_ptr< PySemElem >""'");
    } else {
      wali::ref_ptr< PySemElem > * temp = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *)new std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_wali__ref_ptrT_PySemElem_t_wali__ref_ptrT_PySemElem_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PySemElemPtrPair__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PySemElemPtrPair",&obj0)) SWIG_fail;
  {
    std::pair<wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *ptr = (std::pair<wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PySemElemPtrPair" "', argument " "1"" of type '" "std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PySemElemPtrPair" "', argument " "1"" of type '" "std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *)new std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > >((std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_wali__ref_ptrT_PySemElem_t_wali__ref_ptrT_PySemElem_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PySemElemPtrPair(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PySemElemPtrPair__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair<wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PySemElemPtrPair__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PySemElemPtrPair__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PySemElemPtrPair'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > >::pair()\n"
    "    std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > >::pair(wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem >)\n"
    "    std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > >::pair(std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PySemElemPtrPair_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *arg1 = (std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *) 0 ;
  wali::ref_ptr< PySemElem > *arg2 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtrPair_first_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_wali__ref_ptrT_PySemElem_t_wali__ref_ptrT_PySemElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtrPair_first_set" "', argument " "1"" of type '" "std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtrPair_first_set" "', argument " "2"" of type '" "wali::ref_ptr< PySemElem > *""'"); 
  }
  arg2 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp2);
  if (arg1) (arg1)->first = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtrPair_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *arg1 = (std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::ref_ptr< PySemElem > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtrPair_first_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_wali__ref_ptrT_PySemElem_t_wali__ref_ptrT_PySemElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtrPair_first_get" "', argument " "1"" of type '" "std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > * >(argp1);
  result = (wali::ref_ptr< PySemElem > *)& ((arg1)->first);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtrPair_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *arg1 = (std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *) 0 ;
  wali::ref_ptr< PySemElem > *arg2 = (wali::ref_ptr< PySemElem > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySemElemPtrPair_second_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_wali__ref_ptrT_PySemElem_t_wali__ref_ptrT_PySemElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtrPair_second_set" "', argument " "1"" of type '" "std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySemElemPtrPair_second_set" "', argument " "2"" of type '" "wali::ref_ptr< PySemElem > *""'"); 
  }
  arg2 = reinterpret_cast< wali::ref_ptr< PySemElem > * >(argp2);
  if (arg1) (arg1)->second = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySemElemPtrPair_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *arg1 = (std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::ref_ptr< PySemElem > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySemElemPtrPair_second_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_wali__ref_ptrT_PySemElem_t_wali__ref_ptrT_PySemElem_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySemElemPtrPair_second_get" "', argument " "1"" of type '" "std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > * >(argp1);
  result = (wali::ref_ptr< PySemElem > *)& ((arg1)->second);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__ref_ptrT_PySemElem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PySemElemPtrPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *arg1 = (std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PySemElemPtrPair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_wali__ref_ptrT_PySemElem_t_wali__ref_ptrT_PySemElem_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PySemElemPtrPair" "', argument " "1"" of type '" "std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PySemElemPtrPair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_wali__ref_ptrT_PySemElem_t_wali__ref_ptrT_PySemElem_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Trans_num_trans_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""wali::wfa::Trans::numTrans""' of type '""int""'");
    }
    wali::wfa::Trans::numTrans = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Trans_num_trans_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(wali::wfa::Trans::numTrans));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Trans_num_trans_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Trans_num_trans_get();
}


SWIGINTERN PyObject *_wrap_Trans_num_trans_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Trans_num_trans_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_new_Trans__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Trans")) SWIG_fail;
  result = (wali::wfa::Trans *)new wali::wfa::Trans();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__Trans, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Trans__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::Key arg1 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::sem_elem_t arg4 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  wali::wfa::Trans *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Trans",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Trans" "', argument " "1"" of type '" "wali::Key""'");
  } 
  arg1 = static_cast< wali::Key >(val1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Trans" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Trans" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Trans" "', argument " "4"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Trans" "', argument " "4"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = (wali::wfa::Trans *)new wali::wfa::Trans(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__Trans, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Trans__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wfa::Trans *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Trans",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wali__wfa__Trans,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Trans" "', argument " "1"" of type '" "wali::wfa::Trans const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Trans" "', argument " "1"" of type '" "wali::wfa::Trans const &""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = (wali::wfa::Trans *)new wali::wfa::Trans((wali::wfa::Trans const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__Trans, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Trans__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ITrans *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wfa::Trans *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Trans",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ITrans,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Trans" "', argument " "1"" of type '" "ITrans const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Trans" "', argument " "1"" of type '" "ITrans const &""'"); 
  }
  arg1 = reinterpret_cast< ITrans * >(argp1);
  result = (wali::wfa::Trans *)new wali::wfa::Trans((ITrans const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__Trans, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Trans(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Trans__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wali__wfa__Trans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Trans__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ITrans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Trans__SWIG_3(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_Trans__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Trans'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::Trans::Trans()\n"
    "    wali::wfa::Trans::Trans(wali::Key,wali::Key,wali::Key,wali::sem_elem_t)\n"
    "    wali::wfa::Trans::Trans(wali::wfa::Trans const &)\n"
    "    wali::wfa::Trans::Trans(ITrans const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Trans(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Trans",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Trans" "', argument " "1"" of type '" "wali::wfa::Trans *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_copy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wfa::Trans *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Trans_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_copy" "', argument " "1"" of type '" "wali::wfa::Trans const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = (wali::wfa::Trans *)((wali::wfa::Trans const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_copy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  wali::wfa::Trans *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Trans_copy",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_copy" "', argument " "1"" of type '" "wali::wfa::Trans const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Trans_copy" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Trans_copy" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Trans_copy" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  result = (wali::wfa::Trans *)((wali::wfa::Trans const *)arg1)->copy(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_copy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__Trans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Trans_copy__SWIG_0(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__Trans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Trans_copy__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Trans_copy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::Trans::copy() const\n"
    "    wali::wfa::Trans::copy(wali::Key,wali::Key,wali::Key) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Trans_fromState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Trans_fromState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_fromState" "', argument " "1"" of type '" "wali::wfa::Trans const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = ((wali::wfa::Trans const *)arg1)->from();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_from_state__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Trans_from_state",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_from_state" "', argument " "1"" of type '" "wali::wfa::Trans const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = ((wali::wfa::Trans const *)arg1)->from_state();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_stack__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Trans_stack",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_stack" "', argument " "1"" of type '" "wali::wfa::Trans const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = ((wali::wfa::Trans const *)arg1)->stack();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_toState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Trans_toState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_toState" "', argument " "1"" of type '" "wali::wfa::Trans const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = ((wali::wfa::Trans const *)arg1)->to();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_to_state__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Trans_to_state",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_to_state" "', argument " "1"" of type '" "wali::wfa::Trans const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = ((wali::wfa::Trans const *)arg1)->to_state();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_weight__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Trans_weight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_weight" "', argument " "1"" of type '" "wali::wfa::Trans const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = ((wali::wfa::Trans const *)arg1)->weight();
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_get_delta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Trans_get_delta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_get_delta" "', argument " "1"" of type '" "wali::wfa::Trans const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = ((wali::wfa::Trans const *)arg1)->getDelta();
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_worklist_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< wali::ref_ptr< WorklistData > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Trans_worklist_data",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_worklist_data" "', argument " "1"" of type '" "wali::wfa::Trans const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = ((wali::wfa::Trans const *)arg1)->worklistData();
  resultobj = SWIG_NewPointerObj((new wali::ref_ptr< WorklistData >(static_cast< const wali::ref_ptr< WorklistData >& >(result))), SWIGTYPE_p_wali__ref_ptrT_WorklistData_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_fromState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Trans_fromState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_fromState" "', argument " "1"" of type '" "wali::wfa::Trans *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = (arg1)->from();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_fromState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__Trans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Trans_fromState__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__Trans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Trans_fromState__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Trans_fromState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::Trans::from() const\n"
    "    wali::wfa::Trans::from()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Trans_from_state__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Trans_from_state",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_from_state" "', argument " "1"" of type '" "wali::wfa::Trans *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = (arg1)->from_state();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_from_state(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__Trans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Trans_from_state__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__Trans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Trans_from_state__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Trans_from_state'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::Trans::from_state() const\n"
    "    wali::wfa::Trans::from_state()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Trans_stack__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Trans_stack",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_stack" "', argument " "1"" of type '" "wali::wfa::Trans *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = (arg1)->stack();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_stack(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__Trans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Trans_stack__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__Trans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Trans_stack__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Trans_stack'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::Trans::stack() const\n"
    "    wali::wfa::Trans::stack()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Trans_toState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Trans_toState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_toState" "', argument " "1"" of type '" "wali::wfa::Trans *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = (arg1)->to();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_toState(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__Trans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Trans_toState__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__Trans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Trans_toState__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Trans_toState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::Trans::to() const\n"
    "    wali::wfa::Trans::to()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Trans_to_state__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Trans_to_state",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_to_state" "', argument " "1"" of type '" "wali::wfa::Trans *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = (arg1)->to_state();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_to_state(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__Trans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Trans_to_state__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__Trans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Trans_to_state__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Trans_to_state'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::Trans::to_state() const\n"
    "    wali::wfa::Trans::to_state()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Trans_weight__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Trans_weight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_weight" "', argument " "1"" of type '" "wali::wfa::Trans *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = (arg1)->weight();
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_weight(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__Trans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Trans_weight__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__Trans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Trans_weight__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Trans_weight'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::Trans::weight() const\n"
    "    wali::wfa::Trans::weight()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Trans_get_delta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Trans_get_delta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_get_delta" "', argument " "1"" of type '" "wali::wfa::Trans *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = (arg1)->getDelta();
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_get_delta(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__Trans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Trans_get_delta__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__Trans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Trans_get_delta__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Trans_get_delta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::Trans::getDelta() const\n"
    "    wali::wfa::Trans::getDelta()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Trans_set_weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Trans_set_weight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_set_weight" "', argument " "1"" of type '" "wali::wfa::Trans *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Trans_set_weight" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Trans_set_weight" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->setWeight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_set_delta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Trans_set_delta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_set_delta" "', argument " "1"" of type '" "wali::wfa::Trans *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Trans_set_delta" "', argument " "2"" of type '" "wali::sem_elem_t const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Trans_set_delta" "', argument " "2"" of type '" "wali::sem_elem_t const""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->setDelta(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_set_worklist_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  SwigValueWrapper< wali::ref_ptr< WorklistData > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Trans_set_worklist_data",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_set_worklist_data" "', argument " "1"" of type '" "wali::wfa::Trans *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_WorklistData_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Trans_set_worklist_data" "', argument " "2"" of type '" "wali::ref_ptr< WorklistData >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Trans_set_worklist_data" "', argument " "2"" of type '" "wali::ref_ptr< WorklistData >""'");
    } else {
      wali::ref_ptr< WorklistData > * temp = reinterpret_cast< wali::ref_ptr< WorklistData > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->setWorklistData(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_combine_trans(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  ITrans *arg2 = (ITrans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Trans_combine_trans",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_combine_trans" "', argument " "1"" of type '" "wali::wfa::Trans *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ITrans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Trans_combine_trans" "', argument " "2"" of type '" "ITrans *""'"); 
  }
  arg2 = reinterpret_cast< ITrans * >(argp2);
  (arg1)->combineTrans(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_keypair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  KeyPair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Trans_keypair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_keypair" "', argument " "1"" of type '" "wali::wfa::Trans const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = (KeyPair *) &((wali::wfa::Trans const *)arg1)->keypair();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_KeyPair, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_modified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Trans_modified",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_modified" "', argument " "1"" of type '" "wali::wfa::Trans const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = (bool)((wali::wfa::Trans const *)arg1)->modified();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_get_config(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wpds::Config *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Trans_get_config",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_get_config" "', argument " "1"" of type '" "wali::wfa::Trans const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  result = (wali::wpds::Config *)((wali::wfa::Trans const *)arg1)->getConfig();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wpds__Config, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_set_config(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  wali::wpds::Config *arg2 = (wali::wpds::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Trans_set_config",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_set_config" "', argument " "1"" of type '" "wali::wfa::Trans *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__wpds__Config, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Trans_set_config" "', argument " "2"" of type '" "wali::wpds::Config *""'"); 
  }
  arg2 = reinterpret_cast< wali::wpds::Config * >(argp2);
  (arg1)->setConfig(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_poststar_eps_closure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Trans_poststar_eps_closure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_poststar_eps_closure" "', argument " "1"" of type '" "wali::wfa::Trans *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Trans_poststar_eps_closure" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Trans_poststar_eps_closure" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->poststar_eps_closure(arg2);
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_apply_post(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  TaggedWeight arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TaggedWeight result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Trans_apply_post",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_apply_post" "', argument " "1"" of type '" "wali::wfa::Trans const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_TaggedWeight,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Trans_apply_post" "', argument " "2"" of type '" "TaggedWeight""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Trans_apply_post" "', argument " "2"" of type '" "TaggedWeight""'");
    } else {
      TaggedWeight * temp = reinterpret_cast< TaggedWeight * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = ((wali::wfa::Trans const *)arg1)->apply_post(arg2);
  resultobj = SWIG_NewPointerObj((new TaggedWeight(static_cast< const TaggedWeight& >(result))), SWIGTYPE_p_TaggedWeight, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_apply_pre(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  TaggedWeight arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TaggedWeight result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Trans_apply_pre",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_apply_pre" "', argument " "1"" of type '" "wali::wfa::Trans const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_TaggedWeight,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Trans_apply_pre" "', argument " "2"" of type '" "TaggedWeight""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Trans_apply_pre" "', argument " "2"" of type '" "TaggedWeight""'");
    } else {
      TaggedWeight * temp = reinterpret_cast< TaggedWeight * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = ((wali::wfa::Trans const *)arg1)->apply_pre(arg2);
  resultobj = SWIG_NewPointerObj((new TaggedWeight(static_cast< const TaggedWeight& >(result))), SWIGTYPE_p_TaggedWeight, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Trans_apply_weight_changer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::Trans *arg1 = (wali::wfa::Trans *) 0 ;
  util::WeightChanger *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Trans_apply_weight_changer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trans_apply_weight_changer" "', argument " "1"" of type '" "wali::wfa::Trans *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::Trans * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_util__WeightChanger,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Trans_apply_weight_changer" "', argument " "2"" of type '" "util::WeightChanger &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Trans_apply_weight_changer" "', argument " "2"" of type '" "util::WeightChanger &""'"); 
  }
  arg2 = reinterpret_cast< util::WeightChanger * >(argp2);
  (arg1)->applyWeightChanger(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Trans_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wali__wfa__Trans, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TransSetImpl__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ITransLT *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< ITrans *,ITransLT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TransSetImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ITransLT,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransSetImpl" "', argument " "1"" of type '" "ITransLT const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransSetImpl" "', argument " "1"" of type '" "ITransLT const &""'"); 
  }
  arg1 = reinterpret_cast< ITransLT * >(argp1);
  result = (std::set< ITrans *,ITransLT > *)new std::set< ITrans *,ITransLT >((ITransLT const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSetImpl_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< ITrans *,ITransLT > *arg1 = (std::set< ITrans *,ITransLT > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:TransSetImpl_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSetImpl_iterator" "', argument " "1"" of type '" "std::set< ITrans *,ITransLT > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< ITrans *,ITransLT > * >(argp1);
  result = (swig::SwigPyIterator *)std_set_Sl_ITrans_Sm__Sc_ITransLT_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSetImpl___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< ITrans *,ITransLT > *arg1 = (std::set< ITrans *,ITransLT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransSetImpl___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSetImpl___nonzero__" "', argument " "1"" of type '" "std::set< ITrans *,ITransLT > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< ITrans *,ITransLT > * >(argp1);
  result = (bool)std_set_Sl_ITrans_Sm__Sc_ITransLT_Sg____nonzero__((std::set< ITrans *,ITransLT > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSetImpl___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< ITrans *,ITransLT > *arg1 = (std::set< ITrans *,ITransLT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransSetImpl___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSetImpl___bool__" "', argument " "1"" of type '" "std::set< ITrans *,ITransLT > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< ITrans *,ITransLT > * >(argp1);
  result = (bool)std_set_Sl_ITrans_Sm__Sc_ITransLT_Sg____bool__((std::set< ITrans *,ITransLT > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSetImpl___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< ITrans *,ITransLT > *arg1 = (std::set< ITrans *,ITransLT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< ITrans *,ITransLT >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransSetImpl___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSetImpl___len__" "', argument " "1"" of type '" "std::set< ITrans *,ITransLT > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< ITrans *,ITransLT > * >(argp1);
  result = std_set_Sl_ITrans_Sm__Sc_ITransLT_Sg____len__((std::set< ITrans *,ITransLT > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSetImpl_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< ITrans *,ITransLT > *arg1 = (std::set< ITrans *,ITransLT > *) 0 ;
  std::set< ITrans *,ITransLT >::value_type arg2 = (std::set< ITrans *,ITransLT >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransSetImpl_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSetImpl_append" "', argument " "1"" of type '" "std::set< ITrans *,ITransLT > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< ITrans *,ITransLT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ITrans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransSetImpl_append" "', argument " "2"" of type '" "std::set< ITrans *,ITransLT >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::set< ITrans *,ITransLT >::value_type >(argp2);
  std_set_Sl_ITrans_Sm__Sc_ITransLT_Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSetImpl___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< ITrans *,ITransLT > *arg1 = (std::set< ITrans *,ITransLT > *) 0 ;
  std::set< ITrans *,ITransLT >::value_type arg2 = (std::set< ITrans *,ITransLT >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransSetImpl___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSetImpl___contains__" "', argument " "1"" of type '" "std::set< ITrans *,ITransLT > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< ITrans *,ITransLT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ITrans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransSetImpl___contains__" "', argument " "2"" of type '" "std::set< ITrans *,ITransLT >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::set< ITrans *,ITransLT >::value_type >(argp2);
  result = (bool)std_set_Sl_ITrans_Sm__Sc_ITransLT_Sg____contains__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSetImpl___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< ITrans *,ITransLT > *arg1 = (std::set< ITrans *,ITransLT > *) 0 ;
  std::set< ITrans *,ITransLT >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< ITrans *,ITransLT >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransSetImpl___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSetImpl___getitem__" "', argument " "1"" of type '" "std::set< ITrans *,ITransLT > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< ITrans *,ITransLT > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransSetImpl___getitem__" "', argument " "2"" of type '" "std::set< ITrans *,ITransLT >::difference_type""'");
  } 
  arg2 = static_cast< std::set< ITrans *,ITransLT >::difference_type >(val2);
  try {
    result = (std::set< ITrans *,ITransLT >::value_type)std_set_Sl_ITrans_Sm__Sc_ITransLT_Sg____getitem__((std::set< ITrans *,ITransLT > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ITrans, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSetImpl_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< ITrans *,ITransLT > *arg1 = (std::set< ITrans *,ITransLT > *) 0 ;
  std::set< ITrans *,ITransLT >::value_type arg2 = (std::set< ITrans *,ITransLT >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransSetImpl_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSetImpl_add" "', argument " "1"" of type '" "std::set< ITrans *,ITransLT > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< ITrans *,ITransLT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ITrans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransSetImpl_add" "', argument " "2"" of type '" "std::set< ITrans *,ITransLT >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::set< ITrans *,ITransLT >::value_type >(argp2);
  std_set_Sl_ITrans_Sm__Sc_ITransLT_Sg__add(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSetImpl_discard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< ITrans *,ITransLT > *arg1 = (std::set< ITrans *,ITransLT > *) 0 ;
  std::set< ITrans *,ITransLT >::value_type arg2 = (std::set< ITrans *,ITransLT >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransSetImpl_discard",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSetImpl_discard" "', argument " "1"" of type '" "std::set< ITrans *,ITransLT > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< ITrans *,ITransLT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ITrans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransSetImpl_discard" "', argument " "2"" of type '" "std::set< ITrans *,ITransLT >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::set< ITrans *,ITransLT >::value_type >(argp2);
  std_set_Sl_ITrans_Sm__Sc_ITransLT_Sg__discard(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TransSetImpl__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< ITrans *,ITransLT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TransSetImpl")) SWIG_fail;
  result = (std::set< ITrans *,ITransLT > *)new std::set< ITrans *,ITransLT >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TransSetImpl__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< ITrans *,ITransLT > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::set< ITrans *,ITransLT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TransSetImpl",&obj0)) SWIG_fail;
  {
    std::set<ITrans *,ITransLT,std::allocator< ITrans * > > *ptr = (std::set<ITrans *,ITransLT,std::allocator< ITrans * > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransSetImpl" "', argument " "1"" of type '" "std::set< ITrans *,ITransLT > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransSetImpl" "', argument " "1"" of type '" "std::set< ITrans *,ITransLT > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::set< ITrans *,ITransLT > *)new std::set< ITrans *,ITransLT >((std::set< ITrans *,ITransLT > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TransSetImpl(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TransSetImpl__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ITransLT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TransSetImpl__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<ITrans *,ITransLT,std::allocator< ITrans * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TransSetImpl__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TransSetImpl'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< ITrans *,ITransLT >::set(ITransLT const &)\n"
    "    std::set< ITrans *,ITransLT >::set()\n"
    "    std::set< ITrans *,ITransLT >::set(std::set< ITrans *,ITransLT > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TransSetImpl_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< ITrans *,ITransLT > *arg1 = (std::set< ITrans *,ITransLT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransSetImpl_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSetImpl_empty" "', argument " "1"" of type '" "std::set< ITrans *,ITransLT > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< ITrans *,ITransLT > * >(argp1);
  result = (bool)((std::set< ITrans *,ITransLT > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSetImpl_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< ITrans *,ITransLT > *arg1 = (std::set< ITrans *,ITransLT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< ITrans *,ITransLT >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransSetImpl_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSetImpl_size" "', argument " "1"" of type '" "std::set< ITrans *,ITransLT > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< ITrans *,ITransLT > * >(argp1);
  result = ((std::set< ITrans *,ITransLT > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSetImpl_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< ITrans *,ITransLT > *arg1 = (std::set< ITrans *,ITransLT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransSetImpl_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSetImpl_clear" "', argument " "1"" of type '" "std::set< ITrans *,ITransLT > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< ITrans *,ITransLT > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSetImpl_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< ITrans *,ITransLT > *arg1 = (std::set< ITrans *,ITransLT > *) 0 ;
  std::set< ITrans *,ITransLT > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransSetImpl_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSetImpl_swap" "', argument " "1"" of type '" "std::set< ITrans *,ITransLT > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< ITrans *,ITransLT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransSetImpl_swap" "', argument " "2"" of type '" "std::set< ITrans *,ITransLT > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransSetImpl_swap" "', argument " "2"" of type '" "std::set< ITrans *,ITransLT > &""'"); 
  }
  arg2 = reinterpret_cast< std::set< ITrans *,ITransLT > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSetImpl_erase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< ITrans *,ITransLT > *arg1 = (std::set< ITrans *,ITransLT > *) 0 ;
  std::set< ITrans *,ITransLT >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::set< ITrans *,ITransLT >::key_type temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< ITrans *,ITransLT >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransSetImpl_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSetImpl_erase" "', argument " "1"" of type '" "std::set< ITrans *,ITransLT > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< ITrans *,ITransLT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ITrans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransSetImpl_erase" "', argument " "2"" of type '" "std::set< ITrans *,ITransLT >::key_type""'"); 
  }
  temp2 = reinterpret_cast< std::set< ITrans *,ITransLT >::key_type >(argp2);
  arg2 = reinterpret_cast< std::set< ITrans *,ITransLT >::key_type * >(&temp2);
  result = (arg1)->erase((std::set< ITrans *,ITransLT >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSetImpl_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< ITrans *,ITransLT > *arg1 = (std::set< ITrans *,ITransLT > *) 0 ;
  std::set< ITrans *,ITransLT >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::set< ITrans *,ITransLT >::key_type temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< ITrans *,ITransLT >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransSetImpl_count",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSetImpl_count" "', argument " "1"" of type '" "std::set< ITrans *,ITransLT > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< ITrans *,ITransLT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ITrans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransSetImpl_count" "', argument " "2"" of type '" "std::set< ITrans *,ITransLT >::key_type""'"); 
  }
  temp2 = reinterpret_cast< std::set< ITrans *,ITransLT >::key_type >(argp2);
  arg2 = reinterpret_cast< std::set< ITrans *,ITransLT >::key_type * >(&temp2);
  result = ((std::set< ITrans *,ITransLT > const *)arg1)->count((std::set< ITrans *,ITransLT >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TransSetImpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< ITrans *,ITransLT > *arg1 = (std::set< ITrans *,ITransLT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TransSetImpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TransSetImpl" "', argument " "1"" of type '" "std::set< ITrans *,ITransLT > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< ITrans *,ITransLT > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TransSetImpl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TransSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TransSet")) SWIG_fail;
  result = (wali::wfa::TransSet *)new wali::wfa::TransSet();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__TransSet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TransSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TransSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TransSet" "', argument " "1"" of type '" "wali::wfa::TransSet *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  ITrans *arg2 = (ITrans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ITrans *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransSet_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_erase" "', argument " "1"" of type '" "wali::wfa::TransSet *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ITrans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransSet_erase" "', argument " "2"" of type '" "ITrans *""'"); 
  }
  arg2 = reinterpret_cast< ITrans * >(argp2);
  result = (ITrans *)(arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ITrans, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ITrans *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TransSet_erase",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_erase" "', argument " "1"" of type '" "wali::wfa::TransSet *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransSet_erase" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TransSet_erase" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TransSet_erase" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  result = (ITrans *)(arg1)->erase(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ITrans, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_find__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< std::set< ITrans *,ITransLT,std::allocator< wali::wfa::ITrans * > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TransSet_find",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_find" "', argument " "1"" of type '" "wali::wfa::TransSet *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransSet_find" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TransSet_find" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TransSet_find" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  result = (arg1)->find(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new wali::wfa::TransSet::iterator(static_cast< const wali::wfa::TransSet::iterator& >(result))), SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_find__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  ITrans *arg2 = (ITrans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::set< ITrans *,ITransLT,std::allocator< wali::wfa::ITrans * > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransSet_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_find" "', argument " "1"" of type '" "wali::wfa::TransSet *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ITrans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransSet_find" "', argument " "2"" of type '" "ITrans *""'"); 
  }
  arg2 = reinterpret_cast< ITrans * >(argp2);
  result = (arg1)->find(arg2);
  resultobj = SWIG_NewPointerObj((new wali::wfa::TransSet::iterator(static_cast< const wali::wfa::TransSet::iterator& >(result))), SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_find__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< std::set< ITrans *,ITransLT,std::allocator< wali::wfa::ITrans * > >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TransSet_find",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_find" "', argument " "1"" of type '" "wali::wfa::TransSet const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransSet_find" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TransSet_find" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TransSet_find" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  result = ((wali::wfa::TransSet const *)arg1)->find(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new wali::wfa::TransSet::const_iterator(static_cast< const wali::wfa::TransSet::const_iterator& >(result))), SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_find__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  ITrans *arg2 = (ITrans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::set< ITrans *,ITransLT,std::allocator< wali::wfa::ITrans * > >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransSet_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_find" "', argument " "1"" of type '" "wali::wfa::TransSet const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ITrans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransSet_find" "', argument " "2"" of type '" "ITrans *""'"); 
  }
  arg2 = reinterpret_cast< ITrans * >(argp2);
  result = ((wali::wfa::TransSet const *)arg1)->find(arg2);
  resultobj = SWIG_NewPointerObj((new wali::wfa::TransSet::const_iterator(static_cast< const wali::wfa::TransSet::const_iterator& >(result))), SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_find(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__TransSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ITrans, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransSet_find__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__TransSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ITrans, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransSet_find__SWIG_3(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__TransSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TransSet_find__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__TransSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TransSet_find__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TransSet_find'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::TransSet::find(wali::Key,wali::Key,wali::Key)\n"
    "    wali::wfa::TransSet::find(ITrans *)\n"
    "    wali::wfa::TransSet::find(wali::Key,wali::Key,wali::Key) const\n"
    "    wali::wfa::TransSet::find(ITrans *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TransSet_each__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  wali::wfa::TransFunctor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransSet_each",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_each" "', argument " "1"" of type '" "wali::wfa::TransSet *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__TransFunctor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransSet_each" "', argument " "2"" of type '" "wali::wfa::TransFunctor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransSet_each" "', argument " "2"" of type '" "wali::wfa::TransFunctor &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::TransFunctor * >(argp2);
  (arg1)->each(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_each__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  wali::wfa::ConstTransFunctor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransSet_each",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_each" "', argument " "1"" of type '" "wali::wfa::TransSet const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__ConstTransFunctor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransSet_each" "', argument " "2"" of type '" "wali::wfa::ConstTransFunctor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransSet_each" "', argument " "2"" of type '" "wali::wfa::ConstTransFunctor &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::ConstTransFunctor * >(argp2);
  ((wali::wfa::TransSet const *)arg1)->each(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_each__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  boost::function< void (ITrans *) > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransSet_each",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_each" "', argument " "1"" of type '" "wali::wfa::TransSet *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__functionT_void_fITrans_pF_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransSet_each" "', argument " "2"" of type '" "boost::function< void (ITrans *) > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransSet_each" "', argument " "2"" of type '" "boost::function< void (ITrans *) > &""'"); 
  }
  arg2 = reinterpret_cast< boost::function< void (ITrans *) > * >(argp2);
  (arg1)->each(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_each__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  boost::function< void (ITrans const *) > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransSet_each",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_each" "', argument " "1"" of type '" "wali::wfa::TransSet const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__functionT_void_fITrans_const_pF_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransSet_each" "', argument " "2"" of type '" "boost::function< void (ITrans const *) > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransSet_each" "', argument " "2"" of type '" "boost::function< void (ITrans const *) > &""'"); 
  }
  arg2 = reinterpret_cast< boost::function< void (ITrans const *) > * >(argp2);
  ((wali::wfa::TransSet const *)arg1)->each(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_each(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__TransSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__wfa__TransFunctor, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransSet_each__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__TransSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__wfa__ConstTransFunctor, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransSet_each__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__TransSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_boost__functionT_void_fITrans_pF_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransSet_each__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__TransSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_boost__functionT_void_fITrans_const_pF_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransSet_each__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TransSet_each'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::TransSet::each(wali::wfa::TransFunctor &)\n"
    "    wali::wfa::TransSet::each(wali::wfa::ConstTransFunctor &) const\n"
    "    wali::wfa::TransSet::each(boost::function< void (ITrans *) > &)\n"
    "    wali::wfa::TransSet::each(boost::function< void (ITrans const *) > &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TransSet_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  ITrans *arg2 = (ITrans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransSet_insert",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_insert" "', argument " "1"" of type '" "wali::wfa::TransSet *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ITrans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransSet_insert" "', argument " "2"" of type '" "ITrans *""'"); 
  }
  arg2 = reinterpret_cast< ITrans * >(argp2);
  result = (bool)(arg1)->insert(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  SwigValueWrapper< std::set< ITrans *,ITransLT,std::allocator< wali::wfa::ITrans * > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransSet_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_erase" "', argument " "1"" of type '" "wali::wfa::TransSet *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransSet_erase" "', argument " "2"" of type '" "wali::wfa::TransSet::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransSet_erase" "', argument " "2"" of type '" "wali::wfa::TransSet::iterator""'");
    } else {
      wali::wfa::TransSet::iterator * temp = reinterpret_cast< wali::wfa::TransSet::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->erase(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__TransSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ITrans, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransSet_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__TransSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransSet_erase__SWIG_2(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__TransSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TransSet_erase__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TransSet_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::TransSet::erase(ITrans *)\n"
    "    wali::wfa::TransSet::erase(wali::Key,wali::Key,wali::Key)\n"
    "    wali::wfa::TransSet::erase(wali::wfa::TransSet::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TransSet_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransSet_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_clear" "', argument " "1"" of type '" "wali::wfa::TransSet *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransSet_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_empty" "', argument " "1"" of type '" "wali::wfa::TransSet const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  result = (bool)((wali::wfa::TransSet const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_clear_and_release_resources(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransSet_clear_and_release_resources",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_clear_and_release_resources" "', argument " "1"" of type '" "wali::wfa::TransSet *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  (arg1)->clearAndReleaseResources();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< ITrans *,ITransLT,std::allocator< wali::wfa::ITrans * > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransSet_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_begin" "', argument " "1"" of type '" "wali::wfa::TransSet *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj((new wali::wfa::TransSet::iterator(static_cast< const wali::wfa::TransSet::iterator& >(result))), SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< ITrans *,ITransLT,std::allocator< wali::wfa::ITrans * > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransSet_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_end" "', argument " "1"" of type '" "wali::wfa::TransSet *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj((new wali::wfa::TransSet::iterator(static_cast< const wali::wfa::TransSet::iterator& >(result))), SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< ITrans *,ITransLT,std::allocator< wali::wfa::ITrans * > >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransSet_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_begin" "', argument " "1"" of type '" "wali::wfa::TransSet const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  result = ((wali::wfa::TransSet const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj((new wali::wfa::TransSet::const_iterator(static_cast< const wali::wfa::TransSet::const_iterator& >(result))), SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_begin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__TransSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TransSet_begin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__TransSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TransSet_begin__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TransSet_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::TransSet::begin()\n"
    "    wali::wfa::TransSet::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TransSet_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< ITrans *,ITransLT,std::allocator< wali::wfa::ITrans * > >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransSet_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_end" "', argument " "1"" of type '" "wali::wfa::TransSet const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  result = ((wali::wfa::TransSet const *)arg1)->end();
  resultobj = SWIG_NewPointerObj((new wali::wfa::TransSet::const_iterator(static_cast< const wali::wfa::TransSet::const_iterator& >(result))), SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_end(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__TransSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TransSet_end__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__TransSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TransSet_end__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TransSet_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::TransSet::end()\n"
    "    wali::wfa::TransSet::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TransSet_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransSet_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_size" "', argument " "1"" of type '" "wali::wfa::TransSet const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  result = ((wali::wfa::TransSet const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransSet_as_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::TransSet *arg1 = (wali::wfa::TransSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransSet_as_list",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransSet_as_list" "', argument " "1"" of type '" "wali::wfa::TransSet *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::TransSet * >(argp1);
  result = wali_wfa_TransSet_asList(arg1);
  resultobj = SWIG_NewPointerObj((new std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > >(static_cast< const std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > >& >(result))), SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TransSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wali__wfa__TransSet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_TransVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:TransVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector_iterator" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_wali_wfa_Trans_Sm__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector___nonzero__" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  result = (bool)std_vector_Sl_wali_wfa_Trans_Sm__Sg____nonzero__((std::vector< wali::wfa::Trans * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector___bool__" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  result = (bool)std_vector_Sl_wali_wfa_Trans_Sm__Sg____bool__((std::vector< wali::wfa::Trans * > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< wali::wfa::Trans * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector___len__" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  result = std_vector_Sl_wali_wfa_Trans_Sm__Sg____len__((std::vector< wali::wfa::Trans * > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< wali::wfa::Trans * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector_pop" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  try {
    result = (std::vector< wali::wfa::Trans * >::value_type)std_vector_Sl_wali_wfa_Trans_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  std::vector< wali::wfa::Trans * >::difference_type arg2 ;
  std::vector< wali::wfa::Trans * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TransVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector___getslice__" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransVector___getslice__" "', argument " "2"" of type '" "std::vector< wali::wfa::Trans * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< wali::wfa::Trans * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TransVector___getslice__" "', argument " "3"" of type '" "std::vector< wali::wfa::Trans * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< wali::wfa::Trans * >::difference_type >(val3);
  try {
    result = (std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > *)std_vector_Sl_wali_wfa_Trans_Sm__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  std::vector< wali::wfa::Trans * >::difference_type arg2 ;
  std::vector< wali::wfa::Trans * >::difference_type arg3 ;
  std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TransVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector___setslice__" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransVector___setslice__" "', argument " "2"" of type '" "std::vector< wali::wfa::Trans * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< wali::wfa::Trans * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TransVector___setslice__" "', argument " "3"" of type '" "std::vector< wali::wfa::Trans * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< wali::wfa::Trans * >::difference_type >(val3);
  {
    std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > > *ptr = (std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TransVector___setslice__" "', argument " "4"" of type '" "std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransVector___setslice__" "', argument " "4"" of type '" "std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_wali_wfa_Trans_Sm__Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  std::vector< wali::wfa::Trans * >::difference_type arg2 ;
  std::vector< wali::wfa::Trans * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TransVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector___setslice__" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransVector___setslice__" "', argument " "2"" of type '" "std::vector< wali::wfa::Trans * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< wali::wfa::Trans * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TransVector___setslice__" "', argument " "3"" of type '" "std::vector< wali::wfa::Trans * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< wali::wfa::Trans * >::difference_type >(val3);
  try {
    std_vector_Sl_wali_wfa_Trans_Sm__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TransVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TransVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TransVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< wali::wfa::Trans * >::__setslice__(std::vector< wali::wfa::Trans * >::difference_type,std::vector< wali::wfa::Trans * >::difference_type,std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > const &)\n"
    "    std::vector< wali::wfa::Trans * >::__setslice__(std::vector< wali::wfa::Trans * >::difference_type,std::vector< wali::wfa::Trans * >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TransVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  std::vector< wali::wfa::Trans * >::difference_type arg2 ;
  std::vector< wali::wfa::Trans * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TransVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector___delslice__" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransVector___delslice__" "', argument " "2"" of type '" "std::vector< wali::wfa::Trans * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< wali::wfa::Trans * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TransVector___delslice__" "', argument " "3"" of type '" "std::vector< wali::wfa::Trans * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< wali::wfa::Trans * >::difference_type >(val3);
  try {
    std_vector_Sl_wali_wfa_Trans_Sm__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  std::vector< wali::wfa::Trans * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector___delitem__" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransVector___delitem__" "', argument " "2"" of type '" "std::vector< wali::wfa::Trans * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< wali::wfa::Trans * >::difference_type >(val2);
  try {
    std_vector_Sl_wali_wfa_Trans_Sm__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector___getitem__" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TransVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > *)std_vector_Sl_wali_wfa_Trans_Sm__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TransVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector___setitem__" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TransVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > > *ptr = (std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TransVector___setitem__" "', argument " "3"" of type '" "std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransVector___setitem__" "', argument " "3"" of type '" "std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_wali_wfa_Trans_Sm__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector___setitem__" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TransVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_wali_wfa_Trans_Sm__Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector___delitem__" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TransVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_wali_wfa_Trans_Sm__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_TransVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TransVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TransVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< wali::wfa::Trans * >::__delitem__(std::vector< wali::wfa::Trans * >::difference_type)\n"
    "    std::vector< wali::wfa::Trans * >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TransVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  std::vector< wali::wfa::Trans * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< wali::wfa::Trans * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector___getitem__" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransVector___getitem__" "', argument " "2"" of type '" "std::vector< wali::wfa::Trans * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< wali::wfa::Trans * >::difference_type >(val2);
  try {
    result = (std::vector< wali::wfa::Trans * >::value_type)std_vector_Sl_wali_wfa_Trans_Sm__Sg____getitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_TransVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TransVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TransVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< wali::wfa::Trans * >::__getitem__(PySliceObject *)\n"
    "    std::vector< wali::wfa::Trans * >::__getitem__(std::vector< wali::wfa::Trans * >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TransVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  std::vector< wali::wfa::Trans * >::difference_type arg2 ;
  std::vector< wali::wfa::Trans * >::value_type arg3 = (std::vector< wali::wfa::Trans * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TransVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector___setitem__" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransVector___setitem__" "', argument " "2"" of type '" "std::vector< wali::wfa::Trans * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< wali::wfa::Trans * >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TransVector___setitem__" "', argument " "3"" of type '" "std::vector< wali::wfa::Trans * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< wali::wfa::Trans * >::value_type >(argp3);
  try {
    std_vector_Sl_wali_wfa_Trans_Sm__Sg____setitem____SWIG_2(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_TransVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TransVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wali__wfa__Trans, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TransVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TransVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< wali::wfa::Trans * >::__setitem__(PySliceObject *,std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > const &)\n"
    "    std::vector< wali::wfa::Trans * >::__setitem__(PySliceObject *)\n"
    "    std::vector< wali::wfa::Trans * >::__setitem__(std::vector< wali::wfa::Trans * >::difference_type,std::vector< wali::wfa::Trans * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TransVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  std::vector< wali::wfa::Trans * >::value_type arg2 = (std::vector< wali::wfa::Trans * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector_append" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransVector_append" "', argument " "2"" of type '" "std::vector< wali::wfa::Trans * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< wali::wfa::Trans * >::value_type >(argp2);
  std_vector_Sl_wali_wfa_Trans_Sm__Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TransVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TransVector")) SWIG_fail;
  result = (std::vector< wali::wfa::Trans * > *)new std::vector< wali::wfa::Trans * >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TransVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< wali::wfa::Trans * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TransVector",&obj0)) SWIG_fail;
  {
    std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > > *ptr = (std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransVector" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransVector" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< wali::wfa::Trans * > *)new std::vector< wali::wfa::Trans * >((std::vector< wali::wfa::Trans * > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector_empty" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  result = (bool)((std::vector< wali::wfa::Trans * > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< wali::wfa::Trans * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector_size" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  result = ((std::vector< wali::wfa::Trans * > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector_clear" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  std::vector< wali::wfa::Trans * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector_swap" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransVector_swap" "', argument " "2"" of type '" "std::vector< wali::wfa::Trans * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransVector_swap" "', argument " "2"" of type '" "std::vector< wali::wfa::Trans * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< wali::wfa::Trans * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector_get_allocator" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  result = ((std::vector< wali::wfa::Trans * > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< wali::wfa::Trans * >::allocator_type(static_cast< const std::vector< wali::wfa::Trans * >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_wali__wfa__Trans_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TransVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< wali::wfa::Trans * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TransVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TransVector" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< wali::wfa::Trans * >::size_type >(val1);
  result = (std::vector< wali::wfa::Trans * > *)new std::vector< wali::wfa::Trans * >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector_pop_back" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  std::vector< wali::wfa::Trans * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector_resize" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransVector_resize" "', argument " "2"" of type '" "std::vector< wali::wfa::Trans * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< wali::wfa::Trans * >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TransVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * >::size_type arg1 ;
  std::vector< wali::wfa::Trans * >::value_type arg2 = (std::vector< wali::wfa::Trans * >::value_type) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< wali::wfa::Trans * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TransVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TransVector" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< wali::wfa::Trans * >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TransVector" "', argument " "2"" of type '" "std::vector< wali::wfa::Trans * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< wali::wfa::Trans * >::value_type >(argp2);
  result = (std::vector< wali::wfa::Trans * > *)new std::vector< wali::wfa::Trans * >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TransVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TransVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_TransVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TransVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__wfa__Trans, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TransVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TransVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< wali::wfa::Trans * >::vector()\n"
    "    std::vector< wali::wfa::Trans * >::vector(std::vector< wali::wfa::Trans * > const &)\n"
    "    std::vector< wali::wfa::Trans * >::vector(std::vector< wali::wfa::Trans * >::size_type)\n"
    "    std::vector< wali::wfa::Trans * >::vector(std::vector< wali::wfa::Trans * >::size_type,std::vector< wali::wfa::Trans * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TransVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  std::vector< wali::wfa::Trans * >::value_type arg2 = (std::vector< wali::wfa::Trans * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector_push_back" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransVector_push_back" "', argument " "2"" of type '" "std::vector< wali::wfa::Trans * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< wali::wfa::Trans * >::value_type >(argp2);
  (arg1)->push_back(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< wali::wfa::Trans * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector_front" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  result = (std::vector< wali::wfa::Trans * >::value_type)((std::vector< wali::wfa::Trans * > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< wali::wfa::Trans * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector_back" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  result = (std::vector< wali::wfa::Trans * >::value_type)((std::vector< wali::wfa::Trans * > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  std::vector< wali::wfa::Trans * >::size_type arg2 ;
  std::vector< wali::wfa::Trans * >::value_type arg3 = (std::vector< wali::wfa::Trans * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TransVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector_assign" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransVector_assign" "', argument " "2"" of type '" "std::vector< wali::wfa::Trans * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< wali::wfa::Trans * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TransVector_assign" "', argument " "3"" of type '" "std::vector< wali::wfa::Trans * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< wali::wfa::Trans * >::value_type >(argp3);
  (arg1)->assign(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  std::vector< wali::wfa::Trans * >::size_type arg2 ;
  std::vector< wali::wfa::Trans * >::value_type arg3 = (std::vector< wali::wfa::Trans * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TransVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector_resize" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransVector_resize" "', argument " "2"" of type '" "std::vector< wali::wfa::Trans * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< wali::wfa::Trans * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wali__wfa__Trans, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TransVector_resize" "', argument " "3"" of type '" "std::vector< wali::wfa::Trans * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< wali::wfa::Trans * >::value_type >(argp3);
  (arg1)->resize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TransVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<wali::wfa::Trans*,std::allocator< wali::wfa::Trans * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wali__wfa__Trans, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TransVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TransVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< wali::wfa::Trans * >::resize(std::vector< wali::wfa::Trans * >::size_type)\n"
    "    std::vector< wali::wfa::Trans * >::resize(std::vector< wali::wfa::Trans * >::size_type,std::vector< wali::wfa::Trans * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TransVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  std::vector< wali::wfa::Trans * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector_reserve" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransVector_reserve" "', argument " "2"" of type '" "std::vector< wali::wfa::Trans * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< wali::wfa::Trans * >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< wali::wfa::Trans * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TransVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransVector_capacity" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  result = ((std::vector< wali::wfa::Trans * > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TransVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< wali::wfa::Trans * > *arg1 = (std::vector< wali::wfa::Trans * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TransVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TransVector" "', argument " "1"" of type '" "std::vector< wali::wfa::Trans * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< wali::wfa::Trans * > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TransVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_State_num_states_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""wali::wfa::State::numStates""' of type '""int""'");
    }
    wali::wfa::State::numStates = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_State_num_states_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(wali::wfa::State::numStates));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_State_num_states_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_State_num_states_get();
}


SWIGINTERN PyObject *_wrap_State_num_states_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_State_num_states_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_State_xmltag_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable State_xmltag is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_State_xmltag_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(wali::wfa::State::XMLTag));
  return pyobj;
}


SWIGINTERN int Swig_var_State_xmlinitial_tag_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable State_xmlinitial_tag is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_State_xmlinitial_tag_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(wali::wfa::State::XMLInitialTag));
  return pyobj;
}


SWIGINTERN int Swig_var_State_xmlfinal_tag_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable State_xmlfinal_tag is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_State_xmlfinal_tag_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(wali::wfa::State::XMLFinalTag));
  return pyobj;
}


SWIGINTERN int Swig_var_State_xmlname_tag_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable State_xmlname_tag is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_State_xmlname_tag_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(wali::wfa::State::XMLNameTag));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_State__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_State")) SWIG_fail;
  result = (wali::wfa::State *)new wali::wfa::State();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__State, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_State__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::Key arg1 ;
  wali::sem_elem_t arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::wfa::State *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_State",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_State" "', argument " "1"" of type '" "wali::Key""'");
  } 
  arg1 = static_cast< wali::Key >(val1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_State" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_State" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (wali::wfa::State *)new wali::wfa::State(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__State, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_State__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wfa::State *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_State",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wali__wfa__State,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_State" "', argument " "1"" of type '" "wali::wfa::State const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_State" "', argument " "1"" of type '" "wali::wfa::State const &""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::State * >(argp1);
  result = (wali::wfa::State *)new wali::wfa::State((wali::wfa::State const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__State, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_State(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_State__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wali__wfa__State, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_State__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_State__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_State'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::State::State()\n"
    "    wali::wfa::State::State(wali::Key,wali::sem_elem_t)\n"
    "    wali::wfa::State::State(wali::wfa::State const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_State(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *arg1 = (wali::wfa::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_State",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__State, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_State" "', argument " "1"" of type '" "wali::wfa::State *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::State * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_State_add_trans(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *arg1 = (wali::wfa::State *) 0 ;
  ITrans *arg2 = (ITrans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:State_add_trans",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_add_trans" "', argument " "1"" of type '" "wali::wfa::State *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::State * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ITrans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "State_add_trans" "', argument " "2"" of type '" "ITrans *""'"); 
  }
  arg2 = reinterpret_cast< ITrans * >(argp2);
  (arg1)->addTrans(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_State_weight__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *arg1 = (wali::wfa::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:State_weight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_weight" "', argument " "1"" of type '" "wali::wfa::State *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::State * >(argp1);
  result = (wali::sem_elem_t *) &(arg1)->weight();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_State_weight__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *arg1 = (wali::wfa::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:State_weight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_weight" "', argument " "1"" of type '" "wali::wfa::State const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::State * >(argp1);
  result = (wali::sem_elem_t *) &((wali::wfa::State const *)arg1)->weight();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_State_weight(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__State, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_State_weight__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__State, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_State_weight__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'State_weight'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::State::weight()\n"
    "    wali::wfa::State::weight() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_State_accept_weight__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *arg1 = (wali::wfa::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:State_accept_weight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_accept_weight" "', argument " "1"" of type '" "wali::wfa::State *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::State * >(argp1);
  result = (wali::sem_elem_t *) &(arg1)->acceptWeight();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_State_accept_weight__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *arg1 = (wali::wfa::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:State_accept_weight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_accept_weight" "', argument " "1"" of type '" "wali::wfa::State const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::State * >(argp1);
  result = (wali::sem_elem_t *) &((wali::wfa::State const *)arg1)->acceptWeight();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_State_accept_weight(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__State, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_State_accept_weight__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__State, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_State_accept_weight__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'State_accept_weight'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::State::acceptWeight()\n"
    "    wali::wfa::State::acceptWeight() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_State_delta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *arg1 = (wali::wfa::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:State_delta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_delta" "', argument " "1"" of type '" "wali::wfa::State *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::State * >(argp1);
  result = (wali::sem_elem_t *) &(arg1)->delta();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_State_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *arg1 = (wali::wfa::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:State_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_name" "', argument " "1"" of type '" "wali::wfa::State const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::State * >(argp1);
  result = ((wali::wfa::State const *)arg1)->name();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_State_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *arg1 = (wali::wfa::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< ITrans *,ITransLT,std::allocator< wali::wfa::ITrans * > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:State_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_begin" "', argument " "1"" of type '" "wali::wfa::State *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::State * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj((new wali::wfa::State::iterator(static_cast< const wali::wfa::State::iterator& >(result))), SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_State_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *arg1 = (wali::wfa::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< ITrans *,ITransLT,std::allocator< wali::wfa::ITrans * > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:State_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_end" "', argument " "1"" of type '" "wali::wfa::State *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::State * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj((new wali::wfa::State::iterator(static_cast< const wali::wfa::State::iterator& >(result))), SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_State_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *arg1 = (wali::wfa::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< ITrans *,ITransLT,std::allocator< wali::wfa::ITrans * > >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:State_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_begin" "', argument " "1"" of type '" "wali::wfa::State const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::State * >(argp1);
  result = ((wali::wfa::State const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj((new wali::wfa::State::const_iterator(static_cast< const wali::wfa::State::const_iterator& >(result))), SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_State_begin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__State, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_State_begin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__State, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_State_begin__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'State_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::State::begin()\n"
    "    wali::wfa::State::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_State_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *arg1 = (wali::wfa::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< ITrans *,ITransLT,std::allocator< wali::wfa::ITrans * > >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:State_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_end" "', argument " "1"" of type '" "wali::wfa::State const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::State * >(argp1);
  result = ((wali::wfa::State const *)arg1)->end();
  resultobj = SWIG_NewPointerObj((new wali::wfa::State::const_iterator(static_cast< const wali::wfa::State::const_iterator& >(result))), SWIGTYPE_p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_State_end(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__State, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_State_end__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__State, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_State_end__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'State_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::State::end()\n"
    "    wali::wfa::State::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_State_erase_trans__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *arg1 = (wali::wfa::State *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:State_erase_trans",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_erase_trans" "', argument " "1"" of type '" "wali::wfa::State *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::State * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "State_erase_trans" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "State_erase_trans" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "State_erase_trans" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  result = (bool)(arg1)->eraseTrans(arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_State_erase_trans__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *arg1 = (wali::wfa::State *) 0 ;
  ITrans *arg2 = (ITrans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:State_erase_trans",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_erase_trans" "', argument " "1"" of type '" "wali::wfa::State *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::State * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ITrans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "State_erase_trans" "', argument " "2"" of type '" "ITrans *""'"); 
  }
  arg2 = reinterpret_cast< ITrans * >(argp2);
  result = (bool)(arg1)->eraseTrans(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_State_erase_trans(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__State, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ITrans, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_State_erase_trans__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__State, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_State_erase_trans__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'State_erase_trans'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::State::eraseTrans(wali::Key,wali::Key,wali::Key)\n"
    "    wali::wfa::State::eraseTrans(ITrans *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_State_clear_trans_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *arg1 = (wali::wfa::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:State_clear_trans_set",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_clear_trans_set" "', argument " "1"" of type '" "wali::wfa::State *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::State * >(argp1);
  (arg1)->clearTransSet();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_State___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *arg1 = (wali::wfa::State *) 0 ;
  wali::wfa::State *arg2 = (wali::wfa::State *) 0 ;
  wali::wfa::State *arg3 = (wali::wfa::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:State___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State___call__" "', argument " "1"" of type '" "wali::wfa::State const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::State * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "State___call__" "', argument " "2"" of type '" "wali::wfa::State const *""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::State * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "State___call__" "', argument " "3"" of type '" "wali::wfa::State const *""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::State * >(argp3);
  result = (bool)((wali::wfa::State const *)arg1)->operator ()((wali::wfa::State const *)arg2,(wali::wfa::State const *)arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_State_get_trans_set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *arg1 = (wali::wfa::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wfa::TransSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:State_get_trans_set",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_get_trans_set" "', argument " "1"" of type '" "wali::wfa::State *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::State * >(argp1);
  result = (wali::wfa::TransSet *) &(arg1)->getTransSet();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_State_get_trans_set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::State *arg1 = (wali::wfa::State *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wfa::TransSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:State_get_trans_set",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "State_get_trans_set" "', argument " "1"" of type '" "wali::wfa::State const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::State * >(argp1);
  result = (wali::wfa::TransSet *) &((wali::wfa::State const *)arg1)->getTransSet();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_State_get_trans_set(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__State, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_State_get_trans_set__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__State, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_State_get_trans_set__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'State_get_trans_set'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::State::getTransSet()\n"
    "    wali::wfa::State::getTransSet() const\n");
  return 0;
}


SWIGINTERN PyObject *State_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wali__wfa__State, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DotAttributePrinter_print_extra_attributes__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::DotAttributePrinter *arg1 = (wali::wfa::DotAttributePrinter *) 0 ;
  wali::wfa::State *arg2 = (wali::wfa::State *) 0 ;
  std::ostream *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DotAttributePrinter_print_extra_attributes",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__DotAttributePrinter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DotAttributePrinter_print_extra_attributes" "', argument " "1"" of type '" "wali::wfa::DotAttributePrinter *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::DotAttributePrinter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DotAttributePrinter_print_extra_attributes" "', argument " "2"" of type '" "wali::wfa::State const *""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::State * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DotAttributePrinter_print_extra_attributes" "', argument " "3"" of type '" "std::ostream &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DotAttributePrinter_print_extra_attributes" "', argument " "3"" of type '" "std::ostream &""'"); 
  }
  arg3 = reinterpret_cast< std::ostream * >(argp3);
  (arg1)->print_extra_attributes((wali::wfa::State const *)arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DotAttributePrinter_print_extra_attributes__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::DotAttributePrinter *arg1 = (wali::wfa::DotAttributePrinter *) 0 ;
  ITrans *arg2 = (ITrans *) 0 ;
  std::ostream *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DotAttributePrinter_print_extra_attributes",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__DotAttributePrinter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DotAttributePrinter_print_extra_attributes" "', argument " "1"" of type '" "wali::wfa::DotAttributePrinter *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::DotAttributePrinter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ITrans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DotAttributePrinter_print_extra_attributes" "', argument " "2"" of type '" "ITrans const *""'"); 
  }
  arg2 = reinterpret_cast< ITrans * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DotAttributePrinter_print_extra_attributes" "', argument " "3"" of type '" "std::ostream &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DotAttributePrinter_print_extra_attributes" "', argument " "3"" of type '" "std::ostream &""'"); 
  }
  arg3 = reinterpret_cast< std::ostream * >(argp3);
  (arg1)->print_extra_attributes((ITrans const *)arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DotAttributePrinter_print_extra_attributes(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__DotAttributePrinter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__wfa__State, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__ostream, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DotAttributePrinter_print_extra_attributes__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__DotAttributePrinter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ITrans, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__ostream, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DotAttributePrinter_print_extra_attributes__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DotAttributePrinter_print_extra_attributes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::DotAttributePrinter::print_extra_attributes(wali::wfa::State const *,std::ostream &)\n"
    "    wali::wfa::DotAttributePrinter::print_extra_attributes(ITrans const *,std::ostream &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DotAttributePrinter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::DotAttributePrinter *arg1 = (wali::wfa::DotAttributePrinter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DotAttributePrinter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__DotAttributePrinter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DotAttributePrinter" "', argument " "1"" of type '" "wali::wfa::DotAttributePrinter *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::DotAttributePrinter * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DotAttributePrinter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wali__wfa__DotAttributePrinter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_is_epsilon_transition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ITrans *arg1 = (ITrans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:is_epsilon_transition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ITrans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "is_epsilon_transition" "', argument " "1"" of type '" "ITrans const *""'"); 
  }
  arg1 = reinterpret_cast< ITrans * >(argp1);
  result = (bool)wali::wfa::is_epsilon_transition((ITrans const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_any_transition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ITrans *arg1 = (ITrans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:is_any_transition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ITrans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "is_any_transition" "', argument " "1"" of type '" "ITrans const *""'"); 
  }
  arg1 = reinterpret_cast< ITrans * >(argp1);
  result = (bool)wali::wfa::is_any_transition((ITrans const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_WFA_global_default_path_summary_implementation_set(PyObject *_val) {
  if (sizeof(int) != sizeof(wali::wfa::WFA::globalDefaultPathSummaryImplementation)) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_AttributeError), "in variable '""arch, read-only wali::wfa::WFA::globalDefaultPathSummaryImplementation""' of type '""wali::wfa::WFA::PathSummaryImplementation""'");
  }  else {
    int ecode = SWIG_AsVal_int (_val, reinterpret_cast< int* >(&wali::wfa::WFA::globalDefaultPathSummaryImplementation));
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in variable '""wali::wfa::WFA::globalDefaultPathSummaryImplementation""' of type '""wali::wfa::WFA::PathSummaryImplementation""'");
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_WFA_global_default_path_summary_implementation_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(wali::wfa::WFA::globalDefaultPathSummaryImplementation));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_WFA_global_default_path_summary_implementation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_WFA_global_default_path_summary_implementation_get();
}


SWIGINTERN PyObject *_wrap_WFA_global_default_path_summary_implementation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_WFA_global_default_path_summary_implementation_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_WFA_global_default_path_summary_fwpds_top_down_set(PyObject *_val) {
  {
    bool val;
    int res = SWIG_AsVal_bool(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""wali::wfa::WFA::globalDefaultPathSummaryFwpdsTopDown""' of type '""bool""'");
    }
    wali::wfa::WFA::globalDefaultPathSummaryFwpdsTopDown = static_cast< bool >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_WFA_global_default_path_summary_fwpds_top_down_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_bool(static_cast< bool >(wali::wfa::WFA::globalDefaultPathSummaryFwpdsTopDown));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_WFA_global_default_path_summary_fwpds_top_down_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_WFA_global_default_path_summary_fwpds_top_down_get();
}


SWIGINTERN PyObject *_wrap_WFA_global_default_path_summary_fwpds_top_down_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_WFA_global_default_path_summary_fwpds_top_down_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_WFA_xmltag_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WFA_xmltag is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WFA_xmltag_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(wali::wfa::WFA::XMLTag));
  return pyobj;
}


SWIGINTERN int Swig_var_WFA_xmlquery_tag_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WFA_xmlquery_tag is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WFA_xmlquery_tag_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(wali::wfa::WFA::XMLQueryTag));
  return pyobj;
}


SWIGINTERN int Swig_var_WFA_xmlinorder_tag_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WFA_xmlinorder_tag is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WFA_xmlinorder_tag_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(wali::wfa::WFA::XMLInorderTag));
  return pyobj;
}


SWIGINTERN int Swig_var_WFA_xmlreverse_tag_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WFA_xmlreverse_tag is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WFA_xmlreverse_tag_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(wali::wfa::WFA::XMLReverseTag));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_WFA__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA::query_t arg1 ;
  progress_t arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::wfa::WFA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_WFA",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_WFA" "', argument " "1"" of type '" "wali::wfa::WFA::query_t""'");
  } 
  arg1 = static_cast< wali::wfa::WFA::query_t >(val1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_progress_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_WFA" "', argument " "2"" of type '" "progress_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WFA" "', argument " "2"" of type '" "progress_t""'");
    } else {
      progress_t * temp = reinterpret_cast< progress_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (wali::wfa::WFA *)new wali::wfa::WFA(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__WFA, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WFA__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA::query_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wfa::WFA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_WFA",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_WFA" "', argument " "1"" of type '" "wali::wfa::WFA::query_t""'");
  } 
  arg1 = static_cast< wali::wfa::WFA::query_t >(val1);
  result = (wali::wfa::WFA *)new wali::wfa::WFA(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__WFA, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WFA__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_WFA")) SWIG_fail;
  result = (wali::wfa::WFA *)new wali::wfa::WFA();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__WFA, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WFA__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wfa::WFA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_WFA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_WFA" "', argument " "1"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WFA" "', argument " "1"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = (wali::wfa::WFA *)new wali::wfa::WFA((wali::wfa::WFA const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__WFA, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WFA(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_WFA__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_WFA__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_WFA__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_progress_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_WFA__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_WFA'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::WFA::WFA(wali::wfa::WFA::query_t,progress_t)\n"
    "    wali::wfa::WFA::WFA(wali::wfa::WFA::query_t)\n"
    "    wali::wfa::WFA::WFA()\n"
    "    wali::wfa::WFA::WFA(wali::wfa::WFA const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_WFA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WFA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WFA" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_clear" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_set_initial_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_set_initial_state",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_set_initial_state" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_set_initial_state" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  result = (arg1)->set_initial_state(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_initial_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_initial_state",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_initial_state" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = ((wali::wfa::WFA const *)arg1)->initial_state();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_get_initial_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_get_initial_state",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_get_initial_state" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = ((wali::wfa::WFA const *)arg1)->getInitialState();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_is_initial_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_is_initial_state",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_is_initial_state" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_is_initial_state" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  result = (bool)((wali::wfa::WFA const *)arg1)->isInitialState(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_add_final_state__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_add_final_state",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_add_final_state" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_add_final_state" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  (arg1)->add_final_state(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_add_final_state__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  wali::sem_elem_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_add_final_state",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_add_final_state" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_add_final_state" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_add_final_state" "', argument " "3"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_add_final_state" "', argument " "3"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->addFinalState(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_add_final_state(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WFA_add_final_state__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_WFA_add_final_state__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WFA_add_final_state'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::WFA::add_final_state(wali::Key)\n"
    "    wali::wfa::WFA::addFinalState(wali::Key,wali::sem_elem_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WFA_is_final_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_is_final_state",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_is_final_state" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_is_final_state" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  result = (bool)((wali::wfa::WFA const *)arg1)->isFinalState(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_set_query(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::wfa::WFA::query_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::wfa::WFA::query_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_set_query",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_set_query" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_set_query" "', argument " "2"" of type '" "wali::wfa::WFA::query_t""'");
  } 
  arg2 = static_cast< wali::wfa::WFA::query_t >(val2);
  result = (wali::wfa::WFA::query_t)(arg1)->setQuery(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_get_query(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wfa::WFA::query_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_get_query",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_get_query" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = (wali::wfa::WFA::query_t)((wali::wfa::WFA const *)arg1)->getQuery();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_get_generation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_get_generation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_get_generation" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = ((wali::wfa::WFA const *)arg1)->getGeneration();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_set_generation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_set_generation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_set_generation" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_set_generation" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setGeneration(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_get_some_weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_get_some_weight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_get_some_weight" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = ((wali::wfa::WFA const *)arg1)->getSomeWeight();
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_add_trans__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  wali::sem_elem_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  SwigValueWrapper< std::pair< ITrans const *,bool > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:WFA_add_trans",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_add_trans" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_add_trans" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WFA_add_trans" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WFA_add_trans" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "WFA_add_trans" "', argument " "5"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_add_trans" "', argument " "5"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (arg1)->addTrans(arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new std::pair< ITrans const *,bool >(static_cast< const std::pair< ITrans const *,bool >& >(result))), SWIGTYPE_p_std__pairT_ITrans_const_p_bool_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_add_trans__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  ITrans *arg2 = (ITrans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< ITrans const *,bool > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_add_trans",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_add_trans" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ITrans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_add_trans" "', argument " "2"" of type '" "ITrans *""'"); 
  }
  arg2 = reinterpret_cast< ITrans * >(argp2);
  result = (arg1)->addTrans(arg2);
  resultobj = SWIG_NewPointerObj((new std::pair< ITrans const *,bool >(static_cast< const std::pair< ITrans const *,bool >& >(result))), SWIGTYPE_p_std__pairT_ITrans_const_p_bool_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_add_trans(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ITrans, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WFA_add_trans__SWIG_1(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_WFA_add_trans__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WFA_add_trans'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::WFA::addTrans(wali::Key,wali::Key,wali::Key,wali::sem_elem_t)\n"
    "    wali::wfa::WFA::addTrans(ITrans *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WFA_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:WFA_erase",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_erase" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_erase" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WFA_erase" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WFA_erase" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  (arg1)->erase(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  ITrans *arg2 = (ITrans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_erase" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ITrans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_erase" "', argument " "2"" of type '" "ITrans const *""'"); 
  }
  arg2 = reinterpret_cast< ITrans * >(argp2);
  (arg1)->erase((ITrans const *)arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ITrans, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WFA_erase__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_WFA_erase__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WFA_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::WFA::erase(wali::Key,wali::Key,wali::Key)\n"
    "    wali::wfa::WFA::erase(ITrans const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WFA_erase_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_erase_state",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_erase_state" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_erase_state" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  result = (bool)(arg1)->eraseState(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  wali::wfa::Trans *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:WFA_find",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_find" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_find" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WFA_find" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WFA_find" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wali__wfa__Trans,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "WFA_find" "', argument " "5"" of type '" "wali::wfa::Trans &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_find" "', argument " "5"" of type '" "wali::wfa::Trans &""'"); 
  }
  arg5 = reinterpret_cast< wali::wfa::Trans * >(argp5);
  result = (bool)((wali::wfa::WFA const *)arg1)->find(arg2,arg3,arg4,*arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_for_each__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::wfa::TransFunctor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_for_each",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_for_each" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__TransFunctor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_for_each" "', argument " "2"" of type '" "wali::wfa::TransFunctor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_for_each" "', argument " "2"" of type '" "wali::wfa::TransFunctor &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::TransFunctor * >(argp2);
  (arg1)->for_each(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_for_each__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  boost::function< void (ITrans *) > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_for_each",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_for_each" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__functionT_void_fITrans_pF_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_for_each" "', argument " "2"" of type '" "boost::function< void (ITrans *) > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_for_each" "', argument " "2"" of type '" "boost::function< void (ITrans *) > &""'"); 
  }
  arg2 = reinterpret_cast< boost::function< void (ITrans *) > * >(argp2);
  (arg1)->for_each(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_for_each__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::wfa::ConstTransFunctor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_for_each",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_for_each" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__ConstTransFunctor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_for_each" "', argument " "2"" of type '" "wali::wfa::ConstTransFunctor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_for_each" "', argument " "2"" of type '" "wali::wfa::ConstTransFunctor &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::ConstTransFunctor * >(argp2);
  ((wali::wfa::WFA const *)arg1)->for_each(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_for_each__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  boost::function< void (ITrans const *) > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_for_each",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_for_each" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__functionT_void_fITrans_const_pF_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_for_each" "', argument " "2"" of type '" "boost::function< void (ITrans const *) > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_for_each" "', argument " "2"" of type '" "boost::function< void (ITrans const *) > &""'"); 
  }
  arg2 = reinterpret_cast< boost::function< void (ITrans const *) > * >(argp2);
  ((wali::wfa::WFA const *)arg1)->for_each(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_for_each(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__wfa__TransFunctor, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WFA_for_each__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_boost__functionT_void_fITrans_pF_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WFA_for_each__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__wfa__ConstTransFunctor, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WFA_for_each__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_boost__functionT_void_fITrans_const_pF_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WFA_for_each__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WFA_for_each'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::WFA::for_each(wali::wfa::TransFunctor &)\n"
    "    wali::wfa::WFA::for_each(boost::function< void (ITrans *) > &)\n"
    "    wali::wfa::WFA::for_each(wali::wfa::ConstTransFunctor &) const\n"
    "    wali::wfa::WFA::for_each(boost::function< void (ITrans const *) > &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WFA_intersect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::wfa::WFA *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::wfa::WFA result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_intersect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_intersect" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_intersect" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_intersect" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::WFA * >(argp2);
  result = ((wali::wfa::WFA const *)arg1)->intersect((wali::wfa::WFA const &)*arg2);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA(static_cast< const wali::wfa::WFA& >(result))), SWIGTYPE_p_wali__wfa__WFA, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_intersect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::wfa::WFA *arg2 = 0 ;
  wali::wfa::WFA *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_intersect",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_intersect" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_intersect" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_intersect" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::WFA * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__wfa__WFA,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_intersect" "', argument " "3"" of type '" "wali::wfa::WFA &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_intersect" "', argument " "3"" of type '" "wali::wfa::WFA &""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::WFA * >(argp3);
  ((wali::wfa::WFA const *)arg1)->intersect((wali::wfa::WFA const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_intersect__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  WeightMaker *arg2 = 0 ;
  wali::wfa::WFA *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  wali::wfa::WFA result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_intersect",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_intersect" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WeightMaker,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_intersect" "', argument " "2"" of type '" "WeightMaker &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_intersect" "', argument " "2"" of type '" "WeightMaker &""'"); 
  }
  arg2 = reinterpret_cast< WeightMaker * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_intersect" "', argument " "3"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_intersect" "', argument " "3"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::WFA * >(argp3);
  result = ((wali::wfa::WFA const *)arg1)->intersect(*arg2,(wali::wfa::WFA const &)*arg3);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA(static_cast< const wali::wfa::WFA& >(result))), SWIGTYPE_p_wali__wfa__WFA, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_intersect__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  WeightMaker *arg2 = 0 ;
  wali::wfa::WFA *arg3 = 0 ;
  wali::wfa::WFA *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:WFA_intersect",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_intersect" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WeightMaker,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_intersect" "', argument " "2"" of type '" "WeightMaker &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_intersect" "', argument " "2"" of type '" "WeightMaker &""'"); 
  }
  arg2 = reinterpret_cast< WeightMaker * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_intersect" "', argument " "3"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_intersect" "', argument " "3"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::WFA * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_wali__wfa__WFA,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WFA_intersect" "', argument " "4"" of type '" "wali::wfa::WFA &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_intersect" "', argument " "4"" of type '" "wali::wfa::WFA &""'"); 
  }
  arg4 = reinterpret_cast< wali::wfa::WFA * >(argp4);
  ((wali::wfa::WFA const *)arg1)->intersect(*arg2,(wali::wfa::WFA const &)*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_intersect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__wfa__WFA, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WFA_intersect__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__wfa__WFA, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_WFA_intersect__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_WeightMaker, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_wali__wfa__WFA, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_WFA_intersect__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_WeightMaker, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_wali__wfa__WFA, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_WFA_intersect__SWIG_3(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WFA_intersect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::WFA::intersect(wali::wfa::WFA const &) const\n"
    "    wali::wfa::WFA::intersect(wali::wfa::WFA const &,wali::wfa::WFA &) const\n"
    "    wali::wfa::WFA::intersect(WeightMaker &,wali::wfa::WFA const &) const\n"
    "    wali::wfa::WFA::intersect(WeightMaker &,wali::wfa::WFA const &,wali::wfa::WFA &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WFA_intersect_worklist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  WeightMaker *arg2 = 0 ;
  wali::wfa::WFA *arg3 = 0 ;
  wali::wfa::WFA *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:WFA_intersect_worklist",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_intersect_worklist" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WeightMaker,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_intersect_worklist" "', argument " "2"" of type '" "WeightMaker &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_intersect_worklist" "', argument " "2"" of type '" "WeightMaker &""'"); 
  }
  arg2 = reinterpret_cast< WeightMaker * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_intersect_worklist" "', argument " "3"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_intersect_worklist" "', argument " "3"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::WFA * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_wali__wfa__WFA,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WFA_intersect_worklist" "', argument " "4"" of type '" "wali::wfa::WFA &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_intersect_worklist" "', argument " "4"" of type '" "wali::wfa::WFA &""'"); 
  }
  arg4 = reinterpret_cast< wali::wfa::WFA * >(argp4);
  ((wali::wfa::WFA const *)arg1)->intersect_worklist(*arg2,(wali::wfa::WFA const &)*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_intersect_cross(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  WeightMaker *arg2 = 0 ;
  wali::wfa::WFA *arg3 = 0 ;
  wali::wfa::WFA *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:WFA_intersect_cross",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_intersect_cross" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WeightMaker,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_intersect_cross" "', argument " "2"" of type '" "WeightMaker &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_intersect_cross" "', argument " "2"" of type '" "WeightMaker &""'"); 
  }
  arg2 = reinterpret_cast< WeightMaker * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_intersect_cross" "', argument " "3"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_intersect_cross" "', argument " "3"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::WFA * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_wali__wfa__WFA,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WFA_intersect_cross" "', argument " "4"" of type '" "wali::wfa::WFA &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_intersect_cross" "', argument " "4"" of type '" "wali::wfa::WFA &""'"); 
  }
  arg4 = reinterpret_cast< wali::wfa::WFA * >(argp4);
  ((wali::wfa::WFA const *)arg1)->intersect_cross(*arg2,(wali::wfa::WFA const &)*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_to_regex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< wali::ref_ptr< wali::regex::Regex > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_to_regex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_to_regex" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = (arg1)->toRegex();
  resultobj = SWIG_NewPointerObj((new wali::regex::regex_t(static_cast< const wali::regex::regex_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__regex__Regex_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_path_summary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_path_summary",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_path_summary" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  (arg1)->path_summary();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_path_summary_iterative_original__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_path_summary_iterative_original",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_path_summary_iterative_original" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  (arg1)->path_summary_iterative_original();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_path_summary_iterative_original__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Worklist< wali::wfa::State > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_path_summary_iterative_original",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_path_summary_iterative_original" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__WorklistT_wali__wfa__State_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_path_summary_iterative_original" "', argument " "2"" of type '" "wali::Worklist< wali::wfa::State > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_path_summary_iterative_original" "', argument " "2"" of type '" "wali::Worklist< wali::wfa::State > &""'"); 
  }
  arg2 = reinterpret_cast< wali::Worklist< wali::wfa::State > * >(argp2);
  (arg1)->path_summary_iterative_original(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_path_summary_iterative_original__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::sem_elem_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_path_summary_iterative_original",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_path_summary_iterative_original" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_path_summary_iterative_original" "', argument " "2"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_path_summary_iterative_original" "', argument " "2"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->path_summary_iterative_original(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_path_summary_iterative_original__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Worklist< wali::wfa::State > *arg2 = 0 ;
  wali::sem_elem_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_path_summary_iterative_original",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_path_summary_iterative_original" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__WorklistT_wali__wfa__State_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_path_summary_iterative_original" "', argument " "2"" of type '" "wali::Worklist< wali::wfa::State > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_path_summary_iterative_original" "', argument " "2"" of type '" "wali::Worklist< wali::wfa::State > &""'"); 
  }
  arg2 = reinterpret_cast< wali::Worklist< wali::wfa::State > * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_path_summary_iterative_original" "', argument " "3"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_path_summary_iterative_original" "', argument " "3"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->path_summary_iterative_original(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_path_summary_iterative_original(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_WFA_path_summary_iterative_original__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__WorklistT_wali__wfa__State_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WFA_path_summary_iterative_original__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WFA_path_summary_iterative_original__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__WorklistT_wali__wfa__State_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_WFA_path_summary_iterative_original__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WFA_path_summary_iterative_original'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::WFA::path_summary_iterative_original()\n"
    "    wali::wfa::WFA::path_summary_iterative_original(wali::Worklist< wali::wfa::State > &)\n"
    "    wali::wfa::WFA::path_summary_iterative_original(wali::sem_elem_t)\n"
    "    wali::wfa::WFA::path_summary_iterative_original(wali::Worklist< wali::wfa::State > &,wali::sem_elem_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WFA_path_summary_iterative_wpds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_path_summary_iterative_wpds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_path_summary_iterative_wpds" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  (arg1)->path_summary_iterative_wpds();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_path_summary_tarjan_fwpds__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_path_summary_tarjan_fwpds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_path_summary_tarjan_fwpds" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  (arg1)->path_summary_tarjan_fwpds();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_path_summary_tarjan_fwpds__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_path_summary_tarjan_fwpds",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_path_summary_tarjan_fwpds" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_path_summary_tarjan_fwpds" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->path_summary_tarjan_fwpds(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_path_summary_tarjan_fwpds(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_WFA_path_summary_tarjan_fwpds__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WFA_path_summary_tarjan_fwpds__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WFA_path_summary_tarjan_fwpds'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::WFA::path_summary_tarjan_fwpds()\n"
    "    wali::wfa::WFA::path_summary_tarjan_fwpds(bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WFA_path_summary_crosscheck_all(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_path_summary_crosscheck_all",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_path_summary_crosscheck_all" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  (arg1)->path_summary_crosscheck_all();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_path_summary_via_wpds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::wpds::WPDS *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_path_summary_via_wpds",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_path_summary_via_wpds" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wpds__WPDS,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_path_summary_via_wpds" "', argument " "2"" of type '" "wali::wpds::WPDS &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_path_summary_via_wpds" "', argument " "2"" of type '" "wali::wpds::WPDS &""'"); 
  }
  arg2 = reinterpret_cast< wali::wpds::WPDS * >(argp2);
  (arg1)->path_summary_via_wpds(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_prune(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_prune",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_prune" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  (arg1)->prune();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_filter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_filter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_filter" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_filter" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  (arg1)->filter(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_filter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_filter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_filter" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_filter" "', argument " "2"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_filter" "', argument " "2"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > &""'"); 
  }
  arg2 = reinterpret_cast< std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > * >(argp2);
  (arg1)->filter(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_filter(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WFA_filter__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WFA_filter__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WFA_filter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::WFA::filter(wali::Key)\n"
    "    wali::wfa::WFA::filter(std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WFA_duplicate_states(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > *arg2 = 0 ;
  wali::wfa::WFA *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_duplicate_states",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_duplicate_states" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_duplicate_states" "', argument " "2"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_duplicate_states" "', argument " "2"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > &""'"); 
  }
  arg2 = reinterpret_cast< std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__wfa__WFA,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_duplicate_states" "', argument " "3"" of type '" "wali::wfa::WFA &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_duplicate_states" "', argument " "3"" of type '" "wali::wfa::WFA &""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::WFA * >(argp3);
  ((wali::wfa::WFA const *)arg1)->duplicateStates(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_print_dot__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  std::ostream *arg2 = 0 ;
  bool arg3 ;
  wali::wfa::DotAttributePrinter *arg4 = (wali::wfa::DotAttributePrinter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:WFA_print_dot",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_print_dot" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_print_dot" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_print_dot" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WFA_print_dot" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_wali__wfa__DotAttributePrinter, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WFA_print_dot" "', argument " "4"" of type '" "wali::wfa::DotAttributePrinter *""'"); 
  }
  arg4 = reinterpret_cast< wali::wfa::DotAttributePrinter * >(argp4);
  result = (std::ostream *) &((wali::wfa::WFA const *)arg1)->print_dot(*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_print_dot__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  std::ostream *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_print_dot",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_print_dot" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_print_dot" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_print_dot" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WFA_print_dot" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (std::ostream *) &((wali::wfa::WFA const *)arg1)->print_dot(*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_print_dot__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_print_dot",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_print_dot" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_print_dot" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_print_dot" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (std::ostream *) &((wali::wfa::WFA const *)arg1)->print_dot(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_marshall(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_marshall",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_marshall" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_marshall" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_marshall" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (std::ostream *) &((wali::wfa::WFA const *)arg1)->marshall(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_marshall_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  std::ostream *arg2 = 0 ;
  wali::Key arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_marshall_state",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_marshall_state" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_marshall_state" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_marshall_state" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WFA_marshall_state" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  result = (std::ostream *) &((wali::wfa::WFA const *)arg1)->marshallState(*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  ITrans *arg2 = (ITrans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< ITrans *,bool > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_insert",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_insert" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ITrans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_insert" "', argument " "2"" of type '" "ITrans *""'"); 
  }
  arg2 = reinterpret_cast< ITrans * >(argp2);
  result = (arg1)->insert(arg2);
  resultobj = SWIG_NewPointerObj((new std::pair< ITrans *,bool >(static_cast< const std::pair< ITrans *,bool >& >(result))), SWIGTYPE_p_std__pairT_ITrans_p_bool_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_match(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  wali::wfa::TransSet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_match",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_match" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_match" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WFA_match" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  result = ((wali::wfa::WFA const *)arg1)->match(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new wali::wfa::TransSet(static_cast< const wali::wfa::TransSet& >(result))), SWIGTYPE_p_wali__wfa__TransSet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_add_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  wali::sem_elem_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_add_state",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_add_state" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_add_state" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_add_state" "', argument " "3"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_add_state" "', argument " "3"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->addState(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_get_state__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::wfa::State *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_get_state",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_get_state" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_get_state" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  result = (wali::wfa::State *)((wali::wfa::WFA const *)arg1)->getState(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_get_state__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::wfa::State *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_get_state",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_get_state" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_get_state" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  result = (wali::wfa::State *)(arg1)->getState(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__State, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_get_state(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WFA_get_state__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WFA_get_state__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WFA_get_state'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::WFA::getState(wali::Key) const\n"
    "    wali::wfa::WFA::getState(wali::Key)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WFA_get_states(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_get_states",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_get_states" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = (std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > *) &((wali::wfa::WFA const *)arg1)->getStates();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_get_final_states(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_get_final_states",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_get_final_states" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = (std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > *) &((wali::wfa::WFA const *)arg1)->getFinalStates();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_num_states(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_num_states",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_num_states" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = ((wali::wfa::WFA const *)arg1)->numStates();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_num_transitions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_num_transitions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_num_transitions" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = ((wali::wfa::WFA const *)arg1)->numTransitions();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_read_out_combine_over_all_paths_values__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::map< size_t,wali::ref_ptr< wali::SemElem >,std::less< size_t >,std::allocator< std::pair< size_t const,wali::ref_ptr< wali::SemElem > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_read_out_combine_over_all_paths_values",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_read_out_combine_over_all_paths_values" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_read_out_combine_over_all_paths_values" "', argument " "2"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_read_out_combine_over_all_paths_values" "', argument " "2"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > * >(argp2);
  result = ((wali::wfa::WFA const *)arg1)->readOutCombineOverAllPathsValues((std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::map< wali::Key,wali::sem_elem_t,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,wali::sem_elem_t > > >(static_cast< const std::map< wali::Key,wali::sem_elem_t,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,wali::sem_elem_t > > >& >(result))), SWIGTYPE_p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_read_out_combine_over_all_paths_values__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< size_t,wali::ref_ptr< wali::SemElem >,std::less< size_t >,std::allocator< std::pair< size_t const,wali::ref_ptr< wali::SemElem > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_read_out_combine_over_all_paths_values",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_read_out_combine_over_all_paths_values" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = ((wali::wfa::WFA const *)arg1)->readOutCombineOverAllPathsValues();
  resultobj = SWIG_NewPointerObj((new std::map< wali::Key,wali::sem_elem_t,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,wali::sem_elem_t > > >(static_cast< const std::map< wali::Key,wali::sem_elem_t,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,wali::sem_elem_t > > >& >(result))), SWIGTYPE_p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_read_out_combine_over_all_paths_values(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_WFA_read_out_combine_over_all_paths_values__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WFA_read_out_combine_over_all_paths_values__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WFA_read_out_combine_over_all_paths_values'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::WFA::readOutCombineOverAllPathsValues(std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &) const\n"
    "    wali::wfa::WFA::readOutCombineOverAllPathsValues() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WFA_set_default_path_summary_implementation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::wfa::WFA::PathSummaryImplementation arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_set_default_path_summary_implementation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_set_default_path_summary_implementation" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_set_default_path_summary_implementation" "', argument " "2"" of type '" "wali::wfa::WFA::PathSummaryImplementation""'");
  } 
  arg2 = static_cast< wali::wfa::WFA::PathSummaryImplementation >(val2);
  (arg1)->setDefaultPathSummaryImplementation(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_get_default_path_summary_implementation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wfa::WFA::PathSummaryImplementation result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_get_default_path_summary_implementation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_get_default_path_summary_implementation" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = (wali::wfa::WFA::PathSummaryImplementation)((wali::wfa::WFA const *)arg1)->getDefaultPathSummaryImplementation();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_epsilon_close(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::map< size_t,wali::ref_ptr< wali::SemElem >,std::less< size_t >,std::allocator< std::pair< size_t const,wali::ref_ptr< wali::SemElem > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_epsilon_close",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_epsilon_close" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_epsilon_close" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  result = ((wali::wfa::WFA const *)arg1)->epsilonClose(arg2);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA::AccessibleStateMap(static_cast< const wali::wfa::WFA::AccessibleStateMap& >(result))), SWIGTYPE_p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_epsilon_close_cached(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  wali::wfa::WFA::EpsilonCloseCache *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::map< size_t,wali::ref_ptr< wali::SemElem >,std::less< size_t >,std::allocator< std::pair< size_t const,wali::ref_ptr< wali::SemElem > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_epsilon_close_cached",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_epsilon_close_cached" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_epsilon_close_cached" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_size_t_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_epsilon_close_cached" "', argument " "3"" of type '" "wali::wfa::WFA::EpsilonCloseCache &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_epsilon_close_cached" "', argument " "3"" of type '" "wali::wfa::WFA::EpsilonCloseCache &""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::WFA::EpsilonCloseCache * >(argp3);
  result = ((wali::wfa::WFA const *)arg1)->epsilonCloseCached(arg2,*arg3);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA::AccessibleStateMap(static_cast< const wali::wfa::WFA::AccessibleStateMap& >(result))), SWIGTYPE_p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_epsilon_close_mohri(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::map< size_t,wali::ref_ptr< wali::SemElem >,std::less< size_t >,std::allocator< std::pair< size_t const,wali::ref_ptr< wali::SemElem > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_epsilon_close_mohri",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_epsilon_close_mohri" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_epsilon_close_mohri" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  result = ((wali::wfa::WFA const *)arg1)->epsilonClose_Mohri(arg2);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA::AccessibleStateMap(static_cast< const wali::wfa::WFA::AccessibleStateMap& >(result))), SWIGTYPE_p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_epsilon_close_fwpds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::map< size_t,wali::ref_ptr< wali::SemElem >,std::less< size_t >,std::allocator< std::pair< size_t const,wali::ref_ptr< wali::SemElem > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_epsilon_close_fwpds",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_epsilon_close_fwpds" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_epsilon_close_fwpds" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  result = ((wali::wfa::WFA const *)arg1)->epsilonClose_Fwpds(arg2);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA::AccessibleStateMap(static_cast< const wali::wfa::WFA::AccessibleStateMap& >(result))), SWIGTYPE_p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_epsilon_close_cached_mohri_demand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  wali::wfa::WFA::EpsilonCloseCache *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::map< size_t,wali::ref_ptr< wali::SemElem >,std::less< size_t >,std::allocator< std::pair< size_t const,wali::ref_ptr< wali::SemElem > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_epsilon_close_cached_mohri_demand",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_epsilon_close_cached_mohri_demand" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_epsilon_close_cached_mohri_demand" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_size_t_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_epsilon_close_cached_mohri_demand" "', argument " "3"" of type '" "wali::wfa::WFA::EpsilonCloseCache &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_epsilon_close_cached_mohri_demand" "', argument " "3"" of type '" "wali::wfa::WFA::EpsilonCloseCache &""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::WFA::EpsilonCloseCache * >(argp3);
  result = ((wali::wfa::WFA const *)arg1)->epsilonCloseCached_MohriDemand(arg2,*arg3);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA::AccessibleStateMap(static_cast< const wali::wfa::WFA::AccessibleStateMap& >(result))), SWIGTYPE_p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_epsilon_close_cached_fwpds_demand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  wali::wfa::WFA::EpsilonCloseCache *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::map< size_t,wali::ref_ptr< wali::SemElem >,std::less< size_t >,std::allocator< std::pair< size_t const,wali::ref_ptr< wali::SemElem > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_epsilon_close_cached_fwpds_demand",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_epsilon_close_cached_fwpds_demand" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_epsilon_close_cached_fwpds_demand" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_size_t_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_epsilon_close_cached_fwpds_demand" "', argument " "3"" of type '" "wali::wfa::WFA::EpsilonCloseCache &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_epsilon_close_cached_fwpds_demand" "', argument " "3"" of type '" "wali::wfa::WFA::EpsilonCloseCache &""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::WFA::EpsilonCloseCache * >(argp3);
  result = ((wali::wfa::WFA const *)arg1)->epsilonCloseCached_FwpdsDemand(arg2,*arg3);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA::AccessibleStateMap(static_cast< const wali::wfa::WFA::AccessibleStateMap& >(result))), SWIGTYPE_p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_epsilon_close_cached_mohri_all(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  wali::wfa::WFA::EpsilonCloseCache *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::map< size_t,wali::ref_ptr< wali::SemElem >,std::less< size_t >,std::allocator< std::pair< size_t const,wali::ref_ptr< wali::SemElem > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_epsilon_close_cached_mohri_all",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_epsilon_close_cached_mohri_all" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_epsilon_close_cached_mohri_all" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_size_t_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_epsilon_close_cached_mohri_all" "', argument " "3"" of type '" "wali::wfa::WFA::EpsilonCloseCache &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_epsilon_close_cached_mohri_all" "', argument " "3"" of type '" "wali::wfa::WFA::EpsilonCloseCache &""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::WFA::EpsilonCloseCache * >(argp3);
  result = ((wali::wfa::WFA const *)arg1)->epsilonCloseCached_MohriAll(arg2,*arg3);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA::AccessibleStateMap(static_cast< const wali::wfa::WFA::AccessibleStateMap& >(result))), SWIGTYPE_p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_epsilon_close_cached_fwpds_all_singles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  wali::wfa::WFA::EpsilonCloseCache *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::map< size_t,wali::ref_ptr< wali::SemElem >,std::less< size_t >,std::allocator< std::pair< size_t const,wali::ref_ptr< wali::SemElem > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_epsilon_close_cached_fwpds_all_singles",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_epsilon_close_cached_fwpds_all_singles" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_epsilon_close_cached_fwpds_all_singles" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_size_t_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_epsilon_close_cached_fwpds_all_singles" "', argument " "3"" of type '" "wali::wfa::WFA::EpsilonCloseCache &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_epsilon_close_cached_fwpds_all_singles" "', argument " "3"" of type '" "wali::wfa::WFA::EpsilonCloseCache &""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::WFA::EpsilonCloseCache * >(argp3);
  result = ((wali::wfa::WFA const *)arg1)->epsilonCloseCached_FwpdsAllSingles(arg2,*arg3);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA::AccessibleStateMap(static_cast< const wali::wfa::WFA::AccessibleStateMap& >(result))), SWIGTYPE_p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_epsilon_close_cached_fwpds_all_multi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  wali::wfa::WFA::EpsilonCloseCache *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::map< size_t,wali::ref_ptr< wali::SemElem >,std::less< size_t >,std::allocator< std::pair< size_t const,wali::ref_ptr< wali::SemElem > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_epsilon_close_cached_fwpds_all_multi",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_epsilon_close_cached_fwpds_all_multi" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_epsilon_close_cached_fwpds_all_multi" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_size_t_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_epsilon_close_cached_fwpds_all_multi" "', argument " "3"" of type '" "wali::wfa::WFA::EpsilonCloseCache &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_epsilon_close_cached_fwpds_all_multi" "', argument " "3"" of type '" "wali::wfa::WFA::EpsilonCloseCache &""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::WFA::EpsilonCloseCache * >(argp3);
  result = ((wali::wfa::WFA const *)arg1)->epsilonCloseCached_FwpdsAllMulti(arg2,*arg3);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA::AccessibleStateMap(static_cast< const wali::wfa::WFA::AccessibleStateMap& >(result))), SWIGTYPE_p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_generic_fwpds_poststar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > *arg2 = 0 ;
  boost::function< bool (ITrans const *) > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::map< size_t,std::map< size_t,wali::ref_ptr< wali::SemElem >,std::less< size_t >,std::allocator< std::pair< size_t const,wali::ref_ptr< wali::SemElem > > > >,std::less< size_t >,std::allocator< std::pair< size_t const,std::map< size_t,wali::ref_ptr< wali::SemElem >,std::less< size_t >,std::allocator< std::pair< size_t const,wali::ref_ptr< wali::SemElem > > > > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_generic_fwpds_poststar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_generic_fwpds_poststar" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_generic_fwpds_poststar" "', argument " "2"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_generic_fwpds_poststar" "', argument " "2"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__functionT_bool_fITrans_const_pF_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_generic_fwpds_poststar" "', argument " "3"" of type '" "boost::function< bool (ITrans const *) >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_generic_fwpds_poststar" "', argument " "3"" of type '" "boost::function< bool (ITrans const *) >""'");
    } else {
      boost::function< bool (ITrans const *) > * temp = reinterpret_cast< boost::function< bool (ITrans const *) > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = ((wali::wfa::WFA const *)arg1)->genericFwpdsPoststar((std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA::EpsilonCloseCache(static_cast< const wali::wfa::WFA::EpsilonCloseCache& >(result))), SWIGTYPE_p_std__mapT_size_t_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_generic_wpds_poststar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > *arg2 = 0 ;
  boost::function< bool (ITrans const *) > arg3 ;
  wali::wpds::WPDS *arg4 = 0 ;
  wali::sem_elem_t arg5 ;
  wali::sem_elem_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  SwigValueWrapper< std::map< size_t,std::map< size_t,wali::ref_ptr< wali::SemElem >,std::less< size_t >,std::allocator< std::pair< size_t const,wali::ref_ptr< wali::SemElem > > > >,std::less< size_t >,std::allocator< std::pair< size_t const,std::map< size_t,wali::ref_ptr< wali::SemElem >,std::less< size_t >,std::allocator< std::pair< size_t const,wali::ref_ptr< wali::SemElem > > > > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:WFA_generic_wpds_poststar",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_generic_wpds_poststar" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_generic_wpds_poststar" "', argument " "2"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_generic_wpds_poststar" "', argument " "2"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__functionT_bool_fITrans_const_pF_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_generic_wpds_poststar" "', argument " "3"" of type '" "boost::function< bool (ITrans const *) >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_generic_wpds_poststar" "', argument " "3"" of type '" "boost::function< bool (ITrans const *) >""'");
    } else {
      boost::function< bool (ITrans const *) > * temp = reinterpret_cast< boost::function< bool (ITrans const *) > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_wali__wpds__WPDS,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WFA_generic_wpds_poststar" "', argument " "4"" of type '" "wali::wpds::WPDS &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_generic_wpds_poststar" "', argument " "4"" of type '" "wali::wpds::WPDS &""'"); 
  }
  arg4 = reinterpret_cast< wali::wpds::WPDS * >(argp4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "WFA_generic_wpds_poststar" "', argument " "5"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_generic_wpds_poststar" "', argument " "5"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "WFA_generic_wpds_poststar" "', argument " "6"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_generic_wpds_poststar" "', argument " "6"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  result = ((wali::wfa::WFA const *)arg1)->genericWpdsPoststar((std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &)*arg2,arg3,*arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA::EpsilonCloseCache(static_cast< const wali::wfa::WFA::EpsilonCloseCache& >(result))), SWIGTYPE_p_std__mapT_size_t_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_compute_all_reaching_weights__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< size_t,domains::SemElemSet::ElementSet,std::less< size_t >,std::allocator< std::pair< size_t const,domains::SemElemSet::ElementSet > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_compute_all_reaching_weights",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_compute_all_reaching_weights" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = ((wali::wfa::WFA const *)arg1)->computeAllReachingWeights();
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA::AccessibleStateSetMap(static_cast< const wali::wfa::WFA::AccessibleStateSetMap& >(result))), SWIGTYPE_p_std__mapT_size_t_domains__SemElemSet__ElementSet_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_domains__SemElemSet__ElementSet_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_compute_all_reaching_weights__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  domains::SemElemSet::SemElemSubsumptionComputer arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::map< size_t,domains::SemElemSet::ElementSet,std::less< size_t >,std::allocator< std::pair< size_t const,domains::SemElemSet::ElementSet > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_compute_all_reaching_weights",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_compute_all_reaching_weights" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_domains__SemElemSet__SemElemSubsumptionComputer,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_compute_all_reaching_weights" "', argument " "2"" of type '" "domains::SemElemSet::SemElemSubsumptionComputer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_compute_all_reaching_weights" "', argument " "2"" of type '" "domains::SemElemSet::SemElemSubsumptionComputer""'");
    } else {
      domains::SemElemSet::SemElemSubsumptionComputer * temp = reinterpret_cast< domains::SemElemSet::SemElemSubsumptionComputer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WFA_compute_all_reaching_weights" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = ((wali::wfa::WFA const *)arg1)->computeAllReachingWeights(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA::AccessibleStateSetMap(static_cast< const wali::wfa::WFA::AccessibleStateSetMap& >(result))), SWIGTYPE_p_std__mapT_size_t_domains__SemElemSet__ElementSet_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_domains__SemElemSet__ElementSet_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_compute_all_reaching_weights(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_WFA_compute_all_reaching_weights__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_domains__SemElemSet__SemElemSubsumptionComputer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WFA_compute_all_reaching_weights__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WFA_compute_all_reaching_weights'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::WFA::computeAllReachingWeights() const\n"
    "    wali::wfa::WFA::computeAllReachingWeights(domains::SemElemSet::SemElemSubsumptionComputer,bool) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WFA_remove_epsilons(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wfa::WFA result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_remove_epsilons",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_remove_epsilons" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = ((wali::wfa::WFA const *)arg1)->removeEpsilons();
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA(static_cast< const wali::wfa::WFA& >(result))), SWIGTYPE_p_wali__wfa__WFA, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_simulate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::wfa::WFA::AccessibleStateMap *arg2 = 0 ;
  wali::wfa::WFA::Word *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::map< size_t,wali::ref_ptr< wali::SemElem >,std::less< size_t >,std::allocator< std::pair< size_t const,wali::ref_ptr< wali::SemElem > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_simulate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_simulate" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_simulate" "', argument " "2"" of type '" "wali::wfa::WFA::AccessibleStateMap const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_simulate" "', argument " "2"" of type '" "wali::wfa::WFA::AccessibleStateMap const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::WFA::AccessibleStateMap * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_simulate" "', argument " "3"" of type '" "wali::wfa::WFA::Word const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_simulate" "', argument " "3"" of type '" "wali::wfa::WFA::Word const &""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::WFA::Word * >(argp3);
  result = ((wali::wfa::WFA const *)arg1)->simulate((wali::wfa::WFA::AccessibleStateMap const &)*arg2,(wali::wfa::WFA::Word const &)*arg3);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA::AccessibleStateMap(static_cast< const wali::wfa::WFA::AccessibleStateMap& >(result))), SWIGTYPE_p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_is_accepted_with_nonzero_weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::wfa::WFA::Word *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_is_accepted_with_nonzero_weight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_is_accepted_with_nonzero_weight" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_is_accepted_with_nonzero_weight" "', argument " "2"" of type '" "wali::wfa::WFA::Word const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_is_accepted_with_nonzero_weight" "', argument " "2"" of type '" "wali::wfa::WFA::Word const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::WFA::Word * >(argp2);
  result = (bool)((wali::wfa::WFA const *)arg1)->isAcceptedWithNonzeroWeight((wali::wfa::WFA::Word const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_determinize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wfa::WFA result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_determinize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_determinize" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = ((wali::wfa::WFA const *)arg1)->determinize();
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA(static_cast< const wali::wfa::WFA& >(result))), SWIGTYPE_p_wali__wfa__WFA, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_determinize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::wfa::DeterminizeWeightGen *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::wfa::WFA result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_determinize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_determinize" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__DeterminizeWeightGen,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_determinize" "', argument " "2"" of type '" "wali::wfa::DeterminizeWeightGen const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_determinize" "', argument " "2"" of type '" "wali::wfa::DeterminizeWeightGen const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::DeterminizeWeightGen * >(argp2);
  result = ((wali::wfa::WFA const *)arg1)->determinize((wali::wfa::DeterminizeWeightGen const &)*arg2);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA(static_cast< const wali::wfa::WFA& >(result))), SWIGTYPE_p_wali__wfa__WFA, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_determinize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_WFA_determinize__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__wfa__DeterminizeWeightGen, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WFA_determinize__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WFA_determinize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::WFA::determinize() const\n"
    "    wali::wfa::WFA::determinize(wali::wfa::DeterminizeWeightGen const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WFA_semideterminize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wfa::WFA result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_semideterminize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_semideterminize" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = ((wali::wfa::WFA const *)arg1)->semideterminize();
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA(static_cast< const wali::wfa::WFA& >(result))), SWIGTYPE_p_wali__wfa__WFA, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_semideterminize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::wfa::DeterminizeWeightGen *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::wfa::WFA result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_semideterminize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_semideterminize" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__DeterminizeWeightGen,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_semideterminize" "', argument " "2"" of type '" "wali::wfa::DeterminizeWeightGen const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_semideterminize" "', argument " "2"" of type '" "wali::wfa::DeterminizeWeightGen const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::DeterminizeWeightGen * >(argp2);
  result = ((wali::wfa::WFA const *)arg1)->semideterminize((wali::wfa::DeterminizeWeightGen const &)*arg2);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA(static_cast< const wali::wfa::WFA& >(result))), SWIGTYPE_p_wali__wfa__WFA, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_semideterminize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_WFA_semideterminize__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__wfa__DeterminizeWeightGen, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WFA_semideterminize__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WFA_semideterminize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::WFA::semideterminize() const\n"
    "    wali::wfa::WFA::semideterminize(wali::wfa::DeterminizeWeightGen const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WFA_is_isomorphic_to__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::wfa::WFA *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_is_isomorphic_to",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_is_isomorphic_to" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_is_isomorphic_to" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_is_isomorphic_to" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::WFA * >(argp2);
  result = (bool)((wali::wfa::WFA const *)arg1)->isIsomorphicTo((wali::wfa::WFA const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_is_isomorphic_to__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::wfa::WFA *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_is_isomorphic_to",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_is_isomorphic_to" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_is_isomorphic_to" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_is_isomorphic_to" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::WFA * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WFA_is_isomorphic_to" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)((wali::wfa::WFA const *)arg1)->isIsomorphicTo((wali::wfa::WFA const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_is_isomorphic_to(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__wfa__WFA, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WFA_is_isomorphic_to__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__wfa__WFA, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WFA_is_isomorphic_to__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WFA_is_isomorphic_to'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::WFA::isIsomorphicTo(wali::wfa::WFA const &) const\n"
    "    wali::wfa::WFA::isIsomorphicTo(wali::wfa::WFA const &,bool) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WFA_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::wfa::WFA *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_equal" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_equal" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_equal" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::WFA * >(argp2);
  result = (bool)((wali::wfa::WFA const *)arg1)->equal((wali::wfa::WFA const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_complete__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > *arg2 = 0 ;
  wali::Key arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_complete",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_complete" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_complete" "', argument " "2"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_complete" "', argument " "2"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WFA_complete" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  (arg1)->complete((std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_complete__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_complete",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_complete" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_complete" "', argument " "2"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_complete" "', argument " "2"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > * >(argp2);
  (arg1)->complete((std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_complete__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_complete",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_complete" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_complete" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  (arg1)->complete(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_complete__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_complete",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_complete" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  (arg1)->complete();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_complete(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_WFA_complete__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WFA_complete__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WFA_complete__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WFA_complete__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WFA_complete'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::WFA::complete(std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &,wali::Key)\n"
    "    wali::wfa::WFA::complete(std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &)\n"
    "    wali::wfa::WFA::complete(wali::Key)\n"
    "    wali::wfa::WFA::complete()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WFA_complement_states(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_complement_states",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_complement_states" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  (arg1)->complementStates();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_is_isomorphism(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = 0 ;
  std::vector< wali::Key,std::allocator< wali::Key > > *arg2 = 0 ;
  wali::wfa::WFA *arg3 = 0 ;
  std::vector< wali::Key,std::allocator< wali::Key > > *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:WFA_is_isomorphism",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_is_isomorphism" "', argument " "1"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_is_isomorphism" "', argument " "1"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_is_isomorphism" "', argument " "2"" of type '" "std::vector< wali::Key,std::allocator< wali::Key > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_is_isomorphism" "', argument " "2"" of type '" "std::vector< wali::Key,std::allocator< wali::Key > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< wali::Key,std::allocator< wali::Key > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_is_isomorphism" "', argument " "3"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_is_isomorphism" "', argument " "3"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::WFA * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WFA_is_isomorphism" "', argument " "4"" of type '" "std::vector< wali::Key,std::allocator< wali::Key > > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_is_isomorphism" "', argument " "4"" of type '" "std::vector< wali::Key,std::allocator< wali::Key > > const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< wali::Key,std::allocator< wali::Key > > * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WFA_is_isomorphism" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (bool)wali::wfa::WFA::is_isomorphism((wali::wfa::WFA const &)*arg1,(std::vector< size_t,std::allocator< size_t > > const &)*arg2,(wali::wfa::WFA const &)*arg3,(std::vector< size_t,std::allocator< size_t > > const &)*arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_next_states_no_eclose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = 0 ;
  std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::map< size_t,std::map< size_t,std::set< size_t,std::less< size_t >,std::allocator< size_t > >,std::less< size_t >,std::allocator< std::pair< size_t const,std::set< size_t,std::less< size_t >,std::allocator< size_t > > > > >,std::less< size_t >,std::allocator< std::pair< size_t const,std::map< size_t,std::set< size_t,std::less< size_t >,std::allocator< size_t > >,std::less< size_t >,std::allocator< std::pair< size_t const,std::set< size_t,std::less< size_t >,std::allocator< size_t > > > > > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_next_states_no_eclose",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_next_states_no_eclose" "', argument " "1"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_next_states_no_eclose" "', argument " "1"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_next_states_no_eclose" "', argument " "2"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_next_states_no_eclose" "', argument " "2"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > * >(argp2);
  result = wali::wfa::WFA::next_states_no_eclose((wali::wfa::WFA const &)*arg1,(std::set< size_t,std::less< size_t >,std::allocator< size_t > > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::map< wali::Key,std::map< wali::Key,std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > >,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > > > >,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,std::map< wali::Key,std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > >,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > > > > > > >(static_cast< const std::map< wali::Key,std::map< wali::Key,std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > >,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > > > >,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,std::map< wali::Key,std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > >,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > > > > > > >& >(result))), SWIGTYPE_p_std__mapT_size_t_std__mapT_size_t_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_t_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_print_statistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_print_statistics",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_print_statistics" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WFA_print_statistics" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_print_statistics" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ((wali::wfa::WFA const *)arg1)->printStatistics(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_to_wpds__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  wali::wpds::WPDS *arg3 = (wali::wpds::WPDS *) 0 ;
  boost::function< bool (ITrans const *) > arg4 ;
  bool arg5 ;
  boost::function< wali::sem_elem_t (wali::sem_elem_t) > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:WFA_to_wpds",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_to_wpds" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_to_wpds" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_to_wpds" "', argument " "3"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg3 = reinterpret_cast< wali::wpds::WPDS * >(argp3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__functionT_bool_fITrans_const_pF_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WFA_to_wpds" "', argument " "4"" of type '" "boost::function< bool (ITrans const *) >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_to_wpds" "', argument " "4"" of type '" "boost::function< bool (ITrans const *) >""'");
    } else {
      boost::function< bool (ITrans const *) > * temp = reinterpret_cast< boost::function< bool (ITrans const *) > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WFA_to_wpds" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_boost__functionT_wali__sem_elem_t_fwali__sem_elem_tF_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "WFA_to_wpds" "', argument " "6"" of type '" "boost::function< wali::sem_elem_t (wali::sem_elem_t) >""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_to_wpds" "', argument " "6"" of type '" "boost::function< wali::sem_elem_t (wali::sem_elem_t) >""'");
    } else {
      boost::function< wali::sem_elem_t (wali::sem_elem_t) > * temp = reinterpret_cast< boost::function< wali::sem_elem_t (wali::sem_elem_t) > * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  ((wali::wfa::WFA const *)arg1)->toWpds(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_to_wpds__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  wali::wpds::WPDS *arg3 = (wali::wpds::WPDS *) 0 ;
  boost::function< bool (ITrans const *) > arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:WFA_to_wpds",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_to_wpds" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_to_wpds" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_to_wpds" "', argument " "3"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg3 = reinterpret_cast< wali::wpds::WPDS * >(argp3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__functionT_bool_fITrans_const_pF_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WFA_to_wpds" "', argument " "4"" of type '" "boost::function< bool (ITrans const *) >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_to_wpds" "', argument " "4"" of type '" "boost::function< bool (ITrans const *) >""'");
    } else {
      boost::function< bool (ITrans const *) > * temp = reinterpret_cast< boost::function< bool (ITrans const *) > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WFA_to_wpds" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ((wali::wfa::WFA const *)arg1)->toWpds(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_to_wpds__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  wali::wpds::WPDS *arg3 = (wali::wpds::WPDS *) 0 ;
  boost::function< bool (ITrans const *) > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:WFA_to_wpds",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_to_wpds" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_to_wpds" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WFA_to_wpds" "', argument " "3"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg3 = reinterpret_cast< wali::wpds::WPDS * >(argp3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__functionT_bool_fITrans_const_pF_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WFA_to_wpds" "', argument " "4"" of type '" "boost::function< bool (ITrans const *) >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WFA_to_wpds" "', argument " "4"" of type '" "boost::function< bool (ITrans const *) >""'");
    } else {
      boost::function< bool (ITrans const *) > * temp = reinterpret_cast< boost::function< bool (ITrans const *) > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ((wali::wfa::WFA const *)arg1)->toWpds(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_to_wpds(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wali__wpds__WPDS, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__functionT_bool_fITrans_const_pF_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_WFA_to_wpds__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wali__wpds__WPDS, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__functionT_bool_fITrans_const_pF_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_WFA_to_wpds__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wali__wpds__WPDS, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__functionT_bool_fITrans_const_pF_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_boost__functionT_wali__sem_elem_t_fwali__sem_elem_tF_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_WFA_to_wpds__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WFA_to_wpds'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::WFA::toWpds(wali::Key,wali::wpds::WPDS *,boost::function< bool (ITrans const *) >,bool,boost::function< wali::sem_elem_t (wali::sem_elem_t) >) const\n"
    "    wali::wfa::WFA::toWpds(wali::Key,wali::wpds::WPDS *,boost::function< bool (ITrans const *) >,bool) const\n"
    "    wali::wfa::WFA::toWpds(wali::Key,wali::wpds::WPDS *,boost::function< bool (ITrans const *) >) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WFA_alphabet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_alphabet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_alphabet" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = ((wali::wfa::WFA const *)arg1)->alphabet();
  resultobj = SWIG_NewPointerObj((new std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > >(static_cast< const std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > >& >(result))), SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_outgoing_trans_set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  wali::wfa::TransSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_outgoing_trans_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_outgoing_trans_set" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_outgoing_trans_set" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WFA_outgoing_trans_set" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  result = (wali::wfa::TransSet *)((wali::wfa::WFA const *)arg1)->outgoingTransSet(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_outgoing_trans_set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  wali::wfa::TransSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WFA_outgoing_trans_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_outgoing_trans_set" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_outgoing_trans_set" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WFA_outgoing_trans_set" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  result = (wali::wfa::TransSet *)(arg1)->outgoingTransSet(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wfa__TransSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_outgoing_trans_set(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WFA_outgoing_trans_set__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WFA_outgoing_trans_set__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WFA_outgoing_trans_set'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::WFA::outgoingTransSet(wali::Key,wali::Key) const\n"
    "    wali::wfa::WFA::outgoingTransSet(wali::Key,wali::Key)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WFA_end_of_epsilon_chain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< size_t,wali::ref_ptr< wali::SemElem > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_end_of_epsilon_chain",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_end_of_epsilon_chain" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_end_of_epsilon_chain" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  result = ((wali::wfa::WFA const *)arg1)->endOfEpsilonChain(arg2);
  resultobj = SWIG_NewPointerObj((new std::pair< wali::Key,wali::sem_elem_t >(static_cast< const std::pair< wali::Key,wali::sem_elem_t >& >(result))), SWIGTYPE_p_std__pairT_size_t_wali__ref_ptrT_wali__SemElem_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_collapse_transitions_forward_from(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  wali::Key arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WFA_collapse_transitions_forward_from",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_collapse_transitions_forward_from" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WFA_collapse_transitions_forward_from" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  (arg1)->collapseTransitionsForwardFrom(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_remove_states_with_in_degree0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_remove_states_with_in_degree0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_remove_states_with_in_degree0" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  (arg1)->removeStatesWithInDegree0();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_collapse_epsilon_chains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_collapse_epsilon_chains",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_collapse_epsilon_chains" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  (arg1)->collapseEpsilonChains();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_invert_states_and_transitions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wfa::WFA result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_invert_states_and_transitions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_invert_states_and_transitions" "', argument " "1"" of type '" "wali::wfa::WFA const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = ((wali::wfa::WFA const *)arg1)->invertStatesAndTransitions();
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA(static_cast< const wali::wfa::WFA& >(result))), SWIGTYPE_p_wali__wfa__WFA, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA___str__" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = (PyObject *)wali_wfa_WFA___str__(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_print_dot__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = (wali::wfa::WFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WFA_print_dot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wfa__WFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WFA_print_dot" "', argument " "1"" of type '" "wali::wfa::WFA *""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  result = (PyObject *)wali_wfa_WFA_print_dot__SWIG_3(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WFA_print_dot(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_WFA_print_dot__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WFA_print_dot__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WFA_print_dot__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_wali__wfa__DotAttributePrinter, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_WFA_print_dot__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WFA_print_dot'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wfa::WFA::print_dot(std::ostream &,bool,wali::wfa::DotAttributePrinter *) const\n"
    "    wali::wfa::WFA::print_dot(std::ostream &,bool) const\n"
    "    wali::wfa::WFA::print_dot(std::ostream &) const\n"
    "    wali::wfa::WFA::print_dot()\n");
  return 0;
}


SWIGINTERN PyObject *WFA_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wali__wfa__WFA, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_simplify(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wfa::WFA *arg1 = 0 ;
  boost::function< wali::wfa::delta::DeltaResult (wali::wfa::WFA const &) > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::wfa::WFA result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:simplify",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simplify" "', argument " "1"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "simplify" "', argument " "1"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg1 = reinterpret_cast< wali::wfa::WFA * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__functionT_wali__wfa__delta__DeltaResult_fwali__wfa__WFA_const_RF_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "simplify" "', argument " "2"" of type '" "boost::function< wali::wfa::delta::DeltaResult (wali::wfa::WFA const &) >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "simplify" "', argument " "2"" of type '" "boost::function< wali::wfa::delta::DeltaResult (wali::wfa::WFA const &) >""'");
    } else {
      boost::function< wali::wfa::delta::DeltaResult (wali::wfa::WFA const &) > * temp = reinterpret_cast< boost::function< wali::wfa::delta::DeltaResult (wali::wfa::WFA const &) > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = wali::wfa::delta::simplify((wali::wfa::WFA const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA(static_cast< const wali::wfa::WFA& >(result))), SWIGTYPE_p_wali__wfa__WFA, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KeySet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::less< size_t > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< size_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KeySet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__lessT_size_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KeySet" "', argument " "1"" of type '" "std::less< size_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KeySet" "', argument " "1"" of type '" "std::less< size_t > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< size_t > * >(argp1);
  result = (std::set< size_t > *)new std::set< size_t >((std::less< size_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeySet_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< size_t > *arg1 = (std::set< size_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:KeySet_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeySet_iterator" "', argument " "1"" of type '" "std::set< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< size_t > * >(argp1);
  result = (swig::SwigPyIterator *)std_set_Sl_size_t_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeySet___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< size_t > *arg1 = (std::set< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KeySet___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeySet___nonzero__" "', argument " "1"" of type '" "std::set< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< size_t > * >(argp1);
  result = (bool)std_set_Sl_size_t_Sg____nonzero__((std::set< size_t > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeySet___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< size_t > *arg1 = (std::set< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KeySet___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeySet___bool__" "', argument " "1"" of type '" "std::set< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< size_t > * >(argp1);
  result = (bool)std_set_Sl_size_t_Sg____bool__((std::set< size_t > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeySet___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< size_t > *arg1 = (std::set< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< size_t >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KeySet___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeySet___len__" "', argument " "1"" of type '" "std::set< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< size_t > * >(argp1);
  result = std_set_Sl_size_t_Sg____len__((std::set< size_t > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeySet_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< size_t > *arg1 = (std::set< size_t > *) 0 ;
  std::set< size_t >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeySet_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeySet_append" "', argument " "1"" of type '" "std::set< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KeySet_append" "', argument " "2"" of type '" "std::set< size_t >::value_type""'");
  } 
  arg2 = static_cast< std::set< size_t >::value_type >(val2);
  std_set_Sl_size_t_Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeySet___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< size_t > *arg1 = (std::set< size_t > *) 0 ;
  std::set< size_t >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeySet___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeySet___contains__" "', argument " "1"" of type '" "std::set< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KeySet___contains__" "', argument " "2"" of type '" "std::set< size_t >::value_type""'");
  } 
  arg2 = static_cast< std::set< size_t >::value_type >(val2);
  result = (bool)std_set_Sl_size_t_Sg____contains__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeySet___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< size_t > *arg1 = (std::set< size_t > *) 0 ;
  std::set< size_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< size_t >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeySet___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeySet___getitem__" "', argument " "1"" of type '" "std::set< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KeySet___getitem__" "', argument " "2"" of type '" "std::set< size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::set< size_t >::difference_type >(val2);
  try {
    result = std_set_Sl_size_t_Sg____getitem__((std::set< size_t > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeySet_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< size_t > *arg1 = (std::set< size_t > *) 0 ;
  std::set< size_t >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeySet_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeySet_add" "', argument " "1"" of type '" "std::set< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KeySet_add" "', argument " "2"" of type '" "std::set< size_t >::value_type""'");
  } 
  arg2 = static_cast< std::set< size_t >::value_type >(val2);
  std_set_Sl_size_t_Sg__add(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeySet_discard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< size_t > *arg1 = (std::set< size_t > *) 0 ;
  std::set< size_t >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeySet_discard",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeySet_discard" "', argument " "1"" of type '" "std::set< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KeySet_discard" "', argument " "2"" of type '" "std::set< size_t >::value_type""'");
  } 
  arg2 = static_cast< std::set< size_t >::value_type >(val2);
  std_set_Sl_size_t_Sg__discard(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KeySet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< size_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_KeySet")) SWIG_fail;
  result = (std::set< size_t > *)new std::set< size_t >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KeySet__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< size_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::set< size_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KeySet",&obj0)) SWIG_fail;
  {
    std::set<size_t,std::less< size_t >,std::allocator< size_t > > *ptr = (std::set<size_t,std::less< size_t >,std::allocator< size_t > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KeySet" "', argument " "1"" of type '" "std::set< size_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KeySet" "', argument " "1"" of type '" "std::set< size_t > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::set< size_t > *)new std::set< size_t >((std::set< size_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KeySet(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_KeySet__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_size_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_KeySet__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<size_t,std::less< size_t >,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_KeySet__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_KeySet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< size_t >::set(std::less< size_t > const &)\n"
    "    std::set< size_t >::set()\n"
    "    std::set< size_t >::set(std::set< size_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KeySet_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< size_t > *arg1 = (std::set< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KeySet_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeySet_empty" "', argument " "1"" of type '" "std::set< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< size_t > * >(argp1);
  result = (bool)((std::set< size_t > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeySet_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< size_t > *arg1 = (std::set< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< size_t >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KeySet_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeySet_size" "', argument " "1"" of type '" "std::set< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< size_t > * >(argp1);
  result = ((std::set< size_t > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeySet_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< size_t > *arg1 = (std::set< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KeySet_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeySet_clear" "', argument " "1"" of type '" "std::set< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< size_t > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeySet_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< size_t > *arg1 = (std::set< size_t > *) 0 ;
  std::set< size_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeySet_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeySet_swap" "', argument " "1"" of type '" "std::set< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KeySet_swap" "', argument " "2"" of type '" "std::set< size_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KeySet_swap" "', argument " "2"" of type '" "std::set< size_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::set< size_t > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeySet_erase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< size_t > *arg1 = (std::set< size_t > *) 0 ;
  std::set< size_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< size_t >::key_type temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< size_t >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeySet_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeySet_erase" "', argument " "1"" of type '" "std::set< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KeySet_erase" "', argument " "2"" of type '" "std::set< size_t >::key_type""'");
  } 
  temp2 = static_cast< std::set< size_t >::key_type >(val2);
  arg2 = &temp2;
  result = (arg1)->erase((std::set< size_t >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KeySet_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< size_t > *arg1 = (std::set< size_t > *) 0 ;
  std::set< size_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< size_t >::key_type temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< size_t >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KeySet_count",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KeySet_count" "', argument " "1"" of type '" "std::set< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KeySet_count" "', argument " "2"" of type '" "std::set< size_t >::key_type""'");
  } 
  temp2 = static_cast< std::set< size_t >::key_type >(val2);
  arg2 = &temp2;
  result = ((std::set< size_t > const *)arg1)->count((std::set< size_t >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_KeySet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< size_t > *arg1 = (std::set< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_KeySet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KeySet" "', argument " "1"" of type '" "std::set< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< size_t > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *KeySet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_WPDS_xmltag_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WPDS_xmltag is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WPDS_xmltag_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(wali::wpds::WPDS::XMLTag));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_WPDS__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_WPDS")) SWIG_fail;
  result = (wali::wpds::WPDS *)new wali::wpds::WPDS();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wpds__WPDS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WPDS__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< wali::ref_ptr< Wrapper > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wpds::WPDS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_WPDS",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wali__ref_ptrT_Wrapper_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_WPDS" "', argument " "1"" of type '" "wali::ref_ptr< Wrapper >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WPDS" "', argument " "1"" of type '" "wali::ref_ptr< Wrapper >""'");
    } else {
      wali::ref_ptr< Wrapper > * temp = reinterpret_cast< wali::ref_ptr< Wrapper > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (wali::wpds::WPDS *)new wali::wpds::WPDS(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wpds__WPDS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WPDS__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wpds::WPDS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_WPDS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wali__wpds__WPDS,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_WPDS" "', argument " "1"" of type '" "wali::wpds::WPDS const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WPDS" "', argument " "1"" of type '" "wali::wpds::WPDS const &""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  result = (wali::wpds::WPDS *)new wali::wpds::WPDS((wali::wpds::WPDS const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wpds__WPDS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WPDS(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_WPDS__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wali__ref_ptrT_Wrapper_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_WPDS__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wali__wpds__WPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_WPDS__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_WPDS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wpds::WPDS::WPDS()\n"
    "    wali::wpds::WPDS::WPDS(wali::ref_ptr< Wrapper >)\n"
    "    wali::wpds::WPDS::WPDS(wali::wpds::WPDS const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_WPDS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WPDS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WPDS" "', argument " "1"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WPDS_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_clear" "', argument " "1"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_set_worklist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  SwigValueWrapper< wali::ref_ptr< wali::Worklist< wali::wfa::ITrans > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WPDS_set_worklist",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_set_worklist" "', argument " "1"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__ref_ptrT_wali__WorklistT_wali__wfa__ITrans_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WPDS_set_worklist" "', argument " "2"" of type '" "wali::ref_ptr< wali::Worklist< wali::wfa::ITrans > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_set_worklist" "', argument " "2"" of type '" "wali::ref_ptr< wali::Worklist< wali::wfa::ITrans > >""'");
    } else {
      wali::ref_ptr< wali::Worklist< wali::wfa::ITrans > > * temp = reinterpret_cast< wali::ref_ptr< wali::Worklist< wali::wfa::ITrans > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->setWorklist(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_add_rule__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  wali::sem_elem_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:WPDS_add_rule",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_add_rule" "', argument " "1"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WPDS_add_rule" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WPDS_add_rule" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WPDS_add_rule" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "WPDS_add_rule" "', argument " "5"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_add_rule" "', argument " "5"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (bool)(arg1)->add_rule(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_add_rule__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  wali::Key arg5 ;
  wali::sem_elem_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:WPDS_add_rule",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_add_rule" "', argument " "1"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WPDS_add_rule" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WPDS_add_rule" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WPDS_add_rule" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WPDS_add_rule" "', argument " "5"" of type '" "wali::Key""'");
  } 
  arg5 = static_cast< wali::Key >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "WPDS_add_rule" "', argument " "6"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_add_rule" "', argument " "6"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  result = (bool)(arg1)->add_rule(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_add_rule__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  wali::Key arg5 ;
  wali::Key arg6 ;
  wali::sem_elem_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  size_t val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:WPDS_add_rule",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_add_rule" "', argument " "1"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WPDS_add_rule" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WPDS_add_rule" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WPDS_add_rule" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WPDS_add_rule" "', argument " "5"" of type '" "wali::Key""'");
  } 
  arg5 = static_cast< wali::Key >(val5);
  ecode6 = SWIG_AsVal_size_t(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "WPDS_add_rule" "', argument " "6"" of type '" "wali::Key""'");
  } 
  arg6 = static_cast< wali::Key >(val6);
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "WPDS_add_rule" "', argument " "7"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_add_rule" "', argument " "7"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  result = (bool)(arg1)->add_rule(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_add_rule(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__WPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_WPDS_add_rule__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__WPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_WPDS_add_rule__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__WPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_size_t(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_WPDS_add_rule__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WPDS_add_rule'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wpds::WPDS::add_rule(wali::Key,wali::Key,wali::Key,wali::sem_elem_t)\n"
    "    wali::wpds::WPDS::add_rule(wali::Key,wali::Key,wali::Key,wali::Key,wali::sem_elem_t)\n"
    "    wali::wpds::WPDS::add_rule(wali::Key,wali::Key,wali::Key,wali::Key,wali::Key,wali::sem_elem_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WPDS_replace_rule__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  wali::sem_elem_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:WPDS_replace_rule",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_replace_rule" "', argument " "1"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WPDS_replace_rule" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WPDS_replace_rule" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WPDS_replace_rule" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "WPDS_replace_rule" "', argument " "5"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_replace_rule" "', argument " "5"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (bool)(arg1)->replace_rule(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_replace_rule__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  wali::Key arg5 ;
  wali::sem_elem_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:WPDS_replace_rule",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_replace_rule" "', argument " "1"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WPDS_replace_rule" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WPDS_replace_rule" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WPDS_replace_rule" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WPDS_replace_rule" "', argument " "5"" of type '" "wali::Key""'");
  } 
  arg5 = static_cast< wali::Key >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "WPDS_replace_rule" "', argument " "6"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_replace_rule" "', argument " "6"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  result = (bool)(arg1)->replace_rule(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_replace_rule__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  wali::Key arg5 ;
  wali::Key arg6 ;
  wali::sem_elem_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  size_t val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:WPDS_replace_rule",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_replace_rule" "', argument " "1"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WPDS_replace_rule" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WPDS_replace_rule" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WPDS_replace_rule" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WPDS_replace_rule" "', argument " "5"" of type '" "wali::Key""'");
  } 
  arg5 = static_cast< wali::Key >(val5);
  ecode6 = SWIG_AsVal_size_t(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "WPDS_replace_rule" "', argument " "6"" of type '" "wali::Key""'");
  } 
  arg6 = static_cast< wali::Key >(val6);
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "WPDS_replace_rule" "', argument " "7"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_replace_rule" "', argument " "7"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  result = (bool)(arg1)->replace_rule(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_replace_rule(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__WPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_WPDS_replace_rule__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__WPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_WPDS_replace_rule__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__WPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_size_t(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_WPDS_replace_rule__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WPDS_replace_rule'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wpds::WPDS::replace_rule(wali::Key,wali::Key,wali::Key,wali::sem_elem_t)\n"
    "    wali::wpds::WPDS::replace_rule(wali::Key,wali::Key,wali::Key,wali::Key,wali::sem_elem_t)\n"
    "    wali::wpds::WPDS::replace_rule(wali::Key,wali::Key,wali::Key,wali::Key,wali::Key,wali::sem_elem_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WPDS_erase_rule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  wali::Key arg5 ;
  wali::Key arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  size_t val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:WPDS_erase_rule",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_erase_rule" "', argument " "1"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WPDS_erase_rule" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WPDS_erase_rule" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WPDS_erase_rule" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WPDS_erase_rule" "', argument " "5"" of type '" "wali::Key""'");
  } 
  arg5 = static_cast< wali::Key >(val5);
  ecode6 = SWIG_AsVal_size_t(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "WPDS_erase_rule" "', argument " "6"" of type '" "wali::Key""'");
  } 
  arg6 = static_cast< wali::Key >(val6);
  result = (bool)(arg1)->erase_rule(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_prestar__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  wali::wfa::WFA *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::wfa::WFA result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WPDS_prestar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_prestar" "', argument " "1"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WPDS_prestar" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_prestar" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::WFA * >(argp2);
  result = (arg1)->prestar((wali::wfa::WFA const &)*arg2);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA(static_cast< const wali::wfa::WFA& >(result))), SWIGTYPE_p_wali__wfa__WFA, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_prestar__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  wali::wfa::WFA *arg2 = 0 ;
  wali::wfa::WFA *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WPDS_prestar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_prestar" "', argument " "1"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WPDS_prestar" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_prestar" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::WFA * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__wfa__WFA,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WPDS_prestar" "', argument " "3"" of type '" "wali::wfa::WFA &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_prestar" "', argument " "3"" of type '" "wali::wfa::WFA &""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::WFA * >(argp3);
  (arg1)->prestar((wali::wfa::WFA const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_prestar(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__WPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__wfa__WFA, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WPDS_prestar__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__WPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__wfa__WFA, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_WPDS_prestar__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WPDS_prestar'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wpds::WPDS::prestar(wali::wfa::WFA const &)\n"
    "    wali::wpds::WPDS::prestar(wali::wfa::WFA const &,wali::wfa::WFA &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WPDS_poststar__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  wali::wfa::WFA *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::wfa::WFA result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WPDS_poststar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_poststar" "', argument " "1"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WPDS_poststar" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_poststar" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::WFA * >(argp2);
  result = (arg1)->poststar((wali::wfa::WFA const &)*arg2);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA(static_cast< const wali::wfa::WFA& >(result))), SWIGTYPE_p_wali__wfa__WFA, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_poststar__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  wali::wfa::WFA *arg2 = 0 ;
  wali::wfa::WFA *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WPDS_poststar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_poststar" "', argument " "1"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WPDS_poststar" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_poststar" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::WFA * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__wfa__WFA,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WPDS_poststar" "', argument " "3"" of type '" "wali::wfa::WFA &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_poststar" "', argument " "3"" of type '" "wali::wfa::WFA &""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::WFA * >(argp3);
  (arg1)->poststar((wali::wfa::WFA const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_poststar(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__WPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__wfa__WFA, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WPDS_poststar__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__WPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__wfa__WFA, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_WPDS_poststar__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WPDS_poststar'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wpds::WPDS::poststar(wali::wfa::WFA const &)\n"
    "    wali::wpds::WPDS::poststar(wali::wfa::WFA const &,wali::wfa::WFA &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WPDS_marshall(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WPDS_marshall",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_marshall" "', argument " "1"" of type '" "wali::wpds::WPDS const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WPDS_marshall" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_marshall" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (std::ostream *) &((wali::wpds::WPDS const *)arg1)->marshall(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_print_dot__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  std::ostream *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WPDS_print_dot",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_print_dot" "', argument " "1"" of type '" "wali::wpds::WPDS const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WPDS_print_dot" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_print_dot" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WPDS_print_dot" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (std::ostream *) &((wali::wpds::WPDS const *)arg1)->print_dot(*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_print_dot__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WPDS_print_dot",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_print_dot" "', argument " "1"" of type '" "wali::wpds::WPDS const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WPDS_print_dot" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_print_dot" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (std::ostream *) &((wali::wpds::WPDS const *)arg1)->print_dot(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_print_dot(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__WPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WPDS_print_dot__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__WPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WPDS_print_dot__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WPDS_print_dot'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wpds::WPDS::print_dot(std::ostream &,bool) const\n"
    "    wali::wpds::WPDS::print_dot(std::ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WPDS_count_rules(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WPDS_count_rules",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_count_rules" "', argument " "1"" of type '" "wali::wpds::WPDS const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  result = (int)((wali::wpds::WPDS const *)arg1)->count_rules();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_for_each__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  wali::wpds::ConstRuleFunctor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WPDS_for_each",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_for_each" "', argument " "1"" of type '" "wali::wpds::WPDS const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wpds__ConstRuleFunctor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WPDS_for_each" "', argument " "2"" of type '" "wali::wpds::ConstRuleFunctor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_for_each" "', argument " "2"" of type '" "wali::wpds::ConstRuleFunctor &""'"); 
  }
  arg2 = reinterpret_cast< wali::wpds::ConstRuleFunctor * >(argp2);
  ((wali::wpds::WPDS const *)arg1)->for_each(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_for_each__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  wali::wpds::RuleFunctor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WPDS_for_each",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_for_each" "', argument " "1"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wpds__RuleFunctor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WPDS_for_each" "', argument " "2"" of type '" "wali::wpds::RuleFunctor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_for_each" "', argument " "2"" of type '" "wali::wpds::RuleFunctor &""'"); 
  }
  arg2 = reinterpret_cast< wali::wpds::RuleFunctor * >(argp2);
  (arg1)->for_each(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_for_each(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__WPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__wpds__ConstRuleFunctor, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WPDS_for_each__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__WPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wali__wpds__RuleFunctor, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WPDS_for_each__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'WPDS_for_each'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wpds::WPDS::for_each(wali::wpds::ConstRuleFunctor &) const\n"
    "    wali::wpds::WPDS::for_each(wali::wpds::RuleFunctor &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WPDS___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  wali::wfa::ITrans *arg2 = (wali::wfa::ITrans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WPDS___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS___call__" "', argument " "1"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__wfa__ITrans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WPDS___call__" "', argument " "2"" of type '" "wali::wfa::ITrans const *""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::ITrans * >(argp2);
  (arg1)->operator ()((wali::wfa::ITrans const *)arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_is_pds_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  wali::Key arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WPDS_is_pds_state",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_is_pds_state" "', argument " "1"" of type '" "wali::wpds::WPDS const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WPDS_is_pds_state" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  result = (bool)((wali::wpds::WPDS const *)arg1)->is_pds_state(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_num_pds_states(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WPDS_num_pds_states",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_num_pds_states" "', argument " "1"" of type '" "wali::wpds::WPDS const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  result = (int)((wali::wpds::WPDS const *)arg1)->num_pds_states();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_get_states(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WPDS_get_states",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_get_states" "', argument " "1"" of type '" "wali::wpds::WPDS const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  result = (std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > *) &((wali::wpds::WPDS const *)arg1)->get_states();
  resultobj = swig::from(static_cast< std::set<size_t,std::less< size_t >,std::allocator< size_t > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_construct_cfg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > *arg2 = 0 ;
  std::map< wali::Key,wali::Key,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,wali::Key > > > *arg3 = 0 ;
  wali::wfa::WFA *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  wali::Key result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:WPDS_construct_cfg",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_construct_cfg" "', argument " "1"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WPDS_construct_cfg" "', argument " "2"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_construct_cfg" "', argument " "2"" of type '" "std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > &""'"); 
  }
  arg2 = reinterpret_cast< std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_size_t_size_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_size_t_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WPDS_construct_cfg" "', argument " "3"" of type '" "std::map< wali::Key,wali::Key,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,wali::Key > > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_construct_cfg" "', argument " "3"" of type '" "std::map< wali::Key,wali::Key,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,wali::Key > > > &""'"); 
  }
  arg3 = reinterpret_cast< std::map< wali::Key,wali::Key,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,wali::Key > > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_wali__wfa__WFA,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WPDS_construct_cfg" "', argument " "4"" of type '" "wali::wfa::WFA &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_construct_cfg" "', argument " "4"" of type '" "wali::wfa::WFA &""'"); 
  }
  arg4 = reinterpret_cast< wali::wfa::WFA * >(argp4);
  result = (arg1)->constructCFG(*arg2,*arg3,*arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_get_the_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WPDS_get_the_zero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_get_the_zero" "', argument " "1"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  result = (arg1)->get_theZero();
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_print_statistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WPDS_print_statistics",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_print_statistics" "', argument " "1"" of type '" "wali::wpds::WPDS const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WPDS_print_statistics" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_print_statistics" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ((wali::wpds::WPDS const *)arg1)->printStatistics(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS_to_wfa(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  wali::wfa::WFA *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WPDS_to_wfa",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS_to_wfa" "', argument " "1"" of type '" "wali::wpds::WPDS const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__WFA,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WPDS_to_wfa" "', argument " "2"" of type '" "wali::wfa::WFA &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WPDS_to_wfa" "', argument " "2"" of type '" "wali::wfa::WFA &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::WFA * >(argp2);
  ((wali::wpds::WPDS const *)arg1)->toWfa(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WPDS___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::WPDS *arg1 = (wali::wpds::WPDS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WPDS___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__WPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WPDS___str__" "', argument " "1"" of type '" "wali::wpds::WPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::WPDS * >(argp1);
  result = (PyObject *)wali_wpds_WPDS___str__(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WPDS_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wali__wpds__WPDS, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_EWPDS_xmltag_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EWPDS_xmltag is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EWPDS_xmltag_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(wali::wpds::ewpds::EWPDS::XMLTag));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_EWPDS__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::ewpds::EWPDS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_EWPDS")) SWIG_fail;
  result = (wali::wpds::ewpds::EWPDS *)new wali::wpds::ewpds::EWPDS();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wpds__ewpds__EWPDS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EWPDS__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< wali::ref_ptr< wali::wpds::Wrapper > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wpds::ewpds::EWPDS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EWPDS",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wali__ref_ptrT_wali__wpds__Wrapper_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EWPDS" "', argument " "1"" of type '" "wali::ref_ptr< wali::wpds::Wrapper >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EWPDS" "', argument " "1"" of type '" "wali::ref_ptr< wali::wpds::Wrapper >""'");
    } else {
      wali::ref_ptr< wali::wpds::Wrapper > * temp = reinterpret_cast< wali::ref_ptr< wali::wpds::Wrapper > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (wali::wpds::ewpds::EWPDS *)new wali::wpds::ewpds::EWPDS(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wpds__ewpds__EWPDS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EWPDS__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::ewpds::EWPDS *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wpds::ewpds::EWPDS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EWPDS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wali__wpds__ewpds__EWPDS,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EWPDS" "', argument " "1"" of type '" "wali::wpds::ewpds::EWPDS const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EWPDS" "', argument " "1"" of type '" "wali::wpds::ewpds::EWPDS const &""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::ewpds::EWPDS * >(argp1);
  result = (wali::wpds::ewpds::EWPDS *)new wali::wpds::ewpds::EWPDS((wali::wpds::ewpds::EWPDS const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wpds__ewpds__EWPDS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EWPDS(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_EWPDS__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wali__ref_ptrT_wali__wpds__Wrapper_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EWPDS__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EWPDS__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_EWPDS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wpds::ewpds::EWPDS::EWPDS()\n"
    "    wali::wpds::ewpds::EWPDS::EWPDS(wali::ref_ptr< wali::wpds::Wrapper >)\n"
    "    wali::wpds::ewpds::EWPDS::EWPDS(wali::wpds::ewpds::EWPDS const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_EWPDS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::ewpds::EWPDS *arg1 = (wali::wpds::ewpds::EWPDS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EWPDS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__ewpds__EWPDS, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EWPDS" "', argument " "1"" of type '" "wali::wpds::ewpds::EWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::ewpds::EWPDS * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EWPDS_add_rule__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::ewpds::EWPDS *arg1 = (wali::wpds::ewpds::EWPDS *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  wali::sem_elem_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:EWPDS_add_rule",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EWPDS_add_rule" "', argument " "1"" of type '" "wali::wpds::ewpds::EWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::ewpds::EWPDS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EWPDS_add_rule" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EWPDS_add_rule" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EWPDS_add_rule" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "EWPDS_add_rule" "', argument " "5"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EWPDS_add_rule" "', argument " "5"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (bool)(arg1)->add_rule(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EWPDS_add_rule__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::ewpds::EWPDS *arg1 = (wali::wpds::ewpds::EWPDS *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  wali::Key arg5 ;
  wali::sem_elem_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:EWPDS_add_rule",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EWPDS_add_rule" "', argument " "1"" of type '" "wali::wpds::ewpds::EWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::ewpds::EWPDS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EWPDS_add_rule" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EWPDS_add_rule" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EWPDS_add_rule" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EWPDS_add_rule" "', argument " "5"" of type '" "wali::Key""'");
  } 
  arg5 = static_cast< wali::Key >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "EWPDS_add_rule" "', argument " "6"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EWPDS_add_rule" "', argument " "6"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  result = (bool)(arg1)->add_rule(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EWPDS_add_rule__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::ewpds::EWPDS *arg1 = (wali::wpds::ewpds::EWPDS *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  wali::Key arg5 ;
  wali::Key arg6 ;
  wali::sem_elem_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  size_t val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:EWPDS_add_rule",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EWPDS_add_rule" "', argument " "1"" of type '" "wali::wpds::ewpds::EWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::ewpds::EWPDS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EWPDS_add_rule" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EWPDS_add_rule" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EWPDS_add_rule" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EWPDS_add_rule" "', argument " "5"" of type '" "wali::Key""'");
  } 
  arg5 = static_cast< wali::Key >(val5);
  ecode6 = SWIG_AsVal_size_t(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "EWPDS_add_rule" "', argument " "6"" of type '" "wali::Key""'");
  } 
  arg6 = static_cast< wali::Key >(val6);
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "EWPDS_add_rule" "', argument " "7"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EWPDS_add_rule" "', argument " "7"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  result = (bool)(arg1)->add_rule(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EWPDS_add_rule__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::ewpds::EWPDS *arg1 = (wali::wpds::ewpds::EWPDS *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  wali::Key arg5 ;
  wali::Key arg6 ;
  wali::sem_elem_t arg7 ;
  merge_fn_t arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  size_t val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:EWPDS_add_rule",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EWPDS_add_rule" "', argument " "1"" of type '" "wali::wpds::ewpds::EWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::ewpds::EWPDS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EWPDS_add_rule" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EWPDS_add_rule" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EWPDS_add_rule" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EWPDS_add_rule" "', argument " "5"" of type '" "wali::Key""'");
  } 
  arg5 = static_cast< wali::Key >(val5);
  ecode6 = SWIG_AsVal_size_t(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "EWPDS_add_rule" "', argument " "6"" of type '" "wali::Key""'");
  } 
  arg6 = static_cast< wali::Key >(val6);
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "EWPDS_add_rule" "', argument " "7"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EWPDS_add_rule" "', argument " "7"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_merge_fn_t,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "EWPDS_add_rule" "', argument " "8"" of type '" "merge_fn_t""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EWPDS_add_rule" "', argument " "8"" of type '" "merge_fn_t""'");
    } else {
      merge_fn_t * temp = reinterpret_cast< merge_fn_t * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  result = (bool)(arg1)->add_rule(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EWPDS_add_rule(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_EWPDS_add_rule__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_EWPDS_add_rule__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_size_t(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_EWPDS_add_rule__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_size_t(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_merge_fn_t, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_EWPDS_add_rule__SWIG_3(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EWPDS_add_rule'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wpds::ewpds::EWPDS::add_rule(wali::Key,wali::Key,wali::Key,wali::sem_elem_t)\n"
    "    wali::wpds::ewpds::EWPDS::add_rule(wali::Key,wali::Key,wali::Key,wali::Key,wali::sem_elem_t)\n"
    "    wali::wpds::ewpds::EWPDS::add_rule(wali::Key,wali::Key,wali::Key,wali::Key,wali::Key,wali::sem_elem_t)\n"
    "    wali::wpds::ewpds::EWPDS::add_rule(wali::Key,wali::Key,wali::Key,wali::Key,wali::Key,wali::sem_elem_t,merge_fn_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EWPDS_replace_rule__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::ewpds::EWPDS *arg1 = (wali::wpds::ewpds::EWPDS *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  wali::Key arg5 ;
  wali::Key arg6 ;
  wali::sem_elem_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  size_t val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:EWPDS_replace_rule",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EWPDS_replace_rule" "', argument " "1"" of type '" "wali::wpds::ewpds::EWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::ewpds::EWPDS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EWPDS_replace_rule" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EWPDS_replace_rule" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EWPDS_replace_rule" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EWPDS_replace_rule" "', argument " "5"" of type '" "wali::Key""'");
  } 
  arg5 = static_cast< wali::Key >(val5);
  ecode6 = SWIG_AsVal_size_t(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "EWPDS_replace_rule" "', argument " "6"" of type '" "wali::Key""'");
  } 
  arg6 = static_cast< wali::Key >(val6);
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "EWPDS_replace_rule" "', argument " "7"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EWPDS_replace_rule" "', argument " "7"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  result = (bool)(arg1)->replace_rule(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EWPDS_replace_rule__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::ewpds::EWPDS *arg1 = (wali::wpds::ewpds::EWPDS *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  wali::Key arg5 ;
  wali::Key arg6 ;
  wali::sem_elem_t arg7 ;
  merge_fn_t arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  size_t val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:EWPDS_replace_rule",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EWPDS_replace_rule" "', argument " "1"" of type '" "wali::wpds::ewpds::EWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::ewpds::EWPDS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EWPDS_replace_rule" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EWPDS_replace_rule" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EWPDS_replace_rule" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EWPDS_replace_rule" "', argument " "5"" of type '" "wali::Key""'");
  } 
  arg5 = static_cast< wali::Key >(val5);
  ecode6 = SWIG_AsVal_size_t(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "EWPDS_replace_rule" "', argument " "6"" of type '" "wali::Key""'");
  } 
  arg6 = static_cast< wali::Key >(val6);
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "EWPDS_replace_rule" "', argument " "7"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EWPDS_replace_rule" "', argument " "7"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_merge_fn_t,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "EWPDS_replace_rule" "', argument " "8"" of type '" "merge_fn_t""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EWPDS_replace_rule" "', argument " "8"" of type '" "merge_fn_t""'");
    } else {
      merge_fn_t * temp = reinterpret_cast< merge_fn_t * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  result = (bool)(arg1)->replace_rule(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EWPDS_prestar__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::ewpds::EWPDS *arg1 = (wali::wpds::ewpds::EWPDS *) 0 ;
  wali::wpds::ewpds::WFA *arg2 = 0 ;
  wali::wpds::ewpds::WFA *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EWPDS_prestar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EWPDS_prestar" "', argument " "1"" of type '" "wali::wpds::ewpds::EWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::ewpds::EWPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EWPDS_prestar" "', argument " "2"" of type '" "wali::wpds::ewpds::WFA const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EWPDS_prestar" "', argument " "2"" of type '" "wali::wpds::ewpds::WFA const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wpds::ewpds::WFA * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__wfa__WFA,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EWPDS_prestar" "', argument " "3"" of type '" "wali::wpds::ewpds::WFA &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EWPDS_prestar" "', argument " "3"" of type '" "wali::wpds::ewpds::WFA &""'"); 
  }
  arg3 = reinterpret_cast< wali::wpds::ewpds::WFA * >(argp3);
  (arg1)->prestar((wali::wpds::ewpds::WFA const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EWPDS_prestar__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::ewpds::EWPDS *arg1 = (wali::wpds::ewpds::EWPDS *) 0 ;
  wali::wfa::WFA *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::wfa::WFA result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EWPDS_prestar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EWPDS_prestar" "', argument " "1"" of type '" "wali::wpds::ewpds::EWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::ewpds::EWPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EWPDS_prestar" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EWPDS_prestar" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::WFA * >(argp2);
  result = (arg1)->prestar((wali::wfa::WFA const &)*arg2);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA(static_cast< const wali::wfa::WFA& >(result))), SWIGTYPE_p_wali__wfa__WFA, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EWPDS_prestar(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__wfa__WFA, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EWPDS_prestar__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__wfa__WFA, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_EWPDS_prestar__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EWPDS_prestar'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wpds::ewpds::EWPDS::prestar(wali::wpds::ewpds::WFA const &,wali::wpds::ewpds::WFA &)\n"
    "    wali::wpds::ewpds::EWPDS::prestar(wali::wfa::WFA const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EWPDS_marshall(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::ewpds::EWPDS *arg1 = (wali::wpds::ewpds::EWPDS *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EWPDS_marshall",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EWPDS_marshall" "', argument " "1"" of type '" "wali::wpds::ewpds::EWPDS const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::ewpds::EWPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EWPDS_marshall" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EWPDS_marshall" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (std::ostream *) &((wali::wpds::ewpds::EWPDS const *)arg1)->marshall(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EWPDS___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::ewpds::EWPDS *arg1 = (wali::wpds::ewpds::EWPDS *) 0 ;
  wali::wfa::ITrans *arg2 = (wali::wfa::ITrans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EWPDS___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EWPDS___call__" "', argument " "1"" of type '" "wali::wpds::ewpds::EWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::ewpds::EWPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__wfa__ITrans, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EWPDS___call__" "', argument " "2"" of type '" "wali::wfa::ITrans const *""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::ITrans * >(argp2);
  (arg1)->operator ()((wali::wfa::ITrans const *)arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EWPDS_lookup_rule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::ewpds::EWPDS *arg1 = (wali::wpds::ewpds::EWPDS *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  wali::wpds::rule_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:EWPDS_lookup_rule",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EWPDS_lookup_rule" "', argument " "1"" of type '" "wali::wpds::ewpds::EWPDS const *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::ewpds::EWPDS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EWPDS_lookup_rule" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EWPDS_lookup_rule" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EWPDS_lookup_rule" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  result = ((wali::wpds::ewpds::EWPDS const *)arg1)->lookup_rule(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new wali::wpds::rule_t(static_cast< const wali::wpds::rule_t& >(result))), SWIGTYPE_p_wali__wpds__rule_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EWPDS_replace_rule__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::ewpds::EWPDS *arg1 = (wali::wpds::ewpds::EWPDS *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  wali::sem_elem_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:EWPDS_replace_rule",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EWPDS_replace_rule" "', argument " "1"" of type '" "wali::wpds::ewpds::EWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::ewpds::EWPDS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EWPDS_replace_rule" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EWPDS_replace_rule" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EWPDS_replace_rule" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "EWPDS_replace_rule" "', argument " "5"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EWPDS_replace_rule" "', argument " "5"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (bool)(arg1)->replace_rule(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EWPDS_replace_rule__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::ewpds::EWPDS *arg1 = (wali::wpds::ewpds::EWPDS *) 0 ;
  wali::Key arg2 ;
  wali::Key arg3 ;
  wali::Key arg4 ;
  wali::Key arg5 ;
  wali::sem_elem_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:EWPDS_replace_rule",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EWPDS_replace_rule" "', argument " "1"" of type '" "wali::wpds::ewpds::EWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::ewpds::EWPDS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EWPDS_replace_rule" "', argument " "2"" of type '" "wali::Key""'");
  } 
  arg2 = static_cast< wali::Key >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EWPDS_replace_rule" "', argument " "3"" of type '" "wali::Key""'");
  } 
  arg3 = static_cast< wali::Key >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "EWPDS_replace_rule" "', argument " "4"" of type '" "wali::Key""'");
  } 
  arg4 = static_cast< wali::Key >(val4);
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "EWPDS_replace_rule" "', argument " "5"" of type '" "wali::Key""'");
  } 
  arg5 = static_cast< wali::Key >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "EWPDS_replace_rule" "', argument " "6"" of type '" "wali::sem_elem_t""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EWPDS_replace_rule" "', argument " "6"" of type '" "wali::sem_elem_t""'");
    } else {
      wali::sem_elem_t * temp = reinterpret_cast< wali::sem_elem_t * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  result = (bool)(arg1)->replace_rule(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EWPDS_replace_rule(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_EWPDS_replace_rule__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_EWPDS_replace_rule__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_size_t(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_EWPDS_replace_rule__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_size_t(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_merge_fn_t, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_EWPDS_replace_rule__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'EWPDS_replace_rule'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wpds::ewpds::EWPDS::replace_rule(wali::Key,wali::Key,wali::Key,wali::Key,wali::Key,wali::sem_elem_t)\n"
    "    wali::wpds::ewpds::EWPDS::replace_rule(wali::Key,wali::Key,wali::Key,wali::Key,wali::Key,wali::sem_elem_t,merge_fn_t)\n"
    "    wali::wpds::ewpds::EWPDS::replace_rule(wali::Key,wali::Key,wali::Key,wali::sem_elem_t)\n"
    "    wali::wpds::ewpds::EWPDS::replace_rule(wali::Key,wali::Key,wali::Key,wali::Key,wali::sem_elem_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EWPDS___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::ewpds::EWPDS *arg1 = (wali::wpds::ewpds::EWPDS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EWPDS___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__ewpds__EWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EWPDS___str__" "', argument " "1"" of type '" "wali::wpds::ewpds::EWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::ewpds::EWPDS * >(argp1);
  result = (PyObject *)wali_wpds_ewpds_EWPDS___str__(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EWPDS_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wali__wpds__ewpds__EWPDS, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_FWPDS_xmltag_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FWPDS_xmltag is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FWPDS_xmltag_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(wali::wpds::fwpds::FWPDS::XMLTag));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_FWPDS__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::fwpds::FWPDS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FWPDS")) SWIG_fail;
  result = (wali::wpds::fwpds::FWPDS *)new wali::wpds::fwpds::FWPDS();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wpds__fwpds__FWPDS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FWPDS__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wpds::fwpds::FWPDS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FWPDS",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FWPDS" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (wali::wpds::fwpds::FWPDS *)new wali::wpds::fwpds::FWPDS(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wpds__fwpds__FWPDS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FWPDS__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< wali::ref_ptr< wali::wpds::Wrapper > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wpds::fwpds::FWPDS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FWPDS",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wali__ref_ptrT_wali__wpds__Wrapper_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FWPDS" "', argument " "1"" of type '" "wali::ref_ptr< wali::wpds::Wrapper >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FWPDS" "', argument " "1"" of type '" "wali::ref_ptr< wali::wpds::Wrapper >""'");
    } else {
      wali::ref_ptr< wali::wpds::Wrapper > * temp = reinterpret_cast< wali::ref_ptr< wali::wpds::Wrapper > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (wali::wpds::fwpds::FWPDS *)new wali::wpds::fwpds::FWPDS(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wpds__fwpds__FWPDS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FWPDS__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::fwpds::FWPDS *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::wpds::fwpds::FWPDS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FWPDS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_wali__wpds__fwpds__FWPDS,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FWPDS" "', argument " "1"" of type '" "wali::wpds::fwpds::FWPDS const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FWPDS" "', argument " "1"" of type '" "wali::wpds::fwpds::FWPDS const &""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::fwpds::FWPDS * >(argp1);
  result = (wali::wpds::fwpds::FWPDS *)new wali::wpds::fwpds::FWPDS((wali::wpds::fwpds::FWPDS const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__wpds__fwpds__FWPDS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FWPDS(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FWPDS__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wali__ref_ptrT_wali__wpds__Wrapper_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FWPDS__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_wali__wpds__fwpds__FWPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FWPDS__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FWPDS__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FWPDS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wpds::fwpds::FWPDS::FWPDS()\n"
    "    wali::wpds::fwpds::FWPDS::FWPDS(bool)\n"
    "    wali::wpds::fwpds::FWPDS::FWPDS(wali::ref_ptr< wali::wpds::Wrapper >)\n"
    "    wali::wpds::fwpds::FWPDS::FWPDS(wali::wpds::fwpds::FWPDS const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FWPDS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::fwpds::FWPDS *arg1 = (wali::wpds::fwpds::FWPDS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FWPDS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__fwpds__FWPDS, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FWPDS" "', argument " "1"" of type '" "wali::wpds::fwpds::FWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::fwpds::FWPDS * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FWPDS_use_newton(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::fwpds::FWPDS *arg1 = (wali::wpds::fwpds::FWPDS *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FWPDS_use_newton",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__fwpds__FWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FWPDS_use_newton" "', argument " "1"" of type '" "wali::wpds::fwpds::FWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::fwpds::FWPDS * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FWPDS_use_newton" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->useNewton(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FWPDS_is_output_tensored(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::fwpds::FWPDS *arg1 = (wali::wpds::fwpds::FWPDS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FWPDS_is_output_tensored",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__fwpds__FWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FWPDS_is_output_tensored" "', argument " "1"" of type '" "wali::wpds::fwpds::FWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::fwpds::FWPDS * >(argp1);
  result = (bool)(arg1)->isOutputTensored();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FWPDS_prestar__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::fwpds::FWPDS *arg1 = (wali::wpds::fwpds::FWPDS *) 0 ;
  wali::wfa::WFA *arg2 = 0 ;
  wali::wfa::WFA *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FWPDS_prestar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__fwpds__FWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FWPDS_prestar" "', argument " "1"" of type '" "wali::wpds::fwpds::FWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::fwpds::FWPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FWPDS_prestar" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FWPDS_prestar" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::WFA * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__wfa__WFA,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FWPDS_prestar" "', argument " "3"" of type '" "wali::wfa::WFA &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FWPDS_prestar" "', argument " "3"" of type '" "wali::wfa::WFA &""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::WFA * >(argp3);
  (arg1)->prestar((wali::wfa::WFA const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FWPDS_prestar__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::fwpds::FWPDS *arg1 = (wali::wpds::fwpds::FWPDS *) 0 ;
  wali::wfa::WFA *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::wfa::WFA result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FWPDS_prestar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__fwpds__FWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FWPDS_prestar" "', argument " "1"" of type '" "wali::wpds::fwpds::FWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::fwpds::FWPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FWPDS_prestar" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FWPDS_prestar" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::WFA * >(argp2);
  result = (arg1)->prestar((wali::wfa::WFA const &)*arg2);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA(static_cast< const wali::wfa::WFA& >(result))), SWIGTYPE_p_wali__wfa__WFA, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FWPDS_prestar(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__fwpds__FWPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__wfa__WFA, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FWPDS_prestar__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__fwpds__FWPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__wfa__WFA, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FWPDS_prestar__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FWPDS_prestar'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wpds::fwpds::FWPDS::prestar(wali::wfa::WFA const &,wali::wfa::WFA &)\n"
    "    wali::wpds::fwpds::FWPDS::prestar(wali::wfa::WFA const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FWPDS_poststar__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::fwpds::FWPDS *arg1 = (wali::wpds::fwpds::FWPDS *) 0 ;
  wali::wfa::WFA *arg2 = 0 ;
  wali::wfa::WFA *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FWPDS_poststar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__fwpds__FWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FWPDS_poststar" "', argument " "1"" of type '" "wali::wpds::fwpds::FWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::fwpds::FWPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FWPDS_poststar" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FWPDS_poststar" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::WFA * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__wfa__WFA,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FWPDS_poststar" "', argument " "3"" of type '" "wali::wfa::WFA &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FWPDS_poststar" "', argument " "3"" of type '" "wali::wfa::WFA &""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::WFA * >(argp3);
  (arg1)->poststar((wali::wfa::WFA const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FWPDS_poststar__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::fwpds::FWPDS *arg1 = (wali::wpds::fwpds::FWPDS *) 0 ;
  wali::wfa::WFA *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::wfa::WFA result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FWPDS_poststar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__fwpds__FWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FWPDS_poststar" "', argument " "1"" of type '" "wali::wpds::fwpds::FWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::fwpds::FWPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FWPDS_poststar" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FWPDS_poststar" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::WFA * >(argp2);
  result = (arg1)->poststar((wali::wfa::WFA const &)*arg2);
  resultobj = SWIG_NewPointerObj((new wali::wfa::WFA(static_cast< const wali::wfa::WFA& >(result))), SWIGTYPE_p_wali__wfa__WFA, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FWPDS_poststar(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__fwpds__FWPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__wfa__WFA, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FWPDS_poststar__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wali__wpds__fwpds__FWPDS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_wali__wfa__WFA, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_wali__wfa__WFA, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FWPDS_poststar__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FWPDS_poststar'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wali::wpds::fwpds::FWPDS::poststar(wali::wfa::WFA const &,wali::wfa::WFA &)\n"
    "    wali::wpds::fwpds::FWPDS::poststar(wali::wfa::WFA const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FWPDS_poststar_igr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::fwpds::FWPDS *arg1 = (wali::wpds::fwpds::FWPDS *) 0 ;
  wali::wfa::WFA *arg2 = 0 ;
  wali::wfa::WFA *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FWPDS_poststar_igr",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__fwpds__FWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FWPDS_poststar_igr" "', argument " "1"" of type '" "wali::wpds::fwpds::FWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::fwpds::FWPDS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_wali__wfa__WFA,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FWPDS_poststar_igr" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FWPDS_poststar_igr" "', argument " "2"" of type '" "wali::wfa::WFA const &""'"); 
  }
  arg2 = reinterpret_cast< wali::wfa::WFA * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_wali__wfa__WFA,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FWPDS_poststar_igr" "', argument " "3"" of type '" "wali::wfa::WFA &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FWPDS_poststar_igr" "', argument " "3"" of type '" "wali::wfa::WFA &""'"); 
  }
  arg3 = reinterpret_cast< wali::wfa::WFA * >(argp3);
  (arg1)->poststarIGR((wali::wfa::WFA const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FWPDS_top_down_eval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::wpds::fwpds::FWPDS *arg1 = (wali::wpds::fwpds::FWPDS *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FWPDS_top_down_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__wpds__fwpds__FWPDS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FWPDS_top_down_eval" "', argument " "1"" of type '" "wali::wpds::fwpds::FWPDS *""'"); 
  }
  arg1 = reinterpret_cast< wali::wpds::fwpds::FWPDS * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FWPDS_top_down_eval" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->topDownEval(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FWPDS_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wali__wpds__fwpds__FWPDS, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Reach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::Reach *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Reach",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Reach" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (wali::Reach *)new wali::Reach(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wali__Reach, SWIG_POINTER_NEW |  0 );
  result->count++;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Reach(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::Reach *arg1 = (wali::Reach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Reach",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__Reach, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Reach" "', argument " "1"" of type '" "wali::Reach *""'"); 
  }
  arg1 = reinterpret_cast< wali::Reach * >(argp1);
  arg1->count--;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_one(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::Reach *arg1 = (wali::Reach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Reach_one",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__Reach, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_one" "', argument " "1"" of type '" "wali::Reach const *""'"); 
  }
  arg1 = reinterpret_cast< wali::Reach * >(argp1);
  result = ((wali::Reach const *)arg1)->one();
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::Reach *arg1 = (wali::Reach *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Reach_zero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__Reach, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_zero" "', argument " "1"" of type '" "wali::Reach const *""'"); 
  }
  arg1 = reinterpret_cast< wali::Reach * >(argp1);
  result = ((wali::Reach const *)arg1)->zero();
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_extend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::Reach *arg1 = (wali::Reach *) 0 ;
  wali::SemElem *arg2 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Reach_extend",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__Reach, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_extend" "', argument " "1"" of type '" "wali::Reach *""'"); 
  }
  arg1 = reinterpret_cast< wali::Reach * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reach_extend" "', argument " "2"" of type '" "wali::SemElem *""'"); 
  }
  arg2 = reinterpret_cast< wali::SemElem * >(argp2);
  result = (arg1)->extend(arg2);
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_combine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::Reach *arg1 = (wali::Reach *) 0 ;
  wali::SemElem *arg2 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Reach_combine",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__Reach, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_combine" "', argument " "1"" of type '" "wali::Reach *""'"); 
  }
  arg1 = reinterpret_cast< wali::Reach * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reach_combine" "', argument " "2"" of type '" "wali::SemElem *""'"); 
  }
  arg2 = reinterpret_cast< wali::SemElem * >(argp2);
  result = (arg1)->combine(arg2);
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::Reach *arg1 = (wali::Reach *) 0 ;
  wali::SemElem *arg2 = (wali::SemElem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Reach_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__Reach, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_equal" "', argument " "1"" of type '" "wali::Reach const *""'"); 
  }
  arg1 = reinterpret_cast< wali::Reach * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_wali__SemElem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reach_equal" "', argument " "2"" of type '" "wali::SemElem *""'"); 
  }
  arg2 = reinterpret_cast< wali::SemElem * >(argp2);
  result = (bool)((wali::Reach const *)arg1)->equal(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reach_from_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  wali::Reach *arg1 = (wali::Reach *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  wali::sem_elem_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Reach_from_string",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_wali__Reach, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reach_from_string" "', argument " "1"" of type '" "wali::Reach const *""'"); 
  }
  arg1 = reinterpret_cast< wali::Reach * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reach_from_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reach_from_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((wali::Reach const *)arg1)->from_string((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj((new wali::sem_elem_t(static_cast< const wali::sem_elem_t& >(result))), SWIGTYPE_p_wali__ref_ptrT_wali__SemElem_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN int Swig_var_Reach_num_reaches_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""wali::Reach::numReaches""' of type '""int""'");
    }
    wali::Reach::numReaches = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Reach_num_reaches_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(wali::Reach::numReaches));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Reach_num_reaches_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Reach_num_reaches_get();
}


SWIGINTERN PyObject *_wrap_Reach_num_reaches_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Reach_num_reaches_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *Reach_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_wali__Reach, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Printable", _wrap_delete_Printable, METH_VARARGS, (char *)"\n"
		"delete_Printable(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::Printable *\n"
		"\n"
		""},
	 { (char *)"Printable_to_string", _wrap_Printable_to_string, METH_VARARGS, (char *)"\n"
		"Printable_to_string(self) -> std::string\n"
		"\n"
		"Parameters:\n"
		"    self: wali::Printable const *\n"
		"\n"
		""},
	 { (char *)"Printable_toString", _wrap_Printable_toString, METH_VARARGS, (char *)"\n"
		"Printable_toString(self) -> std::string\n"
		"\n"
		"Parameters:\n"
		"    self: wali::Printable const *\n"
		"\n"
		""},
	 { (char *)"Printable_swigregister", Printable_swigregister, METH_VARARGS, NULL},
	 { (char *)"get_key_space", _wrap_get_key_space, METH_VARARGS, (char *)"get_key_space() -> wali::KeySpace *"},
	 { (char *)"clear_keyspace", _wrap_clear_keyspace, METH_VARARGS, (char *)"clear_keyspace()"},
	 { (char *)"get_key", _wrap_get_key, METH_VARARGS, (char *)"\n"
		"get_key(ks) -> wali::Key\n"
		"\n"
		"Parameters:\n"
		"    ks: wali::key_src_t\n"
		"\n"
		"get_key(s) -> wali::Key\n"
		"\n"
		"Parameters:\n"
		"    s: std::string const &\n"
		"\n"
		"get_key(s) -> wali::Key\n"
		"\n"
		"Parameters:\n"
		"    s: char const *\n"
		"\n"
		"get_key(i) -> wali::Key\n"
		"\n"
		"Parameters:\n"
		"    i: int\n"
		"\n"
		"get_key(k1, k2) -> wali::Key\n"
		"\n"
		"Parameters:\n"
		"    k1: wali::Key\n"
		"    k2: wali::Key\n"
		"\n"
		"get_key(ks) -> wali::Key\n"
		"\n"
		"Parameters:\n"
		"    ks: std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > >\n"
		"\n"
		""},
	 { (char *)"get_key_source", _wrap_get_key_source, METH_VARARGS, (char *)"\n"
		"get_key_source(k) -> wali::key_src_t\n"
		"\n"
		"Parameters:\n"
		"    k: wali::Key\n"
		"\n"
		""},
	 { (char *)"print_key", _wrap_print_key, METH_VARARGS, (char *)"\n"
		"print_key(o, k, abbreviate=False) -> std::ostream\n"
		"\n"
		"Parameters:\n"
		"    o: std::ostream &\n"
		"    k: wali::Key\n"
		"    abbreviate: bool\n"
		"\n"
		"print_key(o, k) -> std::ostream &\n"
		"\n"
		"Parameters:\n"
		"    o: std::ostream &\n"
		"    k: wali::Key\n"
		"\n"
		""},
	 { (char *)"key_2str", _wrap_key_2str, METH_VARARGS, (char *)"\n"
		"key_2str(k) -> std::string\n"
		"\n"
		"Parameters:\n"
		"    k: wali::Key\n"
		"\n"
		""},
	 { (char *)"get_epsilon_key", _wrap_get_epsilon_key, METH_VARARGS, (char *)"get_epsilon_key() -> wali::Key"},
	 { (char *)"delete_KeySource", _wrap_delete_KeySource, METH_VARARGS, (char *)"\n"
		"delete_KeySource(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::KeySource *\n"
		"\n"
		""},
	 { (char *)"KeySource_equal", _wrap_KeySource_equal, METH_VARARGS, (char *)"\n"
		"KeySource_equal(self, rhs) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::KeySource *\n"
		"    rhs: wali::KeySource *\n"
		"\n"
		""},
	 { (char *)"KeySource_hash", _wrap_KeySource_hash, METH_VARARGS, (char *)"\n"
		"KeySource_hash(self) -> size_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::KeySource const *\n"
		"\n"
		""},
	 { (char *)"KeySource_swigregister", KeySource_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GenKeySource", _wrap_new_GenKeySource, METH_VARARGS, (char *)"\n"
		"new_GenKeySource(g, k) -> GenKeySource\n"
		"\n"
		"Parameters:\n"
		"    g: size_t\n"
		"    k: wali::Key\n"
		"\n"
		""},
	 { (char *)"delete_GenKeySource", _wrap_delete_GenKeySource, METH_VARARGS, (char *)"\n"
		"delete_GenKeySource(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::GenKeySource *\n"
		"\n"
		""},
	 { (char *)"GenKeySource_equal", _wrap_GenKeySource_equal, METH_VARARGS, (char *)"\n"
		"GenKeySource_equal(self, rhs) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::GenKeySource *\n"
		"    rhs: wali::KeySource *\n"
		"\n"
		""},
	 { (char *)"GenKeySource_hash", _wrap_GenKeySource_hash, METH_VARARGS, (char *)"\n"
		"GenKeySource_hash(self) -> size_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::GenKeySource const *\n"
		"\n"
		""},
	 { (char *)"GenKeySource_get_generation", _wrap_GenKeySource_get_generation, METH_VARARGS, (char *)"\n"
		"GenKeySource_get_generation(self) -> size_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::GenKeySource const *\n"
		"\n"
		""},
	 { (char *)"GenKeySource_get_key", _wrap_GenKeySource_get_key, METH_VARARGS, (char *)"\n"
		"GenKeySource_get_key(self) -> wali::Key\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::GenKeySource const *\n"
		"\n"
		""},
	 { (char *)"GenKeySource_swigregister", GenKeySource_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_SemElem", _wrap_delete_SemElem, METH_VARARGS, (char *)"\n"
		"delete_SemElem(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElem *\n"
		"\n"
		""},
	 { (char *)"SemElem_one", _wrap_SemElem_one, METH_VARARGS, (char *)"\n"
		"SemElem_one(self) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElem const *\n"
		"\n"
		""},
	 { (char *)"SemElem_zero", _wrap_SemElem_zero, METH_VARARGS, (char *)"\n"
		"SemElem_zero(self) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElem const *\n"
		"\n"
		""},
	 { (char *)"SemElem_marshall_weight", _wrap_SemElem_marshall_weight, METH_VARARGS, (char *)"\n"
		"SemElem_marshall_weight(self, o) -> std::ostream &\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElem const *\n"
		"    o: std::ostream &\n"
		"\n"
		""},
	 { (char *)"SemElem_quasi_one", _wrap_SemElem_quasi_one, METH_VARARGS, (char *)"\n"
		"SemElem_quasi_one(self) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElem const *\n"
		"\n"
		""},
	 { (char *)"SemElem_star", _wrap_SemElem_star, METH_VARARGS, (char *)"\n"
		"SemElem_star(self) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElem *\n"
		"\n"
		""},
	 { (char *)"SemElem_extend", _wrap_SemElem_extend, METH_VARARGS, (char *)"\n"
		"extend(se) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    se: wali::SemElem *\n"
		"\n"
		"SemElem_extend(self, se) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElem *\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"SemElem_combine", _wrap_SemElem_combine, METH_VARARGS, (char *)"\n"
		"combine(se) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    se: wali::SemElem *\n"
		"\n"
		"SemElem_combine(self, se) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElem *\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"SemElem_equal", _wrap_SemElem_equal, METH_VARARGS, (char *)"\n"
		"equal(se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    se: wali::SemElem *\n"
		"\n"
		"SemElem_equal(self, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElem const *\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"SemElem_under_approximates", _wrap_SemElem_under_approximates, METH_VARARGS, (char *)"\n"
		"under_approximates(that) -> bool\n"
		"\n"
		"Parameters:\n"
		"    that: wali::SemElem *\n"
		"\n"
		"SemElem_under_approximates(self, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElem *\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"SemElem_diff", _wrap_SemElem_diff, METH_VARARGS, (char *)"\n"
		"diff(se) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    se: wali::SemElem *\n"
		"\n"
		"SemElem_diff(self, se) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElem *\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"SemElem_delta", _wrap_SemElem_delta, METH_VARARGS, (char *)"\n"
		"delta(se) -> std::pair< wali::sem_elem_t,wali::sem_elem_t >\n"
		"\n"
		"Parameters:\n"
		"    se: wali::SemElem *\n"
		"\n"
		"SemElem_delta(self, se) -> std::pair< wali::sem_elem_t,wali::sem_elem_t >\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElem *\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"SemElem_extend_and_diff", _wrap_SemElem_extend_and_diff, METH_VARARGS, (char *)"\n"
		"SemElem_extend_and_diff(self, next, subtrahend) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElem *\n"
		"    next: wali::sem_elem_t\n"
		"    subtrahend: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"SemElem_container_less_than", _wrap_SemElem_container_less_than, METH_VARARGS, (char *)"\n"
		"container_less_than(other) -> bool\n"
		"\n"
		"Parameters:\n"
		"    other: wali::SemElem const *\n"
		"\n"
		"SemElem_container_less_than(self, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElem const *\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"SemElem_hash", _wrap_SemElem_hash, METH_VARARGS, (char *)"\n"
		"SemElem_hash(self) -> size_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElem const *\n"
		"\n"
		""},
	 { (char *)"SemElem_print_typename", _wrap_SemElem_print_typename, METH_VARARGS, (char *)"\n"
		"SemElem_print_typename(self, os) -> std::ostream &\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElem const *\n"
		"    os: std::ostream &\n"
		"\n"
		""},
	 { (char *)"SemElem_to_string_typename", _wrap_SemElem_to_string_typename, METH_VARARGS, (char *)"\n"
		"SemElem_to_string_typename(self) -> std::string\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElem const *\n"
		"\n"
		""},
	 { (char *)"SemElem_getuserdata", _wrap_SemElem_getuserdata, METH_VARARGS, (char *)"\n"
		"SemElem_getuserdata(self) -> PyObject *\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElem *\n"
		"\n"
		""},
	 { (char *)"SemElem___str__", _wrap_SemElem___str__, METH_VARARGS, (char *)"\n"
		"SemElem___str__(self) -> PyObject *\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElem *\n"
		"\n"
		""},
	 { (char *)"SemElem_swigregister", SemElem_swigregister, METH_VARARGS, NULL},
	 { (char *)"test_semelem_impl", _wrap_test_semelem_impl, METH_VARARGS, (char *)"\n"
		"test_semelem_impl(x)\n"
		"\n"
		"Parameters:\n"
		"    x: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"SemElemRefPtrContainerLessThan___call__", _wrap_SemElemRefPtrContainerLessThan___call__, METH_VARARGS, (char *)"\n"
		"SemElemRefPtrContainerLessThan___call__(self, left, right) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElemRefPtrContainerLessThan const *\n"
		"    left: wali::sem_elem_t\n"
		"    right: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"new_SemElemRefPtrContainerLessThan", _wrap_new_SemElemRefPtrContainerLessThan, METH_VARARGS, (char *)"new_SemElemRefPtrContainerLessThan() -> SemElemRefPtrContainerLessThan"},
	 { (char *)"delete_SemElemRefPtrContainerLessThan", _wrap_delete_SemElemRefPtrContainerLessThan, METH_VARARGS, (char *)"\n"
		"delete_SemElemRefPtrContainerLessThan(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElemRefPtrContainerLessThan *\n"
		"\n"
		""},
	 { (char *)"SemElemRefPtrContainerLessThan_swigregister", SemElemRefPtrContainerLessThan_swigregister, METH_VARARGS, NULL},
	 { (char *)"SemElemRefPtrHash___call__", _wrap_SemElemRefPtrHash___call__, METH_VARARGS, (char *)"\n"
		"SemElemRefPtrHash___call__(self, se) -> size_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElemRefPtrHash const *\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"new_SemElemRefPtrHash", _wrap_new_SemElemRefPtrHash, METH_VARARGS, (char *)"new_SemElemRefPtrHash() -> SemElemRefPtrHash"},
	 { (char *)"delete_SemElemRefPtrHash", _wrap_delete_SemElemRefPtrHash, METH_VARARGS, (char *)"\n"
		"delete_SemElemRefPtrHash(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElemRefPtrHash *\n"
		"\n"
		""},
	 { (char *)"SemElemRefPtrHash_swigregister", SemElemRefPtrHash_swigregister, METH_VARARGS, NULL},
	 { (char *)"SemElemRefPtrEqual___call__", _wrap_SemElemRefPtrEqual___call__, METH_VARARGS, (char *)"\n"
		"SemElemRefPtrEqual___call__(self, left, right) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElemRefPtrEqual const *\n"
		"    left: wali::sem_elem_t\n"
		"    right: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"new_SemElemRefPtrEqual", _wrap_new_SemElemRefPtrEqual, METH_VARARGS, (char *)"new_SemElemRefPtrEqual() -> SemElemRefPtrEqual"},
	 { (char *)"delete_SemElemRefPtrEqual", _wrap_delete_SemElemRefPtrEqual, METH_VARARGS, (char *)"\n"
		"delete_SemElemRefPtrEqual(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::SemElemRefPtrEqual *\n"
		"\n"
		""},
	 { (char *)"SemElemRefPtrEqual_swigregister", SemElemRefPtrEqual_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SemElemPtr", _wrap_new_SemElemPtr, METH_VARARGS, (char *)"\n"
		"SemElemPtr(t=None)\n"
		"\n"
		"Parameters:\n"
		"    t: wali::SemElem *\n"
		"\n"
		"SemElemPtr()\n"
		"new_SemElemPtr(rp) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    rp: wali::ref_ptr< wali::SemElem > const &\n"
		"\n"
		""},
	 { (char *)"delete_SemElemPtr", _wrap_delete_SemElemPtr, METH_VARARGS, (char *)"\n"
		"delete_SemElemPtr(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > *\n"
		"\n"
		""},
	 { (char *)"SemElemPtr___eq__", _wrap_SemElemPtr___eq__, METH_VARARGS, (char *)"\n"
		"SemElemPtr___eq__(self, that) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > const *\n"
		"    that: wali::ref_ptr< wali::SemElem > const &\n"
		"\n"
		""},
	 { (char *)"SemElemPtr___ne__", _wrap_SemElemPtr___ne__, METH_VARARGS, (char *)"\n"
		"SemElemPtr___ne__(self, that) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > const *\n"
		"    that: wali::ref_ptr< wali::SemElem > const &\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_get_ptr", _wrap_SemElemPtr_get_ptr, METH_VARARGS, (char *)"\n"
		"SemElemPtr_get_ptr(self) -> SemElem\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > const *\n"
		"\n"
		""},
	 { (char *)"SemElemPtr___deref__", _wrap_SemElemPtr___deref__, METH_VARARGS, (char *)"\n"
		"SemElemPtr___deref__(self) -> SemElem\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > const *\n"
		"\n"
		""},
	 { (char *)"SemElemPtr___ref__", _wrap_SemElemPtr___ref__, METH_VARARGS, (char *)"\n"
		"SemElemPtr___ref__(self) -> SemElem\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > const *\n"
		"\n"
		""},
	 { (char *)"SemElemPtr___lt__", _wrap_SemElemPtr___lt__, METH_VARARGS, (char *)"\n"
		"SemElemPtr___lt__(self, that) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > const *\n"
		"    that: wali::ref_ptr< wali::SemElem > const &\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_is_empty", _wrap_SemElemPtr_is_empty, METH_VARARGS, (char *)"\n"
		"SemElemPtr_is_empty(self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > const *\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_is_valid", _wrap_SemElemPtr_is_valid, METH_VARARGS, (char *)"\n"
		"SemElemPtr_is_valid(self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > const *\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_xmltag_get", _wrap_SemElemPtr_xmltag_get, METH_VARARGS, (char *)"\n"
		"SemElemPtr_xmltag_get(self) -> std::string const &\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > *\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_one", _wrap_SemElemPtr_one, METH_VARARGS, (char *)"\n"
		"SemElemPtr_one(self) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > const *\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_zero", _wrap_SemElemPtr_zero, METH_VARARGS, (char *)"\n"
		"SemElemPtr_zero(self) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > const *\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_extend", _wrap_SemElemPtr_extend, METH_VARARGS, (char *)"\n"
		"extend(se) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    se: wali::SemElem *\n"
		"\n"
		"SemElemPtr_extend(self, se) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > *\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_combine", _wrap_SemElemPtr_combine, METH_VARARGS, (char *)"\n"
		"combine(se) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    se: wali::SemElem *\n"
		"\n"
		"SemElemPtr_combine(self, se) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > *\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_equal", _wrap_SemElemPtr_equal, METH_VARARGS, (char *)"\n"
		"equal(se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    se: wali::SemElem *\n"
		"\n"
		"SemElemPtr_equal(self, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > const *\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_under_approximates", _wrap_SemElemPtr_under_approximates, METH_VARARGS, (char *)"\n"
		"under_approximates(that) -> bool\n"
		"\n"
		"Parameters:\n"
		"    that: wali::SemElem *\n"
		"\n"
		"SemElemPtr_under_approximates(self, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > *\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_marshall_weight", _wrap_SemElemPtr_marshall_weight, METH_VARARGS, (char *)"\n"
		"SemElemPtr_marshall_weight(self, o) -> std::ostream &\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > const *\n"
		"    o: std::ostream &\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_diff", _wrap_SemElemPtr_diff, METH_VARARGS, (char *)"\n"
		"diff(se) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    se: wali::SemElem *\n"
		"\n"
		"SemElemPtr_diff(self, se) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > *\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_quasi_one", _wrap_SemElemPtr_quasi_one, METH_VARARGS, (char *)"\n"
		"SemElemPtr_quasi_one(self) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > const *\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_delta", _wrap_SemElemPtr_delta, METH_VARARGS, (char *)"\n"
		"delta(se) -> std::pair< wali::sem_elem_t,wali::sem_elem_t >\n"
		"\n"
		"Parameters:\n"
		"    se: wali::SemElem *\n"
		"\n"
		"SemElemPtr_delta(self, se) -> std::pair< wali::sem_elem_t,wali::sem_elem_t >\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > *\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_star", _wrap_SemElemPtr_star, METH_VARARGS, (char *)"\n"
		"SemElemPtr_star(self) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > *\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_extend_and_diff", _wrap_SemElemPtr_extend_and_diff, METH_VARARGS, (char *)"\n"
		"SemElemPtr_extend_and_diff(self, next, subtrahend) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > *\n"
		"    next: wali::sem_elem_t\n"
		"    subtrahend: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_container_less_than", _wrap_SemElemPtr_container_less_than, METH_VARARGS, (char *)"\n"
		"container_less_than(other) -> bool\n"
		"\n"
		"Parameters:\n"
		"    other: wali::SemElem const *\n"
		"\n"
		"SemElemPtr_container_less_than(self, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > const *\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_hash", _wrap_SemElemPtr_hash, METH_VARARGS, (char *)"\n"
		"SemElemPtr_hash(self) -> size_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > const *\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_print_typename", _wrap_SemElemPtr_print_typename, METH_VARARGS, (char *)"\n"
		"SemElemPtr_print_typename(self, os) -> std::ostream &\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > const *\n"
		"    os: std::ostream &\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_to_string_typename", _wrap_SemElemPtr_to_string_typename, METH_VARARGS, (char *)"\n"
		"SemElemPtr_to_string_typename(self) -> std::string\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > const *\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_getuserdata", _wrap_SemElemPtr_getuserdata, METH_VARARGS, (char *)"\n"
		"SemElemPtr_getuserdata(self) -> PyObject *\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > *\n"
		"\n"
		""},
	 { (char *)"SemElemPtr___str__", _wrap_SemElemPtr___str__, METH_VARARGS, (char *)"\n"
		"SemElemPtr___str__(self) -> PyObject *\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > *\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_to_string", _wrap_SemElemPtr_to_string, METH_VARARGS, (char *)"\n"
		"SemElemPtr_to_string(self) -> std::string\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > const *\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_toString", _wrap_SemElemPtr_toString, METH_VARARGS, (char *)"\n"
		"SemElemPtr_toString(self) -> std::string\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< SemElem > const *\n"
		"\n"
		""},
	 { (char *)"SemElemPtr_swigregister", SemElemPtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KeyPair", _wrap_new_KeyPair, METH_VARARGS, (char *)"\n"
		"KeyPair()\n"
		"KeyPair(first, second)\n"
		"\n"
		"Parameters:\n"
		"    first: size_t\n"
		"    second: size_t\n"
		"\n"
		"new_KeyPair(p) -> KeyPair\n"
		"\n"
		"Parameters:\n"
		"    p: std::pair< size_t,size_t > const &\n"
		"\n"
		""},
	 { (char *)"KeyPair_first_set", _wrap_KeyPair_first_set, METH_VARARGS, (char *)"\n"
		"KeyPair_first_set(self, first)\n"
		"\n"
		"Parameters:\n"
		"    self: std::pair< size_t,size_t > *\n"
		"    first: size_t\n"
		"\n"
		""},
	 { (char *)"KeyPair_first_get", _wrap_KeyPair_first_get, METH_VARARGS, (char *)"\n"
		"KeyPair_first_get(self) -> size_t\n"
		"\n"
		"Parameters:\n"
		"    self: std::pair< size_t,size_t > *\n"
		"\n"
		""},
	 { (char *)"KeyPair_second_set", _wrap_KeyPair_second_set, METH_VARARGS, (char *)"\n"
		"KeyPair_second_set(self, second)\n"
		"\n"
		"Parameters:\n"
		"    self: std::pair< size_t,size_t > *\n"
		"    second: size_t\n"
		"\n"
		""},
	 { (char *)"KeyPair_second_get", _wrap_KeyPair_second_get, METH_VARARGS, (char *)"\n"
		"KeyPair_second_get(self) -> size_t\n"
		"\n"
		"Parameters:\n"
		"    self: std::pair< size_t,size_t > *\n"
		"\n"
		""},
	 { (char *)"delete_KeyPair", _wrap_delete_KeyPair, METH_VARARGS, (char *)"\n"
		"delete_KeyPair(self)\n"
		"\n"
		"Parameters:\n"
		"    self: std::pair< size_t,size_t > *\n"
		"\n"
		""},
	 { (char *)"KeyPair_swigregister", KeyPair_swigregister, METH_VARARGS, NULL},
	 { (char *)"strhashfn", _wrap_strhashfn, METH_VARARGS, (char *)"\n"
		"strhashfn(str) -> unsigned long\n"
		"\n"
		"Parameters:\n"
		"    str: char const *\n"
		"\n"
		""},
	 { (char *)"new_KeyPairMap", _wrap_new_KeyPairMap, METH_VARARGS, (char *)"\n"
		"KeyPairMap(the_size=47)\n"
		"\n"
		"Parameters:\n"
		"    the_size: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::size_type\n"
		"\n"
		"KeyPairMap()\n"
		"new_KeyPairMap(hm) -> KeyPairMap\n"
		"\n"
		"Parameters:\n"
		"    hm: wali::HashMap< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > > const &\n"
		"\n"
		""},
	 { (char *)"delete_KeyPairMap", _wrap_delete_KeyPairMap, METH_VARARGS, (char *)"\n"
		"delete_KeyPairMap(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *\n"
		"\n"
		""},
	 { (char *)"KeyPairMap_clear", _wrap_KeyPairMap_clear, METH_VARARGS, (char *)"\n"
		"KeyPairMap_clear(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *\n"
		"\n"
		""},
	 { (char *)"KeyPairMap_size", _wrap_KeyPairMap_size, METH_VARARGS, (char *)"\n"
		"KeyPairMap_size(self) -> wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::size_type\n"
		"\n"
		"Parameters:\n"
		"    self: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *\n"
		"\n"
		""},
	 { (char *)"KeyPairMap_capacity", _wrap_KeyPairMap_capacity, METH_VARARGS, (char *)"\n"
		"KeyPairMap_capacity(self) -> wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::size_type\n"
		"\n"
		"Parameters:\n"
		"    self: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *\n"
		"\n"
		""},
	 { (char *)"KeyPairMap_begin", _wrap_KeyPairMap_begin, METH_VARARGS, (char *)"\n"
		"begin() -> wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator\n"
		"KeyPairMap_begin(self) -> wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator\n"
		"\n"
		"Parameters:\n"
		"    self: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *\n"
		"\n"
		""},
	 { (char *)"KeyPairMap_end", _wrap_KeyPairMap_end, METH_VARARGS, (char *)"\n"
		"end() -> wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator\n"
		"KeyPairMap_end(self) -> wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator\n"
		"\n"
		"Parameters:\n"
		"    self: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *\n"
		"\n"
		""},
	 { (char *)"KeyPairMap_key", _wrap_KeyPairMap_key, METH_VARARGS, (char *)"\n"
		"key(it) -> KeyPair\n"
		"\n"
		"Parameters:\n"
		"    it: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator &\n"
		"\n"
		"KeyPairMap_key(self, it) -> KeyPair const &\n"
		"\n"
		"Parameters:\n"
		"    self: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *\n"
		"    it: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator &\n"
		"\n"
		""},
	 { (char *)"KeyPairMap_value", _wrap_KeyPairMap_value, METH_VARARGS, (char *)"\n"
		"value(it) -> TransSet\n"
		"\n"
		"Parameters:\n"
		"    it: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator &\n"
		"\n"
		"KeyPairMap_value(self, it) -> TransSet const &\n"
		"\n"
		"Parameters:\n"
		"    self: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *\n"
		"    it: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator &\n"
		"\n"
		""},
	 { (char *)"KeyPairMap_data", _wrap_KeyPairMap_data, METH_VARARGS, (char *)"\n"
		"data(it) -> TransSet\n"
		"\n"
		"Parameters:\n"
		"    it: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator &\n"
		"\n"
		"KeyPairMap_data(self, it) -> TransSet const &\n"
		"\n"
		"Parameters:\n"
		"    self: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *\n"
		"    it: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator &\n"
		"\n"
		""},
	 { (char *)"KeyPairMap_print_stats", _wrap_KeyPairMap_print_stats, METH_VARARGS, (char *)"\n"
		"print_stats(o=std::cout)\n"
		"\n"
		"Parameters:\n"
		"    o: std::ostream &\n"
		"\n"
		"KeyPairMap_print_stats(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *\n"
		"\n"
		""},
	 { (char *)"KeyPairMap_insert", _wrap_KeyPairMap_insert, METH_VARARGS, (char *)"\n"
		"insert(k, d) -> std::pair< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator,bool >\n"
		"\n"
		"Parameters:\n"
		"    k: KeyPair const &\n"
		"    d: TransSet const &\n"
		"\n"
		"KeyPairMap_insert(self, arg2) -> std::pair< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator,bool >\n"
		"\n"
		"Parameters:\n"
		"    self: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *\n"
		"    arg2: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::value_type const &\n"
		"\n"
		""},
	 { (char *)"KeyPairMap_find", _wrap_KeyPairMap_find, METH_VARARGS, (char *)"\n"
		"find(arg2) -> wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator\n"
		"\n"
		"Parameters:\n"
		"    arg2: KeyPair const &\n"
		"\n"
		"KeyPairMap_find(self, arg2) -> wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator\n"
		"\n"
		"Parameters:\n"
		"    self: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > const *\n"
		"    arg2: KeyPair const &\n"
		"\n"
		""},
	 { (char *)"KeyPairMap_erase", _wrap_KeyPairMap_erase, METH_VARARGS, (char *)"\n"
		"erase(key_to_erase)\n"
		"\n"
		"Parameters:\n"
		"    key_to_erase: KeyPair const &\n"
		"\n"
		"KeyPairMap_erase(self, it)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *\n"
		"    it: wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator\n"
		"\n"
		""},
	 { (char *)"KeyPairMap_swigregister", KeyPairMap_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PySemElem", _wrap_new_PySemElem, METH_VARARGS, (char *)"\n"
		"new_PySemElem(self) -> PySemElem\n"
		"\n"
		"Parameters:\n"
		"    self: PyObject *\n"
		"\n"
		""},
	 { (char *)"PySemElem_setuserdata", _wrap_PySemElem_setuserdata, METH_VARARGS, (char *)"\n"
		"PySemElem_setuserdata(self, data)\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem *\n"
		"    data: PyObject *\n"
		"\n"
		""},
	 { (char *)"PySemElem_getuserdata", _wrap_PySemElem_getuserdata, METH_VARARGS, (char *)"\n"
		"PySemElem_getuserdata(self) -> PyObject *\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElem___str__", _wrap_PySemElem___str__, METH_VARARGS, (char *)"\n"
		"PySemElem___str__(self) -> std::string\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem const *\n"
		"\n"
		""},
	 { (char *)"PySemElem_pycombine", _wrap_PySemElem_pycombine, METH_VARARGS, (char *)"\n"
		"PySemElem_pycombine(self, se) -> PySemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem const *\n"
		"    se: PySemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElem_combine", _wrap_PySemElem_combine, METH_VARARGS, (char *)"\n"
		"PySemElem_combine(self, se) -> sem_elem_t\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem *\n"
		"    se: SemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElem_pyextend", _wrap_PySemElem_pyextend, METH_VARARGS, (char *)"\n"
		"PySemElem_pyextend(self, se) -> PySemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem const *\n"
		"    se: PySemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElem_extend", _wrap_PySemElem_extend, METH_VARARGS, (char *)"\n"
		"PySemElem_extend(self, se) -> sem_elem_t\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem *\n"
		"    se: SemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElem_pydelta", _wrap_PySemElem_pydelta, METH_VARARGS, (char *)"\n"
		"PySemElem_pydelta(self, se) -> PySemElemPtrPair\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem *\n"
		"    se: PySemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElem_delta", _wrap_PySemElem_delta, METH_VARARGS, (char *)"\n"
		"PySemElem_delta(self, se) -> SemElemPtrPair\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem *\n"
		"    se: SemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElem_pyequal", _wrap_PySemElem_pyequal, METH_VARARGS, (char *)"\n"
		"PySemElem_pyequal(self, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem const *\n"
		"    se: PySemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElem_equal", _wrap_PySemElem_equal, METH_VARARGS, (char *)"\n"
		"PySemElem_equal(self, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem const *\n"
		"    se: SemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElem_pyunder_approximates", _wrap_PySemElem_pyunder_approximates, METH_VARARGS, (char *)"\n"
		"PySemElem_pyunder_approximates(self, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem const *\n"
		"    se: PySemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElem_under_approximates", _wrap_PySemElem_under_approximates, METH_VARARGS, (char *)"\n"
		"PySemElem_under_approximates(self, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem *\n"
		"    se: SemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElem_pystar", _wrap_PySemElem_pystar, METH_VARARGS, (char *)"\n"
		"PySemElem_pystar(self) -> PySemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElem_star", _wrap_PySemElem_star, METH_VARARGS, (char *)"\n"
		"PySemElem_star(self) -> sem_elem_t\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElem_pyextend_and_diff", _wrap_PySemElem_pyextend_and_diff, METH_VARARGS, (char *)"\n"
		"PySemElem_pyextend_and_diff(self, next, subtrahend) -> PySemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem *\n"
		"    next: PySemElem *\n"
		"    subtrahend: PySemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElem_extend_and_diff", _wrap_PySemElem_extend_and_diff, METH_VARARGS, (char *)"\n"
		"PySemElem_extend_and_diff(self, next, subtrahend) -> sem_elem_t\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem *\n"
		"    next: sem_elem_t\n"
		"    subtrahend: sem_elem_t\n"
		"\n"
		""},
	 { (char *)"PySemElem_pydiff", _wrap_PySemElem_pydiff, METH_VARARGS, (char *)"\n"
		"PySemElem_pydiff(self, se) -> PySemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem *\n"
		"    se: PySemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElem_diff", _wrap_PySemElem_diff, METH_VARARGS, (char *)"\n"
		"PySemElem_diff(self, se) -> sem_elem_t\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem *\n"
		"    se: SemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElem_pyone", _wrap_PySemElem_pyone, METH_VARARGS, (char *)"\n"
		"PySemElem_pyone(self) -> PySemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem const *\n"
		"\n"
		""},
	 { (char *)"PySemElem_pyzero", _wrap_PySemElem_pyzero, METH_VARARGS, (char *)"\n"
		"PySemElem_pyzero(self) -> PySemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem const *\n"
		"\n"
		""},
	 { (char *)"PySemElem_one", _wrap_PySemElem_one, METH_VARARGS, (char *)"\n"
		"PySemElem_one(self) -> sem_elem_t\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem const *\n"
		"\n"
		""},
	 { (char *)"PySemElem_zero", _wrap_PySemElem_zero, METH_VARARGS, (char *)"\n"
		"PySemElem_zero(self) -> sem_elem_t\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem const *\n"
		"\n"
		""},
	 { (char *)"delete_PySemElem", _wrap_delete_PySemElem, METH_VARARGS, (char *)"\n"
		"delete_PySemElem(self)\n"
		"\n"
		"Parameters:\n"
		"    self: PySemElem *\n"
		"\n"
		""},
	 { (char *)"disown_PySemElem", _wrap_disown_PySemElem, METH_VARARGS, NULL},
	 { (char *)"PySemElem_swigregister", PySemElem_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SemElemPtrPair", _wrap_new_SemElemPtrPair, METH_VARARGS, (char *)"\n"
		"SemElemPtrPair()\n"
		"SemElemPtrPair(first, second)\n"
		"\n"
		"Parameters:\n"
		"    first: sem_elem_t\n"
		"    second: sem_elem_t\n"
		"\n"
		"new_SemElemPtrPair(p) -> SemElemPtrPair\n"
		"\n"
		"Parameters:\n"
		"    p: std::pair< sem_elem_t,sem_elem_t > const &\n"
		"\n"
		""},
	 { (char *)"SemElemPtrPair_first_set", _wrap_SemElemPtrPair_first_set, METH_VARARGS, (char *)"\n"
		"SemElemPtrPair_first_set(self, first)\n"
		"\n"
		"Parameters:\n"
		"    self: std::pair< sem_elem_t,sem_elem_t > *\n"
		"    first: sem_elem_t\n"
		"\n"
		""},
	 { (char *)"SemElemPtrPair_first_get", _wrap_SemElemPtrPair_first_get, METH_VARARGS, (char *)"\n"
		"SemElemPtrPair_first_get(self) -> sem_elem_t\n"
		"\n"
		"Parameters:\n"
		"    self: std::pair< sem_elem_t,sem_elem_t > *\n"
		"\n"
		""},
	 { (char *)"SemElemPtrPair_second_set", _wrap_SemElemPtrPair_second_set, METH_VARARGS, (char *)"\n"
		"SemElemPtrPair_second_set(self, second)\n"
		"\n"
		"Parameters:\n"
		"    self: std::pair< sem_elem_t,sem_elem_t > *\n"
		"    second: sem_elem_t\n"
		"\n"
		""},
	 { (char *)"SemElemPtrPair_second_get", _wrap_SemElemPtrPair_second_get, METH_VARARGS, (char *)"\n"
		"SemElemPtrPair_second_get(self) -> sem_elem_t\n"
		"\n"
		"Parameters:\n"
		"    self: std::pair< sem_elem_t,sem_elem_t > *\n"
		"\n"
		""},
	 { (char *)"delete_SemElemPtrPair", _wrap_delete_SemElemPtrPair, METH_VARARGS, (char *)"\n"
		"delete_SemElemPtrPair(self)\n"
		"\n"
		"Parameters:\n"
		"    self: std::pair< sem_elem_t,sem_elem_t > *\n"
		"\n"
		""},
	 { (char *)"SemElemPtrPair_swigregister", SemElemPtrPair_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PySemElemPtr", _wrap_new_PySemElemPtr, METH_VARARGS, (char *)"\n"
		"PySemElemPtr(t=None)\n"
		"\n"
		"Parameters:\n"
		"    t: PySemElem *\n"
		"\n"
		"PySemElemPtr()\n"
		"new_PySemElemPtr(rp) -> PySemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    rp: wali::ref_ptr< PySemElem > const &\n"
		"\n"
		""},
	 { (char *)"delete_PySemElemPtr", _wrap_delete_PySemElemPtr, METH_VARARGS, (char *)"\n"
		"delete_PySemElemPtr(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr___eq__", _wrap_PySemElemPtr___eq__, METH_VARARGS, (char *)"\n"
		"PySemElemPtr___eq__(self, that) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"    that: wali::ref_ptr< PySemElem > const &\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr___ne__", _wrap_PySemElemPtr___ne__, METH_VARARGS, (char *)"\n"
		"PySemElemPtr___ne__(self, that) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"    that: wali::ref_ptr< PySemElem > const &\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_get_ptr", _wrap_PySemElemPtr_get_ptr, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_get_ptr(self) -> PySemElem\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr___deref__", _wrap_PySemElemPtr___deref__, METH_VARARGS, (char *)"\n"
		"PySemElemPtr___deref__(self) -> PySemElem\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr___ref__", _wrap_PySemElemPtr___ref__, METH_VARARGS, (char *)"\n"
		"PySemElemPtr___ref__(self) -> PySemElem\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr___lt__", _wrap_PySemElemPtr___lt__, METH_VARARGS, (char *)"\n"
		"PySemElemPtr___lt__(self, that) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"    that: wali::ref_ptr< PySemElem > const &\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_is_empty", _wrap_PySemElemPtr_is_empty, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_is_empty(self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_is_valid", _wrap_PySemElemPtr_is_valid, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_is_valid(self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_setuserdata", _wrap_PySemElemPtr_setuserdata, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_setuserdata(self, data)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > *\n"
		"    data: PyObject *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_getuserdata", _wrap_PySemElemPtr_getuserdata, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_getuserdata(self) -> PyObject *\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr___str__", _wrap_PySemElemPtr___str__, METH_VARARGS, (char *)"\n"
		"PySemElemPtr___str__(self) -> std::string\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_pycombine", _wrap_PySemElemPtr_pycombine, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_pycombine(self, se) -> PySemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"    se: PySemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_combine", _wrap_PySemElemPtr_combine, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_combine(self, se) -> sem_elem_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > *\n"
		"    se: SemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_pyextend", _wrap_PySemElemPtr_pyextend, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_pyextend(self, se) -> PySemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"    se: PySemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_extend", _wrap_PySemElemPtr_extend, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_extend(self, se) -> sem_elem_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > *\n"
		"    se: SemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_pydelta", _wrap_PySemElemPtr_pydelta, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_pydelta(self, se) -> PySemElemPtrPair\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > *\n"
		"    se: PySemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_delta", _wrap_PySemElemPtr_delta, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_delta(self, se) -> SemElemPtrPair\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > *\n"
		"    se: SemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_pyequal", _wrap_PySemElemPtr_pyequal, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_pyequal(self, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"    se: PySemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_equal", _wrap_PySemElemPtr_equal, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_equal(self, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"    se: SemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_pyunder_approximates", _wrap_PySemElemPtr_pyunder_approximates, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_pyunder_approximates(self, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"    se: PySemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_under_approximates", _wrap_PySemElemPtr_under_approximates, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_under_approximates(self, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > *\n"
		"    se: SemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_pystar", _wrap_PySemElemPtr_pystar, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_pystar(self) -> PySemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_star", _wrap_PySemElemPtr_star, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_star(self) -> sem_elem_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_pyextend_and_diff", _wrap_PySemElemPtr_pyextend_and_diff, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_pyextend_and_diff(self, next, subtrahend) -> PySemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > *\n"
		"    next: PySemElem *\n"
		"    subtrahend: PySemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_extend_and_diff", _wrap_PySemElemPtr_extend_and_diff, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_extend_and_diff(self, next, subtrahend) -> sem_elem_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > *\n"
		"    next: sem_elem_t\n"
		"    subtrahend: sem_elem_t\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_pydiff", _wrap_PySemElemPtr_pydiff, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_pydiff(self, se) -> PySemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > *\n"
		"    se: PySemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_diff", _wrap_PySemElemPtr_diff, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_diff(self, se) -> sem_elem_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > *\n"
		"    se: SemElem *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_pyone", _wrap_PySemElemPtr_pyone, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_pyone(self) -> PySemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_pyzero", _wrap_PySemElemPtr_pyzero, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_pyzero(self) -> PySemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_one", _wrap_PySemElemPtr_one, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_one(self) -> sem_elem_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_zero", _wrap_PySemElemPtr_zero, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_zero(self) -> sem_elem_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_xmltag_get", _wrap_PySemElemPtr_xmltag_get, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_xmltag_get(self) -> std::string const &\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_marshall_weight", _wrap_PySemElemPtr_marshall_weight, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_marshall_weight(self, o) -> std::ostream &\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"    o: std::ostream &\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_quasi_one", _wrap_PySemElemPtr_quasi_one, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_quasi_one(self) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_container_less_than", _wrap_PySemElemPtr_container_less_than, METH_VARARGS, (char *)"\n"
		"container_less_than(other) -> bool\n"
		"\n"
		"Parameters:\n"
		"    other: wali::SemElem const *\n"
		"\n"
		"PySemElemPtr_container_less_than(self, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_hash", _wrap_PySemElemPtr_hash, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_hash(self) -> size_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_print_typename", _wrap_PySemElemPtr_print_typename, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_print_typename(self, os) -> std::ostream &\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"    os: std::ostream &\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_to_string_typename", _wrap_PySemElemPtr_to_string_typename, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_to_string_typename(self) -> std::string\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_to_string", _wrap_PySemElemPtr_to_string, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_to_string(self) -> std::string\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_toString", _wrap_PySemElemPtr_toString, METH_VARARGS, (char *)"\n"
		"PySemElemPtr_toString(self) -> std::string\n"
		"\n"
		"Parameters:\n"
		"    self: wali::ref_ptr< PySemElem > const *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtr_swigregister", PySemElemPtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PySemElemPtrPair", _wrap_new_PySemElemPtrPair, METH_VARARGS, (char *)"\n"
		"PySemElemPtrPair()\n"
		"PySemElemPtrPair(first, second)\n"
		"\n"
		"Parameters:\n"
		"    first: wali::ref_ptr< PySemElem >\n"
		"    second: wali::ref_ptr< PySemElem >\n"
		"\n"
		"new_PySemElemPtrPair(p) -> PySemElemPtrPair\n"
		"\n"
		"Parameters:\n"
		"    p: std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > const &\n"
		"\n"
		""},
	 { (char *)"PySemElemPtrPair_first_set", _wrap_PySemElemPtrPair_first_set, METH_VARARGS, (char *)"\n"
		"PySemElemPtrPair_first_set(self, first)\n"
		"\n"
		"Parameters:\n"
		"    self: std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *\n"
		"    first: wali::ref_ptr< PySemElem > *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtrPair_first_get", _wrap_PySemElemPtrPair_first_get, METH_VARARGS, (char *)"\n"
		"PySemElemPtrPair_first_get(self) -> PySemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtrPair_second_set", _wrap_PySemElemPtrPair_second_set, METH_VARARGS, (char *)"\n"
		"PySemElemPtrPair_second_set(self, second)\n"
		"\n"
		"Parameters:\n"
		"    self: std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *\n"
		"    second: wali::ref_ptr< PySemElem > *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtrPair_second_get", _wrap_PySemElemPtrPair_second_get, METH_VARARGS, (char *)"\n"
		"PySemElemPtrPair_second_get(self) -> PySemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *\n"
		"\n"
		""},
	 { (char *)"delete_PySemElemPtrPair", _wrap_delete_PySemElemPtrPair, METH_VARARGS, (char *)"\n"
		"delete_PySemElemPtrPair(self)\n"
		"\n"
		"Parameters:\n"
		"    self: std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *\n"
		"\n"
		""},
	 { (char *)"PySemElemPtrPair_swigregister", PySemElemPtrPair_swigregister, METH_VARARGS, NULL},
	 { (char *)"Trans_num_trans_get", _wrap_Trans_num_trans_get, METH_VARARGS, NULL},
	 { (char *)"Trans_num_trans_set", _wrap_Trans_num_trans_set, METH_VARARGS, NULL},
	 { (char *)"new_Trans", _wrap_new_Trans, METH_VARARGS, (char *)"\n"
		"Trans()\n"
		"Trans(_from, stack, to, se)\n"
		"\n"
		"Parameters:\n"
		"    from: wali::Key\n"
		"    stack: wali::Key\n"
		"    to: wali::Key\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		"Trans(t)\n"
		"\n"
		"Parameters:\n"
		"    t: wali::wfa::Trans const &\n"
		"\n"
		"new_Trans(t) -> Trans\n"
		"\n"
		"Parameters:\n"
		"    t: ITrans const &\n"
		"\n"
		""},
	 { (char *)"delete_Trans", _wrap_delete_Trans, METH_VARARGS, (char *)"\n"
		"delete_Trans(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans *\n"
		"\n"
		""},
	 { (char *)"Trans_copy", _wrap_Trans_copy, METH_VARARGS, (char *)"\n"
		"copy() -> Trans\n"
		"Trans_copy(self, f, s, t) -> Trans\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans const *\n"
		"    f: wali::Key\n"
		"    s: wali::Key\n"
		"    t: wali::Key\n"
		"\n"
		""},
	 { (char *)"Trans_worklist_data", _wrap_Trans_worklist_data, METH_VARARGS, (char *)"\n"
		"Trans_worklist_data(self) -> wali::ref_ptr< WorklistData >\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans const *\n"
		"\n"
		""},
	 { (char *)"Trans_fromState", _wrap_Trans_fromState, METH_VARARGS, (char *)"\n"
		"fromState() -> wali::Key\n"
		"Trans_fromState(self) -> wali::Key\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans *\n"
		"\n"
		""},
	 { (char *)"Trans_from_state", _wrap_Trans_from_state, METH_VARARGS, (char *)"\n"
		"from_state() -> wali::Key\n"
		"Trans_from_state(self) -> wali::Key\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans *\n"
		"\n"
		""},
	 { (char *)"Trans_stack", _wrap_Trans_stack, METH_VARARGS, (char *)"\n"
		"stack() -> wali::Key\n"
		"Trans_stack(self) -> wali::Key\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans *\n"
		"\n"
		""},
	 { (char *)"Trans_toState", _wrap_Trans_toState, METH_VARARGS, (char *)"\n"
		"toState() -> wali::Key\n"
		"Trans_toState(self) -> wali::Key\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans *\n"
		"\n"
		""},
	 { (char *)"Trans_to_state", _wrap_Trans_to_state, METH_VARARGS, (char *)"\n"
		"to_state() -> wali::Key\n"
		"Trans_to_state(self) -> wali::Key\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans *\n"
		"\n"
		""},
	 { (char *)"Trans_weight", _wrap_Trans_weight, METH_VARARGS, (char *)"\n"
		"weight() -> SemElemPtr\n"
		"Trans_weight(self) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans *\n"
		"\n"
		""},
	 { (char *)"Trans_get_delta", _wrap_Trans_get_delta, METH_VARARGS, (char *)"\n"
		"get_delta() -> SemElemPtr\n"
		"Trans_get_delta(self) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans *\n"
		"\n"
		""},
	 { (char *)"Trans_set_weight", _wrap_Trans_set_weight, METH_VARARGS, (char *)"\n"
		"Trans_set_weight(self, w)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans *\n"
		"    w: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"Trans_set_delta", _wrap_Trans_set_delta, METH_VARARGS, (char *)"\n"
		"Trans_set_delta(self, w)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans *\n"
		"    w: wali::sem_elem_t const\n"
		"\n"
		""},
	 { (char *)"Trans_set_worklist_data", _wrap_Trans_set_worklist_data, METH_VARARGS, (char *)"\n"
		"Trans_set_worklist_data(self, wd)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans *\n"
		"    wd: wali::ref_ptr< WorklistData >\n"
		"\n"
		""},
	 { (char *)"Trans_combine_trans", _wrap_Trans_combine_trans, METH_VARARGS, (char *)"\n"
		"Trans_combine_trans(self, tp)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans *\n"
		"    tp: ITrans *\n"
		"\n"
		""},
	 { (char *)"Trans_keypair", _wrap_Trans_keypair, METH_VARARGS, (char *)"\n"
		"Trans_keypair(self) -> KeyPair const &\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans const *\n"
		"\n"
		""},
	 { (char *)"Trans_modified", _wrap_Trans_modified, METH_VARARGS, (char *)"\n"
		"Trans_modified(self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans const *\n"
		"\n"
		""},
	 { (char *)"Trans_get_config", _wrap_Trans_get_config, METH_VARARGS, (char *)"\n"
		"Trans_get_config(self) -> wali::wpds::Config *\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans const *\n"
		"\n"
		""},
	 { (char *)"Trans_set_config", _wrap_Trans_set_config, METH_VARARGS, (char *)"\n"
		"Trans_set_config(self, c)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans *\n"
		"    c: wali::wpds::Config *\n"
		"\n"
		""},
	 { (char *)"Trans_poststar_eps_closure", _wrap_Trans_poststar_eps_closure, METH_VARARGS, (char *)"\n"
		"Trans_poststar_eps_closure(self, se) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans *\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"Trans_apply_post", _wrap_Trans_apply_post, METH_VARARGS, (char *)"\n"
		"Trans_apply_post(self, tw) -> TaggedWeight\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans const *\n"
		"    tw: TaggedWeight\n"
		"\n"
		""},
	 { (char *)"Trans_apply_pre", _wrap_Trans_apply_pre, METH_VARARGS, (char *)"\n"
		"Trans_apply_pre(self, tw) -> TaggedWeight\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans const *\n"
		"    tw: TaggedWeight\n"
		"\n"
		""},
	 { (char *)"Trans_apply_weight_changer", _wrap_Trans_apply_weight_changer, METH_VARARGS, (char *)"\n"
		"Trans_apply_weight_changer(self, wc)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::Trans *\n"
		"    wc: util::WeightChanger &\n"
		"\n"
		""},
	 { (char *)"Trans_swigregister", Trans_swigregister, METH_VARARGS, NULL},
	 { (char *)"TransSetImpl_iterator", _wrap_TransSetImpl_iterator, METH_VARARGS, (char *)"\n"
		"TransSetImpl_iterator(self) -> SwigPyIterator\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< ITrans *,ITransLT > *\n"
		"\n"
		""},
	 { (char *)"TransSetImpl___nonzero__", _wrap_TransSetImpl___nonzero__, METH_VARARGS, (char *)"\n"
		"TransSetImpl___nonzero__(self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< ITrans *,ITransLT > const *\n"
		"\n"
		""},
	 { (char *)"TransSetImpl___bool__", _wrap_TransSetImpl___bool__, METH_VARARGS, (char *)"\n"
		"TransSetImpl___bool__(self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< ITrans *,ITransLT > const *\n"
		"\n"
		""},
	 { (char *)"TransSetImpl___len__", _wrap_TransSetImpl___len__, METH_VARARGS, (char *)"\n"
		"TransSetImpl___len__(self) -> std::set< ITrans *,ITransLT >::size_type\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< ITrans *,ITransLT > const *\n"
		"\n"
		""},
	 { (char *)"TransSetImpl_append", _wrap_TransSetImpl_append, METH_VARARGS, (char *)"\n"
		"TransSetImpl_append(self, x)\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< ITrans *,ITransLT > *\n"
		"    x: std::set< ITrans *,ITransLT >::value_type\n"
		"\n"
		""},
	 { (char *)"TransSetImpl___contains__", _wrap_TransSetImpl___contains__, METH_VARARGS, (char *)"\n"
		"TransSetImpl___contains__(self, x) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< ITrans *,ITransLT > *\n"
		"    x: std::set< ITrans *,ITransLT >::value_type\n"
		"\n"
		""},
	 { (char *)"TransSetImpl___getitem__", _wrap_TransSetImpl___getitem__, METH_VARARGS, (char *)"\n"
		"TransSetImpl___getitem__(self, i) -> std::set< ITrans *,ITransLT >::value_type\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< ITrans *,ITransLT > const *\n"
		"    i: std::set< ITrans *,ITransLT >::difference_type\n"
		"\n"
		""},
	 { (char *)"TransSetImpl_add", _wrap_TransSetImpl_add, METH_VARARGS, (char *)"\n"
		"TransSetImpl_add(self, x)\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< ITrans *,ITransLT > *\n"
		"    x: std::set< ITrans *,ITransLT >::value_type\n"
		"\n"
		""},
	 { (char *)"TransSetImpl_discard", _wrap_TransSetImpl_discard, METH_VARARGS, (char *)"\n"
		"TransSetImpl_discard(self, x)\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< ITrans *,ITransLT > *\n"
		"    x: std::set< ITrans *,ITransLT >::value_type\n"
		"\n"
		""},
	 { (char *)"new_TransSetImpl", _wrap_new_TransSetImpl, METH_VARARGS, (char *)"\n"
		"TransSetImpl(arg2)\n"
		"\n"
		"Parameters:\n"
		"    arg2: ITransLT const &\n"
		"\n"
		"TransSetImpl()\n"
		"new_TransSetImpl(arg1) -> TransSetImpl\n"
		"\n"
		"Parameters:\n"
		"    arg1: std::set< ITrans *,ITransLT > const &\n"
		"\n"
		""},
	 { (char *)"TransSetImpl_empty", _wrap_TransSetImpl_empty, METH_VARARGS, (char *)"\n"
		"TransSetImpl_empty(self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< ITrans *,ITransLT > const *\n"
		"\n"
		""},
	 { (char *)"TransSetImpl_size", _wrap_TransSetImpl_size, METH_VARARGS, (char *)"\n"
		"TransSetImpl_size(self) -> std::set< ITrans *,ITransLT >::size_type\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< ITrans *,ITransLT > const *\n"
		"\n"
		""},
	 { (char *)"TransSetImpl_clear", _wrap_TransSetImpl_clear, METH_VARARGS, (char *)"\n"
		"TransSetImpl_clear(self)\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< ITrans *,ITransLT > *\n"
		"\n"
		""},
	 { (char *)"TransSetImpl_swap", _wrap_TransSetImpl_swap, METH_VARARGS, (char *)"\n"
		"TransSetImpl_swap(self, v)\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< ITrans *,ITransLT > *\n"
		"    v: std::set< ITrans *,ITransLT > &\n"
		"\n"
		""},
	 { (char *)"TransSetImpl_erase", _wrap_TransSetImpl_erase, METH_VARARGS, (char *)"\n"
		"TransSetImpl_erase(self, x) -> std::set< ITrans *,ITransLT >::size_type\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< ITrans *,ITransLT > *\n"
		"    x: std::set< ITrans *,ITransLT >::key_type const &\n"
		"\n"
		""},
	 { (char *)"TransSetImpl_count", _wrap_TransSetImpl_count, METH_VARARGS, (char *)"\n"
		"TransSetImpl_count(self, x) -> std::set< ITrans *,ITransLT >::size_type\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< ITrans *,ITransLT > const *\n"
		"    x: std::set< ITrans *,ITransLT >::key_type const &\n"
		"\n"
		""},
	 { (char *)"delete_TransSetImpl", _wrap_delete_TransSetImpl, METH_VARARGS, (char *)"\n"
		"delete_TransSetImpl(self)\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< ITrans *,ITransLT > *\n"
		"\n"
		""},
	 { (char *)"TransSetImpl_swigregister", TransSetImpl_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TransSet", _wrap_new_TransSet, METH_VARARGS, (char *)"new_TransSet() -> TransSet"},
	 { (char *)"delete_TransSet", _wrap_delete_TransSet, METH_VARARGS, (char *)"\n"
		"delete_TransSet(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::TransSet *\n"
		"\n"
		""},
	 { (char *)"TransSet_find", _wrap_TransSet_find, METH_VARARGS, (char *)"\n"
		"find(_from, stack, to) -> wali::wfa::TransSet::iterator\n"
		"\n"
		"Parameters:\n"
		"    from: wali::Key\n"
		"    stack: wali::Key\n"
		"    to: wali::Key\n"
		"\n"
		"find(t) -> wali::wfa::TransSet::iterator\n"
		"\n"
		"Parameters:\n"
		"    t: ITrans *\n"
		"\n"
		"find(_from, stack, to) -> wali::wfa::TransSet::const_iterator\n"
		"\n"
		"Parameters:\n"
		"    from: wali::Key\n"
		"    stack: wali::Key\n"
		"    to: wali::Key\n"
		"\n"
		"TransSet_find(self, t) -> wali::wfa::TransSet::const_iterator\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::TransSet const *\n"
		"    t: ITrans *\n"
		"\n"
		""},
	 { (char *)"TransSet_each", _wrap_TransSet_each, METH_VARARGS, (char *)"\n"
		"each(tf)\n"
		"\n"
		"Parameters:\n"
		"    tf: wali::wfa::TransFunctor &\n"
		"\n"
		"each(tf)\n"
		"\n"
		"Parameters:\n"
		"    tf: wali::wfa::ConstTransFunctor &\n"
		"\n"
		"each(tf)\n"
		"\n"
		"Parameters:\n"
		"    tf: boost::function< void (ITrans *) > &\n"
		"\n"
		"TransSet_each(self, tf)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::TransSet const *\n"
		"    tf: boost::function< void (ITrans const *) > &\n"
		"\n"
		""},
	 { (char *)"TransSet_insert", _wrap_TransSet_insert, METH_VARARGS, (char *)"\n"
		"TransSet_insert(self, t) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::TransSet *\n"
		"    t: ITrans *\n"
		"\n"
		""},
	 { (char *)"TransSet_erase", _wrap_TransSet_erase, METH_VARARGS, (char *)"\n"
		"erase(t) -> ITrans\n"
		"\n"
		"Parameters:\n"
		"    t: ITrans *\n"
		"\n"
		"erase(_from, stack, to) -> ITrans\n"
		"\n"
		"Parameters:\n"
		"    from: wali::Key\n"
		"    stack: wali::Key\n"
		"    to: wali::Key\n"
		"\n"
		"TransSet_erase(self, it)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::TransSet *\n"
		"    it: wali::wfa::TransSet::iterator\n"
		"\n"
		""},
	 { (char *)"TransSet_clear", _wrap_TransSet_clear, METH_VARARGS, (char *)"\n"
		"TransSet_clear(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::TransSet *\n"
		"\n"
		""},
	 { (char *)"TransSet_empty", _wrap_TransSet_empty, METH_VARARGS, (char *)"\n"
		"TransSet_empty(self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::TransSet const *\n"
		"\n"
		""},
	 { (char *)"TransSet_clear_and_release_resources", _wrap_TransSet_clear_and_release_resources, METH_VARARGS, (char *)"\n"
		"TransSet_clear_and_release_resources(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::TransSet *\n"
		"\n"
		""},
	 { (char *)"TransSet_begin", _wrap_TransSet_begin, METH_VARARGS, (char *)"\n"
		"begin() -> wali::wfa::TransSet::iterator\n"
		"TransSet_begin(self) -> wali::wfa::TransSet::const_iterator\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::TransSet const *\n"
		"\n"
		""},
	 { (char *)"TransSet_end", _wrap_TransSet_end, METH_VARARGS, (char *)"\n"
		"end() -> wali::wfa::TransSet::iterator\n"
		"TransSet_end(self) -> wali::wfa::TransSet::const_iterator\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::TransSet const *\n"
		"\n"
		""},
	 { (char *)"TransSet_size", _wrap_TransSet_size, METH_VARARGS, (char *)"\n"
		"TransSet_size(self) -> size_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::TransSet const *\n"
		"\n"
		""},
	 { (char *)"TransSet_as_list", _wrap_TransSet_as_list, METH_VARARGS, (char *)"\n"
		"TransSet_as_list(self) -> TransVector\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::TransSet *\n"
		"\n"
		""},
	 { (char *)"TransSet_swigregister", TransSet_swigregister, METH_VARARGS, NULL},
	 { (char *)"TransVector_iterator", _wrap_TransVector_iterator, METH_VARARGS, (char *)"\n"
		"TransVector_iterator(self) -> SwigPyIterator\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > *\n"
		"\n"
		""},
	 { (char *)"TransVector___nonzero__", _wrap_TransVector___nonzero__, METH_VARARGS, (char *)"\n"
		"TransVector___nonzero__(self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > const *\n"
		"\n"
		""},
	 { (char *)"TransVector___bool__", _wrap_TransVector___bool__, METH_VARARGS, (char *)"\n"
		"TransVector___bool__(self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > const *\n"
		"\n"
		""},
	 { (char *)"TransVector___len__", _wrap_TransVector___len__, METH_VARARGS, (char *)"\n"
		"TransVector___len__(self) -> std::vector< wali::wfa::Trans * >::size_type\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > const *\n"
		"\n"
		""},
	 { (char *)"TransVector_pop", _wrap_TransVector_pop, METH_VARARGS, (char *)"\n"
		"TransVector_pop(self) -> Trans\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > *\n"
		"\n"
		""},
	 { (char *)"TransVector___getslice__", _wrap_TransVector___getslice__, METH_VARARGS, (char *)"\n"
		"TransVector___getslice__(self, i, j) -> TransVector\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > *\n"
		"    i: std::vector< wali::wfa::Trans * >::difference_type\n"
		"    j: std::vector< wali::wfa::Trans * >::difference_type\n"
		"\n"
		""},
	 { (char *)"TransVector___setslice__", _wrap_TransVector___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(i, j, v=std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > >())\n"
		"\n"
		"Parameters:\n"
		"    i: std::vector< wali::wfa::Trans * >::difference_type\n"
		"    j: std::vector< wali::wfa::Trans * >::difference_type\n"
		"    v: std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > const &\n"
		"\n"
		"TransVector___setslice__(self, i, j)\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > *\n"
		"    i: std::vector< wali::wfa::Trans * >::difference_type\n"
		"    j: std::vector< wali::wfa::Trans * >::difference_type\n"
		"\n"
		""},
	 { (char *)"TransVector___delslice__", _wrap_TransVector___delslice__, METH_VARARGS, (char *)"\n"
		"TransVector___delslice__(self, i, j)\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > *\n"
		"    i: std::vector< wali::wfa::Trans * >::difference_type\n"
		"    j: std::vector< wali::wfa::Trans * >::difference_type\n"
		"\n"
		""},
	 { (char *)"TransVector___delitem__", _wrap_TransVector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(i)\n"
		"\n"
		"Parameters:\n"
		"    i: std::vector< wali::wfa::Trans * >::difference_type\n"
		"\n"
		"TransVector___delitem__(self, slice)\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > *\n"
		"    slice: PySliceObject *\n"
		"\n"
		""},
	 { (char *)"TransVector___getitem__", _wrap_TransVector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(slice) -> TransVector\n"
		"\n"
		"Parameters:\n"
		"    slice: PySliceObject *\n"
		"\n"
		"TransVector___getitem__(self, i) -> Trans\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > *\n"
		"    i: std::vector< wali::wfa::Trans * >::difference_type\n"
		"\n"
		""},
	 { (char *)"TransVector___setitem__", _wrap_TransVector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(slice, v)\n"
		"\n"
		"Parameters:\n"
		"    slice: PySliceObject *\n"
		"    v: std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > const &\n"
		"\n"
		"__setitem__(slice)\n"
		"\n"
		"Parameters:\n"
		"    slice: PySliceObject *\n"
		"\n"
		"TransVector___setitem__(self, i, x)\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > *\n"
		"    i: std::vector< wali::wfa::Trans * >::difference_type\n"
		"    x: std::vector< wali::wfa::Trans * >::value_type\n"
		"\n"
		""},
	 { (char *)"TransVector_append", _wrap_TransVector_append, METH_VARARGS, (char *)"\n"
		"TransVector_append(self, x)\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > *\n"
		"    x: std::vector< wali::wfa::Trans * >::value_type\n"
		"\n"
		""},
	 { (char *)"TransVector_empty", _wrap_TransVector_empty, METH_VARARGS, (char *)"\n"
		"TransVector_empty(self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > const *\n"
		"\n"
		""},
	 { (char *)"TransVector_size", _wrap_TransVector_size, METH_VARARGS, (char *)"\n"
		"TransVector_size(self) -> std::vector< wali::wfa::Trans * >::size_type\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > const *\n"
		"\n"
		""},
	 { (char *)"TransVector_clear", _wrap_TransVector_clear, METH_VARARGS, (char *)"\n"
		"TransVector_clear(self)\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > *\n"
		"\n"
		""},
	 { (char *)"TransVector_swap", _wrap_TransVector_swap, METH_VARARGS, (char *)"\n"
		"TransVector_swap(self, v)\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > *\n"
		"    v: std::vector< wali::wfa::Trans * > &\n"
		"\n"
		""},
	 { (char *)"TransVector_get_allocator", _wrap_TransVector_get_allocator, METH_VARARGS, (char *)"\n"
		"TransVector_get_allocator(self) -> std::vector< wali::wfa::Trans * >::allocator_type\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > const *\n"
		"\n"
		""},
	 { (char *)"TransVector_pop_back", _wrap_TransVector_pop_back, METH_VARARGS, (char *)"\n"
		"TransVector_pop_back(self)\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > *\n"
		"\n"
		""},
	 { (char *)"new_TransVector", _wrap_new_TransVector, METH_VARARGS, (char *)"\n"
		"TransVector()\n"
		"TransVector(arg2)\n"
		"\n"
		"Parameters:\n"
		"    arg2: std::vector< wali::wfa::Trans * > const &\n"
		"\n"
		"TransVector(size)\n"
		"\n"
		"Parameters:\n"
		"    size: std::vector< wali::wfa::Trans * >::size_type\n"
		"\n"
		"new_TransVector(size, value) -> TransVector\n"
		"\n"
		"Parameters:\n"
		"    size: std::vector< wali::wfa::Trans * >::size_type\n"
		"    value: std::vector< wali::wfa::Trans * >::value_type\n"
		"\n"
		""},
	 { (char *)"TransVector_push_back", _wrap_TransVector_push_back, METH_VARARGS, (char *)"\n"
		"TransVector_push_back(self, x)\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > *\n"
		"    x: std::vector< wali::wfa::Trans * >::value_type\n"
		"\n"
		""},
	 { (char *)"TransVector_front", _wrap_TransVector_front, METH_VARARGS, (char *)"\n"
		"TransVector_front(self) -> Trans\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > const *\n"
		"\n"
		""},
	 { (char *)"TransVector_back", _wrap_TransVector_back, METH_VARARGS, (char *)"\n"
		"TransVector_back(self) -> Trans\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > const *\n"
		"\n"
		""},
	 { (char *)"TransVector_assign", _wrap_TransVector_assign, METH_VARARGS, (char *)"\n"
		"TransVector_assign(self, n, x)\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > *\n"
		"    n: std::vector< wali::wfa::Trans * >::size_type\n"
		"    x: std::vector< wali::wfa::Trans * >::value_type\n"
		"\n"
		""},
	 { (char *)"TransVector_resize", _wrap_TransVector_resize, METH_VARARGS, (char *)"\n"
		"resize(new_size)\n"
		"\n"
		"Parameters:\n"
		"    new_size: std::vector< wali::wfa::Trans * >::size_type\n"
		"\n"
		"TransVector_resize(self, new_size, x)\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > *\n"
		"    new_size: std::vector< wali::wfa::Trans * >::size_type\n"
		"    x: std::vector< wali::wfa::Trans * >::value_type\n"
		"\n"
		""},
	 { (char *)"TransVector_reserve", _wrap_TransVector_reserve, METH_VARARGS, (char *)"\n"
		"TransVector_reserve(self, n)\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > *\n"
		"    n: std::vector< wali::wfa::Trans * >::size_type\n"
		"\n"
		""},
	 { (char *)"TransVector_capacity", _wrap_TransVector_capacity, METH_VARARGS, (char *)"\n"
		"TransVector_capacity(self) -> std::vector< wali::wfa::Trans * >::size_type\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > const *\n"
		"\n"
		""},
	 { (char *)"delete_TransVector", _wrap_delete_TransVector, METH_VARARGS, (char *)"\n"
		"delete_TransVector(self)\n"
		"\n"
		"Parameters:\n"
		"    self: std::vector< wali::wfa::Trans * > *\n"
		"\n"
		""},
	 { (char *)"TransVector_swigregister", TransVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"State_num_states_get", _wrap_State_num_states_get, METH_VARARGS, NULL},
	 { (char *)"State_num_states_set", _wrap_State_num_states_set, METH_VARARGS, NULL},
	 { (char *)"new_State", _wrap_new_State, METH_VARARGS, (char *)"\n"
		"State()\n"
		"State(name, W)\n"
		"\n"
		"Parameters:\n"
		"    name: wali::Key\n"
		"    W: wali::sem_elem_t\n"
		"\n"
		"new_State(st) -> State\n"
		"\n"
		"Parameters:\n"
		"    st: wali::wfa::State const &\n"
		"\n"
		""},
	 { (char *)"delete_State", _wrap_delete_State, METH_VARARGS, (char *)"\n"
		"delete_State(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::State *\n"
		"\n"
		""},
	 { (char *)"State_add_trans", _wrap_State_add_trans, METH_VARARGS, (char *)"\n"
		"State_add_trans(self, t)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::State *\n"
		"    t: ITrans *\n"
		"\n"
		""},
	 { (char *)"State_weight", _wrap_State_weight, METH_VARARGS, (char *)"\n"
		"weight() -> SemElemPtr\n"
		"State_weight(self) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::State const *\n"
		"\n"
		""},
	 { (char *)"State_accept_weight", _wrap_State_accept_weight, METH_VARARGS, (char *)"\n"
		"accept_weight() -> SemElemPtr\n"
		"State_accept_weight(self) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::State const *\n"
		"\n"
		""},
	 { (char *)"State_delta", _wrap_State_delta, METH_VARARGS, (char *)"\n"
		"State_delta(self) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::State *\n"
		"\n"
		""},
	 { (char *)"State_name", _wrap_State_name, METH_VARARGS, (char *)"\n"
		"State_name(self) -> wali::Key\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::State const *\n"
		"\n"
		""},
	 { (char *)"State_begin", _wrap_State_begin, METH_VARARGS, (char *)"\n"
		"begin() -> wali::wfa::State::iterator\n"
		"State_begin(self) -> wali::wfa::State::const_iterator\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::State const *\n"
		"\n"
		""},
	 { (char *)"State_end", _wrap_State_end, METH_VARARGS, (char *)"\n"
		"end() -> wali::wfa::State::iterator\n"
		"State_end(self) -> wali::wfa::State::const_iterator\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::State const *\n"
		"\n"
		""},
	 { (char *)"State_erase_trans", _wrap_State_erase_trans, METH_VARARGS, (char *)"\n"
		"erase_trans(_from, stack, to) -> bool\n"
		"\n"
		"Parameters:\n"
		"    from: wali::Key\n"
		"    stack: wali::Key\n"
		"    to: wali::Key\n"
		"\n"
		"State_erase_trans(self, t) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::State *\n"
		"    t: ITrans *\n"
		"\n"
		""},
	 { (char *)"State_clear_trans_set", _wrap_State_clear_trans_set, METH_VARARGS, (char *)"\n"
		"State_clear_trans_set(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::State *\n"
		"\n"
		""},
	 { (char *)"State___call__", _wrap_State___call__, METH_VARARGS, (char *)"\n"
		"State___call__(self, a, b) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::State const *\n"
		"    a: wali::wfa::State const *\n"
		"    b: wali::wfa::State const *\n"
		"\n"
		""},
	 { (char *)"State_get_trans_set", _wrap_State_get_trans_set, METH_VARARGS, (char *)"\n"
		"get_trans_set() -> TransSet\n"
		"State_get_trans_set(self) -> TransSet\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::State const *\n"
		"\n"
		""},
	 { (char *)"State_swigregister", State_swigregister, METH_VARARGS, NULL},
	 { (char *)"DotAttributePrinter_print_extra_attributes", _wrap_DotAttributePrinter_print_extra_attributes, METH_VARARGS, (char *)"\n"
		"print_extra_attributes(state, o)\n"
		"\n"
		"Parameters:\n"
		"    state: wali::wfa::State const *\n"
		"    o: std::ostream &\n"
		"\n"
		"DotAttributePrinter_print_extra_attributes(self, trans, o)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::DotAttributePrinter *\n"
		"    trans: ITrans const *\n"
		"    o: std::ostream &\n"
		"\n"
		""},
	 { (char *)"delete_DotAttributePrinter", _wrap_delete_DotAttributePrinter, METH_VARARGS, (char *)"\n"
		"delete_DotAttributePrinter(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::DotAttributePrinter *\n"
		"\n"
		""},
	 { (char *)"DotAttributePrinter_swigregister", DotAttributePrinter_swigregister, METH_VARARGS, NULL},
	 { (char *)"is_epsilon_transition", _wrap_is_epsilon_transition, METH_VARARGS, (char *)"\n"
		"is_epsilon_transition(trans) -> bool\n"
		"\n"
		"Parameters:\n"
		"    trans: ITrans const *\n"
		"\n"
		""},
	 { (char *)"is_any_transition", _wrap_is_any_transition, METH_VARARGS, (char *)"\n"
		"is_any_transition(trans) -> bool\n"
		"\n"
		"Parameters:\n"
		"    trans: ITrans const *\n"
		"\n"
		""},
	 { (char *)"WFA_global_default_path_summary_implementation_get", _wrap_WFA_global_default_path_summary_implementation_get, METH_VARARGS, NULL},
	 { (char *)"WFA_global_default_path_summary_implementation_set", _wrap_WFA_global_default_path_summary_implementation_set, METH_VARARGS, NULL},
	 { (char *)"WFA_global_default_path_summary_fwpds_top_down_get", _wrap_WFA_global_default_path_summary_fwpds_top_down_get, METH_VARARGS, NULL},
	 { (char *)"WFA_global_default_path_summary_fwpds_top_down_set", _wrap_WFA_global_default_path_summary_fwpds_top_down_set, METH_VARARGS, NULL},
	 { (char *)"new_WFA", _wrap_new_WFA, METH_VARARGS, (char *)"\n"
		"WFA(q=INORDER, prog=0)\n"
		"\n"
		"Parameters:\n"
		"    q: enum wali::wfa::WFA::query_t\n"
		"    prog: progress_t\n"
		"\n"
		"WFA(q=INORDER)\n"
		"\n"
		"Parameters:\n"
		"    q: enum wali::wfa::WFA::query_t\n"
		"\n"
		"WFA()\n"
		"new_WFA(rhs) -> WFA\n"
		"\n"
		"Parameters:\n"
		"    rhs: wali::wfa::WFA const &\n"
		"\n"
		""},
	 { (char *)"delete_WFA", _wrap_delete_WFA, METH_VARARGS, (char *)"\n"
		"delete_WFA(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"\n"
		""},
	 { (char *)"WFA_clear", _wrap_WFA_clear, METH_VARARGS, (char *)"\n"
		"WFA_clear(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"\n"
		""},
	 { (char *)"WFA_set_initial_state", _wrap_WFA_set_initial_state, METH_VARARGS, (char *)"\n"
		"WFA_set_initial_state(self, key) -> wali::Key\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"    key: wali::Key\n"
		"\n"
		""},
	 { (char *)"WFA_initial_state", _wrap_WFA_initial_state, METH_VARARGS, (char *)"\n"
		"WFA_initial_state(self) -> wali::Key\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"\n"
		""},
	 { (char *)"WFA_get_initial_state", _wrap_WFA_get_initial_state, METH_VARARGS, (char *)"\n"
		"WFA_get_initial_state(self) -> wali::Key\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"\n"
		""},
	 { (char *)"WFA_is_initial_state", _wrap_WFA_is_initial_state, METH_VARARGS, (char *)"\n"
		"WFA_is_initial_state(self, key) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    key: wali::Key\n"
		"\n"
		""},
	 { (char *)"WFA_add_final_state", _wrap_WFA_add_final_state, METH_VARARGS, (char *)"\n"
		"add_final_state(key)\n"
		"\n"
		"Parameters:\n"
		"    key: wali::Key\n"
		"\n"
		"WFA_add_final_state(self, key, accept_weight)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"    key: wali::Key\n"
		"    accept_weight: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"WFA_is_final_state", _wrap_WFA_is_final_state, METH_VARARGS, (char *)"\n"
		"WFA_is_final_state(self, key) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    key: wali::Key\n"
		"\n"
		""},
	 { (char *)"WFA_set_query", _wrap_WFA_set_query, METH_VARARGS, (char *)"\n"
		"WFA_set_query(self, newQuery) -> wali::wfa::WFA::query_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"    newQuery: enum wali::wfa::WFA::query_t\n"
		"\n"
		""},
	 { (char *)"WFA_get_query", _wrap_WFA_get_query, METH_VARARGS, (char *)"\n"
		"WFA_get_query(self) -> wali::wfa::WFA::query_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"\n"
		""},
	 { (char *)"WFA_get_generation", _wrap_WFA_get_generation, METH_VARARGS, (char *)"\n"
		"WFA_get_generation(self) -> size_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"\n"
		""},
	 { (char *)"WFA_set_generation", _wrap_WFA_set_generation, METH_VARARGS, (char *)"\n"
		"WFA_set_generation(self, g)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"    g: size_t\n"
		"\n"
		""},
	 { (char *)"WFA_get_some_weight", _wrap_WFA_get_some_weight, METH_VARARGS, (char *)"\n"
		"WFA_get_some_weight(self) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"\n"
		""},
	 { (char *)"WFA_add_trans", _wrap_WFA_add_trans, METH_VARARGS, (char *)"\n"
		"add_trans(p, g, q, se) -> std::pair< ITrans const *,bool >\n"
		"\n"
		"Parameters:\n"
		"    p: wali::Key\n"
		"    g: wali::Key\n"
		"    q: wali::Key\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		"WFA_add_trans(self, t) -> std::pair< ITrans const *,bool >\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"    t: ITrans *\n"
		"\n"
		""},
	 { (char *)"WFA_erase", _wrap_WFA_erase, METH_VARARGS, (char *)"\n"
		"erase(_from, stack, to)\n"
		"\n"
		"Parameters:\n"
		"    from: wali::Key\n"
		"    stack: wali::Key\n"
		"    to: wali::Key\n"
		"\n"
		"WFA_erase(self, t)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"    t: ITrans const *\n"
		"\n"
		""},
	 { (char *)"WFA_erase_state", _wrap_WFA_erase_state, METH_VARARGS, (char *)"\n"
		"WFA_erase_state(self, q) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"    q: wali::Key\n"
		"\n"
		""},
	 { (char *)"WFA_find", _wrap_WFA_find, METH_VARARGS, (char *)"\n"
		"WFA_find(self, p, g, q, t) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    p: wali::Key\n"
		"    g: wali::Key\n"
		"    q: wali::Key\n"
		"    t: wali::wfa::Trans &\n"
		"\n"
		""},
	 { (char *)"WFA_for_each", _wrap_WFA_for_each, METH_VARARGS, (char *)"\n"
		"for_each(tf)\n"
		"\n"
		"Parameters:\n"
		"    tf: wali::wfa::TransFunctor &\n"
		"\n"
		"for_each(arg2)\n"
		"\n"
		"Parameters:\n"
		"    arg2: boost::function< void (ITrans *) > &\n"
		"\n"
		"for_each(tf)\n"
		"\n"
		"Parameters:\n"
		"    tf: wali::wfa::ConstTransFunctor &\n"
		"\n"
		"WFA_for_each(self, arg2)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    arg2: boost::function< void (ITrans const *) > &\n"
		"\n"
		""},
	 { (char *)"WFA_intersect", _wrap_WFA_intersect, METH_VARARGS, (char *)"\n"
		"intersect(fa) -> WFA\n"
		"\n"
		"Parameters:\n"
		"    fa: wali::wfa::WFA const &\n"
		"\n"
		"intersect(fa, dest)\n"
		"\n"
		"Parameters:\n"
		"    fa: wali::wfa::WFA const &\n"
		"    dest: wali::wfa::WFA &\n"
		"\n"
		"intersect(wmaker, fa) -> WFA\n"
		"\n"
		"Parameters:\n"
		"    wmaker: WeightMaker &\n"
		"    fa: wali::wfa::WFA const &\n"
		"\n"
		"WFA_intersect(self, wmaker, fa, dest)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    wmaker: WeightMaker &\n"
		"    fa: wali::wfa::WFA const &\n"
		"    dest: wali::wfa::WFA &\n"
		"\n"
		""},
	 { (char *)"WFA_intersect_worklist", _wrap_WFA_intersect_worklist, METH_VARARGS, (char *)"\n"
		"WFA_intersect_worklist(self, wmaker, fa, dest)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    wmaker: WeightMaker &\n"
		"    fa: wali::wfa::WFA const &\n"
		"    dest: wali::wfa::WFA &\n"
		"\n"
		""},
	 { (char *)"WFA_intersect_cross", _wrap_WFA_intersect_cross, METH_VARARGS, (char *)"\n"
		"WFA_intersect_cross(self, wmaker, fa, dest)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    wmaker: WeightMaker &\n"
		"    fa: wali::wfa::WFA const &\n"
		"    dest: wali::wfa::WFA &\n"
		"\n"
		""},
	 { (char *)"WFA_to_regex", _wrap_WFA_to_regex, METH_VARARGS, (char *)"\n"
		"WFA_to_regex(self) -> wali::regex::regex_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"\n"
		""},
	 { (char *)"WFA_path_summary", _wrap_WFA_path_summary, METH_VARARGS, (char *)"\n"
		"WFA_path_summary(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"\n"
		""},
	 { (char *)"WFA_path_summary_iterative_original", _wrap_WFA_path_summary_iterative_original, METH_VARARGS, (char *)"\n"
		"path_summary_iterative_original()\n"
		"path_summary_iterative_original(wl)\n"
		"\n"
		"Parameters:\n"
		"    wl: wali::Worklist< wali::wfa::State > &\n"
		"\n"
		"path_summary_iterative_original(wt)\n"
		"\n"
		"Parameters:\n"
		"    wt: wali::sem_elem_t\n"
		"\n"
		"WFA_path_summary_iterative_original(self, wl, wt)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"    wl: wali::Worklist< wali::wfa::State > &\n"
		"    wt: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"WFA_path_summary_iterative_wpds", _wrap_WFA_path_summary_iterative_wpds, METH_VARARGS, (char *)"\n"
		"WFA_path_summary_iterative_wpds(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"\n"
		""},
	 { (char *)"WFA_path_summary_tarjan_fwpds", _wrap_WFA_path_summary_tarjan_fwpds, METH_VARARGS, (char *)"\n"
		"path_summary_tarjan_fwpds()\n"
		"WFA_path_summary_tarjan_fwpds(self, top_down)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"    top_down: bool\n"
		"\n"
		""},
	 { (char *)"WFA_path_summary_crosscheck_all", _wrap_WFA_path_summary_crosscheck_all, METH_VARARGS, (char *)"\n"
		"WFA_path_summary_crosscheck_all(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"\n"
		""},
	 { (char *)"WFA_path_summary_via_wpds", _wrap_WFA_path_summary_via_wpds, METH_VARARGS, (char *)"\n"
		"WFA_path_summary_via_wpds(self, wpds)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"    wpds: wali::wpds::WPDS &\n"
		"\n"
		""},
	 { (char *)"WFA_prune", _wrap_WFA_prune, METH_VARARGS, (char *)"\n"
		"WFA_prune(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"\n"
		""},
	 { (char *)"WFA_filter", _wrap_WFA_filter, METH_VARARGS, (char *)"\n"
		"filter(stk)\n"
		"\n"
		"Parameters:\n"
		"    stk: wali::Key\n"
		"\n"
		"WFA_filter(self, stkset)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"    stkset: std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > &\n"
		"\n"
		""},
	 { (char *)"WFA_duplicate_states", _wrap_WFA_duplicate_states, METH_VARARGS, (char *)"\n"
		"WFA_duplicate_states(self, st, output)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    st: std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > &\n"
		"    output: wali::wfa::WFA &\n"
		"\n"
		""},
	 { (char *)"WFA_marshall", _wrap_WFA_marshall, METH_VARARGS, (char *)"\n"
		"WFA_marshall(self, o) -> std::ostream &\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    o: std::ostream &\n"
		"\n"
		""},
	 { (char *)"WFA_marshall_state", _wrap_WFA_marshall_state, METH_VARARGS, (char *)"\n"
		"WFA_marshall_state(self, o, key) -> std::ostream &\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    o: std::ostream &\n"
		"    key: wali::Key\n"
		"\n"
		""},
	 { (char *)"WFA_insert", _wrap_WFA_insert, METH_VARARGS, (char *)"\n"
		"WFA_insert(self, tnew) -> std::pair< ITrans *,bool >\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"    tnew: ITrans *\n"
		"\n"
		""},
	 { (char *)"WFA_match", _wrap_WFA_match, METH_VARARGS, (char *)"\n"
		"WFA_match(self, p, y) -> TransSet\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    p: wali::Key\n"
		"    y: wali::Key\n"
		"\n"
		""},
	 { (char *)"WFA_add_state", _wrap_WFA_add_state, METH_VARARGS, (char *)"\n"
		"WFA_add_state(self, key, zero)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"    key: wali::Key\n"
		"    zero: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"WFA_get_state", _wrap_WFA_get_state, METH_VARARGS, (char *)"\n"
		"get_state(name) -> State\n"
		"\n"
		"Parameters:\n"
		"    name: wali::Key\n"
		"\n"
		"WFA_get_state(self, name) -> State\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"    name: wali::Key\n"
		"\n"
		""},
	 { (char *)"WFA_get_states", _wrap_WFA_get_states, METH_VARARGS, (char *)"\n"
		"WFA_get_states(self) -> KeySet\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"\n"
		""},
	 { (char *)"WFA_get_final_states", _wrap_WFA_get_final_states, METH_VARARGS, (char *)"\n"
		"WFA_get_final_states(self) -> KeySet\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"\n"
		""},
	 { (char *)"WFA_num_states", _wrap_WFA_num_states, METH_VARARGS, (char *)"\n"
		"WFA_num_states(self) -> size_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"\n"
		""},
	 { (char *)"WFA_num_transitions", _wrap_WFA_num_transitions, METH_VARARGS, (char *)"\n"
		"WFA_num_transitions(self) -> size_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"\n"
		""},
	 { (char *)"WFA_read_out_combine_over_all_paths_values", _wrap_WFA_read_out_combine_over_all_paths_values, METH_VARARGS, (char *)"\n"
		"read_out_combine_over_all_paths_values(alpha) -> std::map< wali::Key,wali::sem_elem_t,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,wali::sem_elem_t > > >\n"
		"\n"
		"Parameters:\n"
		"    alpha: std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &\n"
		"\n"
		"WFA_read_out_combine_over_all_paths_values(self) -> std::map< wali::Key,wali::sem_elem_t,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,wali::sem_elem_t > > >\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"\n"
		""},
	 { (char *)"WFA_set_default_path_summary_implementation", _wrap_WFA_set_default_path_summary_implementation, METH_VARARGS, (char *)"\n"
		"WFA_set_default_path_summary_implementation(self, i)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"    i: enum wali::wfa::WFA::PathSummaryImplementation\n"
		"\n"
		""},
	 { (char *)"WFA_get_default_path_summary_implementation", _wrap_WFA_get_default_path_summary_implementation, METH_VARARGS, (char *)"\n"
		"WFA_get_default_path_summary_implementation(self) -> wali::wfa::WFA::PathSummaryImplementation\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"\n"
		""},
	 { (char *)"WFA_epsilon_close", _wrap_WFA_epsilon_close, METH_VARARGS, (char *)"\n"
		"WFA_epsilon_close(self, start) -> wali::wfa::WFA::AccessibleStateMap\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    start: wali::Key\n"
		"\n"
		""},
	 { (char *)"WFA_epsilon_close_cached", _wrap_WFA_epsilon_close_cached, METH_VARARGS, (char *)"\n"
		"WFA_epsilon_close_cached(self, start, cache) -> wali::wfa::WFA::AccessibleStateMap\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    start: wali::Key\n"
		"    cache: wali::wfa::WFA::EpsilonCloseCache &\n"
		"\n"
		""},
	 { (char *)"WFA_epsilon_close_mohri", _wrap_WFA_epsilon_close_mohri, METH_VARARGS, (char *)"\n"
		"WFA_epsilon_close_mohri(self, start) -> wali::wfa::WFA::AccessibleStateMap\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    start: wali::Key\n"
		"\n"
		""},
	 { (char *)"WFA_epsilon_close_fwpds", _wrap_WFA_epsilon_close_fwpds, METH_VARARGS, (char *)"\n"
		"WFA_epsilon_close_fwpds(self, start) -> wali::wfa::WFA::AccessibleStateMap\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    start: wali::Key\n"
		"\n"
		""},
	 { (char *)"WFA_epsilon_close_cached_mohri_demand", _wrap_WFA_epsilon_close_cached_mohri_demand, METH_VARARGS, (char *)"\n"
		"WFA_epsilon_close_cached_mohri_demand(self, start, cache) -> wali::wfa::WFA::AccessibleStateMap\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    start: wali::Key\n"
		"    cache: wali::wfa::WFA::EpsilonCloseCache &\n"
		"\n"
		""},
	 { (char *)"WFA_epsilon_close_cached_fwpds_demand", _wrap_WFA_epsilon_close_cached_fwpds_demand, METH_VARARGS, (char *)"\n"
		"WFA_epsilon_close_cached_fwpds_demand(self, start, cache) -> wali::wfa::WFA::AccessibleStateMap\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    start: wali::Key\n"
		"    cache: wali::wfa::WFA::EpsilonCloseCache &\n"
		"\n"
		""},
	 { (char *)"WFA_epsilon_close_cached_mohri_all", _wrap_WFA_epsilon_close_cached_mohri_all, METH_VARARGS, (char *)"\n"
		"WFA_epsilon_close_cached_mohri_all(self, start, cache) -> wali::wfa::WFA::AccessibleStateMap\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    start: wali::Key\n"
		"    cache: wali::wfa::WFA::EpsilonCloseCache &\n"
		"\n"
		""},
	 { (char *)"WFA_epsilon_close_cached_fwpds_all_singles", _wrap_WFA_epsilon_close_cached_fwpds_all_singles, METH_VARARGS, (char *)"\n"
		"WFA_epsilon_close_cached_fwpds_all_singles(self, start, cache) -> wali::wfa::WFA::AccessibleStateMap\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    start: wali::Key\n"
		"    cache: wali::wfa::WFA::EpsilonCloseCache &\n"
		"\n"
		""},
	 { (char *)"WFA_epsilon_close_cached_fwpds_all_multi", _wrap_WFA_epsilon_close_cached_fwpds_all_multi, METH_VARARGS, (char *)"\n"
		"WFA_epsilon_close_cached_fwpds_all_multi(self, start, cache) -> wali::wfa::WFA::AccessibleStateMap\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    start: wali::Key\n"
		"    cache: wali::wfa::WFA::EpsilonCloseCache &\n"
		"\n"
		""},
	 { (char *)"WFA_generic_fwpds_poststar", _wrap_WFA_generic_fwpds_poststar, METH_VARARGS, (char *)"\n"
		"WFA_generic_fwpds_poststar(self, sources, trans_accept) -> wali::wfa::WFA::EpsilonCloseCache\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    sources: std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &\n"
		"    trans_accept: boost::function< bool (ITrans const *) >\n"
		"\n"
		""},
	 { (char *)"WFA_generic_wpds_poststar", _wrap_WFA_generic_wpds_poststar, METH_VARARGS, (char *)"\n"
		"WFA_generic_wpds_poststar(self, sources, trans_accept, wpds, query_weight, state_weight) -> wali::wfa::WFA::EpsilonCloseCache\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    sources: std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &\n"
		"    trans_accept: boost::function< bool (ITrans const *) >\n"
		"    wpds: wali::wpds::WPDS &\n"
		"    query_weight: wali::sem_elem_t\n"
		"    state_weight: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"WFA_compute_all_reaching_weights", _wrap_WFA_compute_all_reaching_weights, METH_VARARGS, (char *)"\n"
		"compute_all_reaching_weights() -> wali::wfa::WFA::AccessibleStateSetMap\n"
		"WFA_compute_all_reaching_weights(self, arg2, include_zeroes) -> wali::wfa::WFA::AccessibleStateSetMap\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    arg2: domains::SemElemSet::SemElemSubsumptionComputer\n"
		"    include_zeroes: bool\n"
		"\n"
		""},
	 { (char *)"WFA_remove_epsilons", _wrap_WFA_remove_epsilons, METH_VARARGS, (char *)"\n"
		"WFA_remove_epsilons(self) -> WFA\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"\n"
		""},
	 { (char *)"WFA_simulate", _wrap_WFA_simulate, METH_VARARGS, (char *)"\n"
		"WFA_simulate(self, start, word) -> wali::wfa::WFA::AccessibleStateMap\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    start: wali::wfa::WFA::AccessibleStateMap const &\n"
		"    word: wali::wfa::WFA::Word const &\n"
		"\n"
		""},
	 { (char *)"WFA_is_accepted_with_nonzero_weight", _wrap_WFA_is_accepted_with_nonzero_weight, METH_VARARGS, (char *)"\n"
		"WFA_is_accepted_with_nonzero_weight(self, word) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    word: wali::wfa::WFA::Word const &\n"
		"\n"
		""},
	 { (char *)"WFA_determinize", _wrap_WFA_determinize, METH_VARARGS, (char *)"\n"
		"determinize() -> WFA\n"
		"WFA_determinize(self, weight_gen) -> WFA\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    weight_gen: wali::wfa::DeterminizeWeightGen const &\n"
		"\n"
		""},
	 { (char *)"WFA_semideterminize", _wrap_WFA_semideterminize, METH_VARARGS, (char *)"\n"
		"semideterminize() -> WFA\n"
		"WFA_semideterminize(self, weight_gen) -> WFA\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    weight_gen: wali::wfa::DeterminizeWeightGen const &\n"
		"\n"
		""},
	 { (char *)"WFA_is_isomorphic_to", _wrap_WFA_is_isomorphic_to, METH_VARARGS, (char *)"\n"
		"is_isomorphic_to(other) -> bool\n"
		"\n"
		"Parameters:\n"
		"    other: wali::wfa::WFA const &\n"
		"\n"
		"WFA_is_isomorphic_to(self, other, check_weights) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    other: wali::wfa::WFA const &\n"
		"    check_weights: bool\n"
		"\n"
		""},
	 { (char *)"WFA_equal", _wrap_WFA_equal, METH_VARARGS, (char *)"\n"
		"WFA_equal(self, other) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    other: wali::wfa::WFA const &\n"
		"\n"
		""},
	 { (char *)"WFA_complete", _wrap_WFA_complete, METH_VARARGS, (char *)"\n"
		"complete(symbols, sink_state)\n"
		"\n"
		"Parameters:\n"
		"    symbols: std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &\n"
		"    sink_state: wali::Key\n"
		"\n"
		"complete(symbols)\n"
		"\n"
		"Parameters:\n"
		"    symbols: std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &\n"
		"\n"
		"complete(sink_state)\n"
		"\n"
		"Parameters:\n"
		"    sink_state: wali::Key\n"
		"\n"
		"WFA_complete(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"\n"
		""},
	 { (char *)"WFA_complement_states", _wrap_WFA_complement_states, METH_VARARGS, (char *)"\n"
		"WFA_complement_states(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"\n"
		""},
	 { (char *)"WFA_is_isomorphism", _wrap_WFA_is_isomorphism, METH_VARARGS, (char *)"\n"
		"WFA_is_isomorphism(left, left_states, right, right_states, check_weights) -> bool\n"
		"\n"
		"Parameters:\n"
		"    left: wali::wfa::WFA const &\n"
		"    left_states: std::vector< wali::Key,std::allocator< wali::Key > > const &\n"
		"    right: wali::wfa::WFA const &\n"
		"    right_states: std::vector< wali::Key,std::allocator< wali::Key > > const &\n"
		"    check_weights: bool\n"
		"\n"
		""},
	 { (char *)"WFA_next_states_no_eclose", _wrap_WFA_next_states_no_eclose, METH_VARARGS, (char *)"\n"
		"WFA_next_states_no_eclose(wfa, froms) -> std::map< wali::Key,std::map< wali::Key,std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > >,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > > > >,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,std::map< wali::Key,std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > >,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > > > > > > >\n"
		"\n"
		"Parameters:\n"
		"    wfa: wali::wfa::WFA const &\n"
		"    froms: std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > const &\n"
		"\n"
		""},
	 { (char *)"WFA_print_statistics", _wrap_WFA_print_statistics, METH_VARARGS, (char *)"\n"
		"WFA_print_statistics(self, os)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    os: std::ostream &\n"
		"\n"
		""},
	 { (char *)"WFA_to_wpds", _wrap_WFA_to_wpds, METH_VARARGS, (char *)"\n"
		"to_wpds(p_state, wpds, trans_accept, reverse=False, weight_wrapper=boost::function< wali::sem_elem_t (wali::sem_elem_t) >())\n"
		"\n"
		"Parameters:\n"
		"    p_state: wali::Key\n"
		"    wpds: wali::wpds::WPDS *\n"
		"    trans_accept: boost::function< bool (ITrans const *) >\n"
		"    reverse: bool\n"
		"    weight_wrapper: boost::function< wali::sem_elem_t (wali::sem_elem_t) >\n"
		"\n"
		"to_wpds(p_state, wpds, trans_accept, reverse=False)\n"
		"\n"
		"Parameters:\n"
		"    p_state: wali::Key\n"
		"    wpds: wali::wpds::WPDS *\n"
		"    trans_accept: boost::function< bool (ITrans const *) >\n"
		"    reverse: bool\n"
		"\n"
		"WFA_to_wpds(self, p_state, wpds, trans_accept)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    p_state: wali::Key\n"
		"    wpds: wali::wpds::WPDS *\n"
		"    trans_accept: boost::function< bool (ITrans const *) >\n"
		"\n"
		""},
	 { (char *)"WFA_alphabet", _wrap_WFA_alphabet, METH_VARARGS, (char *)"\n"
		"WFA_alphabet(self) -> KeySet\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"\n"
		""},
	 { (char *)"WFA_outgoing_trans_set", _wrap_WFA_outgoing_trans_set, METH_VARARGS, (char *)"\n"
		"outgoing_trans_set(state, symbol) -> TransSet\n"
		"\n"
		"Parameters:\n"
		"    state: wali::Key\n"
		"    symbol: wali::Key\n"
		"\n"
		"WFA_outgoing_trans_set(self, state, symbol) -> TransSet\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"    state: wali::Key\n"
		"    symbol: wali::Key\n"
		"\n"
		""},
	 { (char *)"WFA_end_of_epsilon_chain", _wrap_WFA_end_of_epsilon_chain, METH_VARARGS, (char *)"\n"
		"WFA_end_of_epsilon_chain(self, starting_state) -> std::pair< wali::Key,wali::sem_elem_t >\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"    starting_state: wali::Key\n"
		"\n"
		""},
	 { (char *)"WFA_collapse_transitions_forward_from", _wrap_WFA_collapse_transitions_forward_from, METH_VARARGS, (char *)"\n"
		"WFA_collapse_transitions_forward_from(self, state)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"    state: wali::Key\n"
		"\n"
		""},
	 { (char *)"WFA_remove_states_with_in_degree0", _wrap_WFA_remove_states_with_in_degree0, METH_VARARGS, (char *)"\n"
		"WFA_remove_states_with_in_degree0(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"\n"
		""},
	 { (char *)"WFA_collapse_epsilon_chains", _wrap_WFA_collapse_epsilon_chains, METH_VARARGS, (char *)"\n"
		"WFA_collapse_epsilon_chains(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"\n"
		""},
	 { (char *)"WFA_invert_states_and_transitions", _wrap_WFA_invert_states_and_transitions, METH_VARARGS, (char *)"\n"
		"WFA_invert_states_and_transitions(self) -> WFA\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA const *\n"
		"\n"
		""},
	 { (char *)"WFA___str__", _wrap_WFA___str__, METH_VARARGS, (char *)"\n"
		"WFA___str__(self) -> PyObject *\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"\n"
		""},
	 { (char *)"WFA_print_dot", _wrap_WFA_print_dot, METH_VARARGS, (char *)"\n"
		"print_dot(o, print_weights=False, attribute_printer=None) -> std::ostream\n"
		"\n"
		"Parameters:\n"
		"    o: std::ostream &\n"
		"    print_weights: bool\n"
		"    attribute_printer: wali::wfa::DotAttributePrinter *\n"
		"\n"
		"print_dot(o, print_weights=False) -> std::ostream\n"
		"\n"
		"Parameters:\n"
		"    o: std::ostream &\n"
		"    print_weights: bool\n"
		"\n"
		"print_dot(o) -> std::ostream\n"
		"\n"
		"Parameters:\n"
		"    o: std::ostream &\n"
		"\n"
		"WFA_print_dot(self) -> PyObject *\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wfa::WFA *\n"
		"\n"
		""},
	 { (char *)"WFA_swigregister", WFA_swigregister, METH_VARARGS, NULL},
	 { (char *)"simplify", _wrap_simplify, METH_VARARGS, (char *)"\n"
		"simplify(input, tester) -> WFA\n"
		"\n"
		"Parameters:\n"
		"    input: wali::wfa::WFA const &\n"
		"    tester: boost::function< wali::wfa::delta::DeltaResult (wali::wfa::WFA const &) >\n"
		"\n"
		""},
	 { (char *)"KeySet_iterator", _wrap_KeySet_iterator, METH_VARARGS, (char *)"\n"
		"KeySet_iterator(self) -> SwigPyIterator\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< size_t > *\n"
		"\n"
		""},
	 { (char *)"KeySet___nonzero__", _wrap_KeySet___nonzero__, METH_VARARGS, (char *)"\n"
		"KeySet___nonzero__(self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< size_t > const *\n"
		"\n"
		""},
	 { (char *)"KeySet___bool__", _wrap_KeySet___bool__, METH_VARARGS, (char *)"\n"
		"KeySet___bool__(self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< size_t > const *\n"
		"\n"
		""},
	 { (char *)"KeySet___len__", _wrap_KeySet___len__, METH_VARARGS, (char *)"\n"
		"KeySet___len__(self) -> std::set< size_t >::size_type\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< size_t > const *\n"
		"\n"
		""},
	 { (char *)"KeySet_append", _wrap_KeySet_append, METH_VARARGS, (char *)"\n"
		"KeySet_append(self, x)\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< size_t > *\n"
		"    x: std::set< size_t >::value_type\n"
		"\n"
		""},
	 { (char *)"KeySet___contains__", _wrap_KeySet___contains__, METH_VARARGS, (char *)"\n"
		"KeySet___contains__(self, x) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< size_t > *\n"
		"    x: std::set< size_t >::value_type\n"
		"\n"
		""},
	 { (char *)"KeySet___getitem__", _wrap_KeySet___getitem__, METH_VARARGS, (char *)"\n"
		"KeySet___getitem__(self, i) -> std::set< size_t >::value_type\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< size_t > const *\n"
		"    i: std::set< size_t >::difference_type\n"
		"\n"
		""},
	 { (char *)"KeySet_add", _wrap_KeySet_add, METH_VARARGS, (char *)"\n"
		"KeySet_add(self, x)\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< size_t > *\n"
		"    x: std::set< size_t >::value_type\n"
		"\n"
		""},
	 { (char *)"KeySet_discard", _wrap_KeySet_discard, METH_VARARGS, (char *)"\n"
		"KeySet_discard(self, x)\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< size_t > *\n"
		"    x: std::set< size_t >::value_type\n"
		"\n"
		""},
	 { (char *)"new_KeySet", _wrap_new_KeySet, METH_VARARGS, (char *)"\n"
		"KeySet(arg2)\n"
		"\n"
		"Parameters:\n"
		"    arg2: std::less< size_t > const &\n"
		"\n"
		"KeySet()\n"
		"new_KeySet(arg1) -> KeySet\n"
		"\n"
		"Parameters:\n"
		"    arg1: std::set< size_t > const &\n"
		"\n"
		""},
	 { (char *)"KeySet_empty", _wrap_KeySet_empty, METH_VARARGS, (char *)"\n"
		"KeySet_empty(self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< size_t > const *\n"
		"\n"
		""},
	 { (char *)"KeySet_size", _wrap_KeySet_size, METH_VARARGS, (char *)"\n"
		"KeySet_size(self) -> std::set< size_t >::size_type\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< size_t > const *\n"
		"\n"
		""},
	 { (char *)"KeySet_clear", _wrap_KeySet_clear, METH_VARARGS, (char *)"\n"
		"KeySet_clear(self)\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< size_t > *\n"
		"\n"
		""},
	 { (char *)"KeySet_swap", _wrap_KeySet_swap, METH_VARARGS, (char *)"\n"
		"KeySet_swap(self, v)\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< size_t > *\n"
		"    v: std::set< size_t > &\n"
		"\n"
		""},
	 { (char *)"KeySet_erase", _wrap_KeySet_erase, METH_VARARGS, (char *)"\n"
		"KeySet_erase(self, x) -> std::set< size_t >::size_type\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< size_t > *\n"
		"    x: std::set< size_t >::key_type const &\n"
		"\n"
		""},
	 { (char *)"KeySet_count", _wrap_KeySet_count, METH_VARARGS, (char *)"\n"
		"KeySet_count(self, x) -> std::set< size_t >::size_type\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< size_t > const *\n"
		"    x: std::set< size_t >::key_type const &\n"
		"\n"
		""},
	 { (char *)"delete_KeySet", _wrap_delete_KeySet, METH_VARARGS, (char *)"\n"
		"delete_KeySet(self)\n"
		"\n"
		"Parameters:\n"
		"    self: std::set< size_t > *\n"
		"\n"
		""},
	 { (char *)"KeySet_swigregister", KeySet_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WPDS", _wrap_new_WPDS, METH_VARARGS, (char *)"\n"
		"WPDS()\n"
		"WPDS(wrapper)\n"
		"\n"
		"Parameters:\n"
		"    wrapper: wali::ref_ptr< Wrapper >\n"
		"\n"
		"new_WPDS(w) -> WPDS\n"
		"\n"
		"Parameters:\n"
		"    w: wali::wpds::WPDS const &\n"
		"\n"
		""},
	 { (char *)"delete_WPDS", _wrap_delete_WPDS, METH_VARARGS, (char *)"\n"
		"delete_WPDS(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS *\n"
		"\n"
		""},
	 { (char *)"WPDS_clear", _wrap_WPDS_clear, METH_VARARGS, (char *)"\n"
		"WPDS_clear(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS *\n"
		"\n"
		""},
	 { (char *)"WPDS_set_worklist", _wrap_WPDS_set_worklist, METH_VARARGS, (char *)"\n"
		"WPDS_set_worklist(self, wl)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS *\n"
		"    wl: wali::ref_ptr< wali::Worklist< wali::wfa::ITrans > >\n"
		"\n"
		""},
	 { (char *)"WPDS_add_rule", _wrap_WPDS_add_rule, METH_VARARGS, (char *)"\n"
		"add_rule(from_state, from_stack, to_state, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    from_state: wali::Key\n"
		"    from_stack: wali::Key\n"
		"    to_state: wali::Key\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		"add_rule(from_state, from_stack, to_state, to_stack1, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    from_state: wali::Key\n"
		"    from_stack: wali::Key\n"
		"    to_state: wali::Key\n"
		"    to_stack1: wali::Key\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		"WPDS_add_rule(self, from_state, from_stack, to_state, to_stack1, to_stack2, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS *\n"
		"    from_state: wali::Key\n"
		"    from_stack: wali::Key\n"
		"    to_state: wali::Key\n"
		"    to_stack1: wali::Key\n"
		"    to_stack2: wali::Key\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"WPDS_replace_rule", _wrap_WPDS_replace_rule, METH_VARARGS, (char *)"\n"
		"replace_rule(from_state, from_stack, to_state, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    from_state: wali::Key\n"
		"    from_stack: wali::Key\n"
		"    to_state: wali::Key\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		"replace_rule(from_state, from_stack, to_state, to_stack1, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    from_state: wali::Key\n"
		"    from_stack: wali::Key\n"
		"    to_state: wali::Key\n"
		"    to_stack1: wali::Key\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		"WPDS_replace_rule(self, from_state, from_stack, to_state, to_stack1, to_stack2, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS *\n"
		"    from_state: wali::Key\n"
		"    from_stack: wali::Key\n"
		"    to_state: wali::Key\n"
		"    to_stack1: wali::Key\n"
		"    to_stack2: wali::Key\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"WPDS_erase_rule", _wrap_WPDS_erase_rule, METH_VARARGS, (char *)"\n"
		"WPDS_erase_rule(self, from_state, from_stack, to_state, to_stack1, to_stack2) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS *\n"
		"    from_state: wali::Key\n"
		"    from_stack: wali::Key\n"
		"    to_state: wali::Key\n"
		"    to_stack1: wali::Key\n"
		"    to_stack2: wali::Key\n"
		"\n"
		""},
	 { (char *)"WPDS_prestar", _wrap_WPDS_prestar, METH_VARARGS, (char *)"\n"
		"prestar(input) -> WFA\n"
		"\n"
		"Parameters:\n"
		"    input: wali::wfa::WFA const &\n"
		"\n"
		"WPDS_prestar(self, input, output)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS *\n"
		"    input: wali::wfa::WFA const &\n"
		"    output: wali::wfa::WFA &\n"
		"\n"
		""},
	 { (char *)"WPDS_poststar", _wrap_WPDS_poststar, METH_VARARGS, (char *)"\n"
		"poststar(input) -> WFA\n"
		"\n"
		"Parameters:\n"
		"    input: wali::wfa::WFA const &\n"
		"\n"
		"WPDS_poststar(self, input, output)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS *\n"
		"    input: wali::wfa::WFA const &\n"
		"    output: wali::wfa::WFA &\n"
		"\n"
		""},
	 { (char *)"WPDS_marshall", _wrap_WPDS_marshall, METH_VARARGS, (char *)"\n"
		"WPDS_marshall(self, o) -> std::ostream &\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS const *\n"
		"    o: std::ostream &\n"
		"\n"
		""},
	 { (char *)"WPDS_print_dot", _wrap_WPDS_print_dot, METH_VARARGS, (char *)"\n"
		"print_dot(o, print_state=False) -> std::ostream\n"
		"\n"
		"Parameters:\n"
		"    o: std::ostream &\n"
		"    print_state: bool\n"
		"\n"
		"WPDS_print_dot(self, o) -> std::ostream &\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS const *\n"
		"    o: std::ostream &\n"
		"\n"
		""},
	 { (char *)"WPDS_count_rules", _wrap_WPDS_count_rules, METH_VARARGS, (char *)"\n"
		"WPDS_count_rules(self) -> int\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS const *\n"
		"\n"
		""},
	 { (char *)"WPDS_for_each", _wrap_WPDS_for_each, METH_VARARGS, (char *)"\n"
		"for_each(func)\n"
		"\n"
		"Parameters:\n"
		"    func: wali::wpds::ConstRuleFunctor &\n"
		"\n"
		"WPDS_for_each(self, func)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS *\n"
		"    func: wali::wpds::RuleFunctor &\n"
		"\n"
		""},
	 { (char *)"WPDS___call__", _wrap_WPDS___call__, METH_VARARGS, (char *)"\n"
		"WPDS___call__(self, t)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS *\n"
		"    t: wali::wfa::ITrans const *\n"
		"\n"
		""},
	 { (char *)"WPDS_is_pds_state", _wrap_WPDS_is_pds_state, METH_VARARGS, (char *)"\n"
		"WPDS_is_pds_state(self, k) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS const *\n"
		"    k: wali::Key\n"
		"\n"
		""},
	 { (char *)"WPDS_num_pds_states", _wrap_WPDS_num_pds_states, METH_VARARGS, (char *)"\n"
		"WPDS_num_pds_states(self) -> int\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS const *\n"
		"\n"
		""},
	 { (char *)"WPDS_get_states", _wrap_WPDS_get_states, METH_VARARGS, (char *)"\n"
		"WPDS_get_states(self) -> KeySet\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS const *\n"
		"\n"
		""},
	 { (char *)"WPDS_construct_cfg", _wrap_WPDS_construct_cfg, METH_VARARGS, (char *)"\n"
		"WPDS_construct_cfg(self, entries, entryState, cfg) -> wali::Key\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS *\n"
		"    entries: std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > &\n"
		"    entryState: std::map< wali::Key,wali::Key,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,wali::Key > > > &\n"
		"    cfg: wali::wfa::WFA &\n"
		"\n"
		""},
	 { (char *)"WPDS_get_the_zero", _wrap_WPDS_get_the_zero, METH_VARARGS, (char *)"\n"
		"WPDS_get_the_zero(self) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS *\n"
		"\n"
		""},
	 { (char *)"WPDS_print_statistics", _wrap_WPDS_print_statistics, METH_VARARGS, (char *)"\n"
		"WPDS_print_statistics(self, os)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS const *\n"
		"    os: std::ostream &\n"
		"\n"
		""},
	 { (char *)"WPDS_to_wfa", _wrap_WPDS_to_wfa, METH_VARARGS, (char *)"\n"
		"WPDS_to_wfa(self, wfa)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS const *\n"
		"    wfa: wali::wfa::WFA &\n"
		"\n"
		""},
	 { (char *)"WPDS___str__", _wrap_WPDS___str__, METH_VARARGS, (char *)"\n"
		"WPDS___str__(self) -> PyObject *\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::WPDS *\n"
		"\n"
		""},
	 { (char *)"WPDS_swigregister", WPDS_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_EWPDS", _wrap_new_EWPDS, METH_VARARGS, (char *)"\n"
		"EWPDS()\n"
		"EWPDS(wrapper)\n"
		"\n"
		"Parameters:\n"
		"    wrapper: wali::ref_ptr< wali::wpds::Wrapper >\n"
		"\n"
		"new_EWPDS(e) -> EWPDS\n"
		"\n"
		"Parameters:\n"
		"    e: wali::wpds::ewpds::EWPDS const &\n"
		"\n"
		""},
	 { (char *)"delete_EWPDS", _wrap_delete_EWPDS, METH_VARARGS, (char *)"\n"
		"delete_EWPDS(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::ewpds::EWPDS *\n"
		"\n"
		""},
	 { (char *)"EWPDS_add_rule", _wrap_EWPDS_add_rule, METH_VARARGS, (char *)"\n"
		"add_rule(from_state, from_stack, to_state, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    from_state: wali::Key\n"
		"    from_stack: wali::Key\n"
		"    to_state: wali::Key\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		"add_rule(from_state, from_stack, to_state, to_stack1, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    from_state: wali::Key\n"
		"    from_stack: wali::Key\n"
		"    to_state: wali::Key\n"
		"    to_stack1: wali::Key\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		"add_rule(from_state, from_stack, to_state, to_stack1, to_stack2, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    from_state: wali::Key\n"
		"    from_stack: wali::Key\n"
		"    to_state: wali::Key\n"
		"    to_stack1: wali::Key\n"
		"    to_stack2: wali::Key\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		"EWPDS_add_rule(self, from_state, from_stack, to_state, to_stack1, to_stack2, se, mf) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::ewpds::EWPDS *\n"
		"    from_state: wali::Key\n"
		"    from_stack: wali::Key\n"
		"    to_state: wali::Key\n"
		"    to_stack1: wali::Key\n"
		"    to_stack2: wali::Key\n"
		"    se: wali::sem_elem_t\n"
		"    mf: merge_fn_t\n"
		"\n"
		""},
	 { (char *)"EWPDS_prestar", _wrap_EWPDS_prestar, METH_VARARGS, (char *)"\n"
		"prestar(input, output)\n"
		"\n"
		"Parameters:\n"
		"    input: wali::wpds::ewpds::WFA const &\n"
		"    output: wali::wpds::ewpds::WFA &\n"
		"\n"
		"EWPDS_prestar(self, input) -> WFA\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::ewpds::EWPDS *\n"
		"    input: wali::wfa::WFA const &\n"
		"\n"
		""},
	 { (char *)"EWPDS_marshall", _wrap_EWPDS_marshall, METH_VARARGS, (char *)"\n"
		"EWPDS_marshall(self, o) -> std::ostream &\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::ewpds::EWPDS const *\n"
		"    o: std::ostream &\n"
		"\n"
		""},
	 { (char *)"EWPDS___call__", _wrap_EWPDS___call__, METH_VARARGS, (char *)"\n"
		"EWPDS___call__(self, t)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::ewpds::EWPDS *\n"
		"    t: wali::wfa::ITrans const *\n"
		"\n"
		""},
	 { (char *)"EWPDS_lookup_rule", _wrap_EWPDS_lookup_rule, METH_VARARGS, (char *)"\n"
		"EWPDS_lookup_rule(self, to_state, to_stack1, to_stack2) -> wali::wpds::rule_t\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::ewpds::EWPDS const *\n"
		"    to_state: wali::Key\n"
		"    to_stack1: wali::Key\n"
		"    to_stack2: wali::Key\n"
		"\n"
		""},
	 { (char *)"EWPDS_replace_rule", _wrap_EWPDS_replace_rule, METH_VARARGS, (char *)"\n"
		"replace_rule(from_state, from_stack, to_state, to_stack1, to_stack2, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    from_state: wali::Key\n"
		"    from_stack: wali::Key\n"
		"    to_state: wali::Key\n"
		"    to_stack1: wali::Key\n"
		"    to_stack2: wali::Key\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		"replace_rule(from_state, from_stack, to_state, to_stack1, to_stack2, se, mf) -> bool\n"
		"\n"
		"Parameters:\n"
		"    from_state: wali::Key\n"
		"    from_stack: wali::Key\n"
		"    to_state: wali::Key\n"
		"    to_stack1: wali::Key\n"
		"    to_stack2: wali::Key\n"
		"    se: wali::sem_elem_t\n"
		"    mf: merge_fn_t\n"
		"\n"
		"replace_rule(from_state, from_stack, to_state, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    from_state: wali::Key\n"
		"    from_stack: wali::Key\n"
		"    to_state: wali::Key\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		"EWPDS_replace_rule(self, from_state, from_stack, to_state, to_stack1, se) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::ewpds::EWPDS *\n"
		"    from_state: wali::Key\n"
		"    from_stack: wali::Key\n"
		"    to_state: wali::Key\n"
		"    to_stack1: wali::Key\n"
		"    se: wali::sem_elem_t\n"
		"\n"
		""},
	 { (char *)"EWPDS___str__", _wrap_EWPDS___str__, METH_VARARGS, (char *)"\n"
		"EWPDS___str__(self) -> PyObject *\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::ewpds::EWPDS *\n"
		"\n"
		""},
	 { (char *)"EWPDS_swigregister", EWPDS_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FWPDS", _wrap_new_FWPDS, METH_VARARGS, (char *)"\n"
		"FWPDS()\n"
		"FWPDS(newton)\n"
		"\n"
		"Parameters:\n"
		"    newton: bool\n"
		"\n"
		"FWPDS(wrapper)\n"
		"\n"
		"Parameters:\n"
		"    wrapper: wali::ref_ptr< wali::wpds::Wrapper >\n"
		"\n"
		"new_FWPDS(f) -> FWPDS\n"
		"\n"
		"Parameters:\n"
		"    f: wali::wpds::fwpds::FWPDS const &\n"
		"\n"
		""},
	 { (char *)"delete_FWPDS", _wrap_delete_FWPDS, METH_VARARGS, (char *)"\n"
		"delete_FWPDS(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::fwpds::FWPDS *\n"
		"\n"
		""},
	 { (char *)"FWPDS_use_newton", _wrap_FWPDS_use_newton, METH_VARARGS, (char *)"\n"
		"FWPDS_use_newton(self, set)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::fwpds::FWPDS *\n"
		"    set: bool\n"
		"\n"
		""},
	 { (char *)"FWPDS_is_output_tensored", _wrap_FWPDS_is_output_tensored, METH_VARARGS, (char *)"\n"
		"FWPDS_is_output_tensored(self) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::fwpds::FWPDS *\n"
		"\n"
		""},
	 { (char *)"FWPDS_prestar", _wrap_FWPDS_prestar, METH_VARARGS, (char *)"\n"
		"prestar(input, output)\n"
		"\n"
		"Parameters:\n"
		"    input: wali::wfa::WFA const &\n"
		"    output: wali::wfa::WFA &\n"
		"\n"
		"FWPDS_prestar(self, input) -> WFA\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::fwpds::FWPDS *\n"
		"    input: wali::wfa::WFA const &\n"
		"\n"
		""},
	 { (char *)"FWPDS_poststar", _wrap_FWPDS_poststar, METH_VARARGS, (char *)"\n"
		"poststar(input, output)\n"
		"\n"
		"Parameters:\n"
		"    input: wali::wfa::WFA const &\n"
		"    output: wali::wfa::WFA &\n"
		"\n"
		"FWPDS_poststar(self, input) -> WFA\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::fwpds::FWPDS *\n"
		"    input: wali::wfa::WFA const &\n"
		"\n"
		""},
	 { (char *)"FWPDS_poststar_igr", _wrap_FWPDS_poststar_igr, METH_VARARGS, (char *)"\n"
		"FWPDS_poststar_igr(self, input, output)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::fwpds::FWPDS *\n"
		"    input: wali::wfa::WFA const &\n"
		"    output: wali::wfa::WFA &\n"
		"\n"
		""},
	 { (char *)"FWPDS_top_down_eval", _wrap_FWPDS_top_down_eval, METH_VARARGS, (char *)"\n"
		"FWPDS_top_down_eval(self, f)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::wpds::fwpds::FWPDS *\n"
		"    f: bool\n"
		"\n"
		""},
	 { (char *)"FWPDS_swigregister", FWPDS_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Reach", _wrap_new_Reach, METH_VARARGS, (char *)"\n"
		"new_Reach(b) -> Reach\n"
		"\n"
		"Parameters:\n"
		"    b: bool\n"
		"\n"
		""},
	 { (char *)"delete_Reach", _wrap_delete_Reach, METH_VARARGS, (char *)"\n"
		"delete_Reach(self)\n"
		"\n"
		"Parameters:\n"
		"    self: wali::Reach *\n"
		"\n"
		""},
	 { (char *)"Reach_one", _wrap_Reach_one, METH_VARARGS, (char *)"\n"
		"Reach_one(self) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::Reach const *\n"
		"\n"
		""},
	 { (char *)"Reach_zero", _wrap_Reach_zero, METH_VARARGS, (char *)"\n"
		"Reach_zero(self) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::Reach const *\n"
		"\n"
		""},
	 { (char *)"Reach_extend", _wrap_Reach_extend, METH_VARARGS, (char *)"\n"
		"Reach_extend(self, rhs) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::Reach *\n"
		"    rhs: wali::SemElem *\n"
		"\n"
		""},
	 { (char *)"Reach_combine", _wrap_Reach_combine, METH_VARARGS, (char *)"\n"
		"Reach_combine(self, rhs) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::Reach *\n"
		"    rhs: wali::SemElem *\n"
		"\n"
		""},
	 { (char *)"Reach_equal", _wrap_Reach_equal, METH_VARARGS, (char *)"\n"
		"Reach_equal(self, rhs) -> bool\n"
		"\n"
		"Parameters:\n"
		"    self: wali::Reach const *\n"
		"    rhs: wali::SemElem *\n"
		"\n"
		""},
	 { (char *)"Reach_from_string", _wrap_Reach_from_string, METH_VARARGS, (char *)"\n"
		"Reach_from_string(self, s) -> SemElemPtr\n"
		"\n"
		"Parameters:\n"
		"    self: wali::Reach const *\n"
		"    s: std::string const &\n"
		"\n"
		""},
	 { (char *)"Reach_num_reaches_get", _wrap_Reach_num_reaches_get, METH_VARARGS, NULL},
	 { (char *)"Reach_num_reaches_set", _wrap_Reach_num_reaches_set, METH_VARARGS, NULL},
	 { (char *)"Reach_swigregister", Reach_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_wali__wpds__fwpds__FWPDSTo_p_wali__wpds__ewpds__EWPDS(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wali::wpds::ewpds::EWPDS *)  ((wali::wpds::fwpds::FWPDS *) x));
}
static void *_p_wali__wfa__TransTo_p_ITrans(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ITrans *)  ((wali::wfa::Trans *) x));
}
static void *_p_wali__wpds__ewpds__EWPDSTo_p_wali__wpds__WPDS(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wali::wpds::WPDS *)  ((wali::wpds::ewpds::EWPDS *) x));
}
static void *_p_wali__wpds__fwpds__FWPDSTo_p_wali__wpds__WPDS(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wali::wpds::WPDS *) (wali::wpds::ewpds::EWPDS *) ((wali::wpds::fwpds::FWPDS *) x));
}
static void *_p_wali__wpds__GenKeySourceTo_p_wali__KeySource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wali::KeySource *)  ((wali::wpds::GenKeySource *) x));
}
static void *_p_wali__wfa__StateTo_p_wali__Printable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wali::Printable *)  ((wali::wfa::State *) x));
}
static void *_p_wali__wfa__WFATo_p_wali__Printable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wali::Printable *)  ((wali::wfa::WFA *) x));
}
static void *_p_wali__wpds__ewpds__EWPDSTo_p_wali__Printable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wali::Printable *) (wali::wpds::WPDS *) ((wali::wpds::ewpds::EWPDS *) x));
}
static void *_p_wali__ReachTo_p_wali__Printable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wali::Printable *) (wali::SemElem *) ((wali::Reach *) x));
}
static void *_p_wali__KeySourceTo_p_wali__Printable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wali::Printable *)  ((wali::KeySource *) x));
}
static void *_p_wali__wpds__GenKeySourceTo_p_wali__Printable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wali::Printable *) (wali::KeySource *) ((wali::wpds::GenKeySource *) x));
}
static void *_p_wali__wpds__WPDSTo_p_wali__Printable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wali::Printable *)  ((wali::wpds::WPDS *) x));
}
static void *_p_wali__wpds__fwpds__FWPDSTo_p_wali__Printable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wali::Printable *) (wali::wpds::WPDS *)(wali::wpds::ewpds::EWPDS *) ((wali::wpds::fwpds::FWPDS *) x));
}
static void *_p_wali__SemElemTo_p_wali__Printable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wali::Printable *)  ((wali::SemElem *) x));
}
static void *_p_PySemElemTo_p_wali__Printable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wali::Printable *) (wali::SemElem *) ((PySemElem *) x));
}
static void *_p_wali__wfa__TransSetTo_p_wali__Printable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wali::Printable *)  ((wali::wfa::TransSet *) x));
}
static void *_p_wali__ReachTo_p_wali__SemElem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wali::SemElem *)  ((wali::Reach *) x));
}
static void *_p_PySemElemTo_p_wali__SemElem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wali::SemElem *)  ((PySemElem *) x));
}
static swig_type_info _swigt__p_AccessibleStateMap = {"_p_AccessibleStateMap", "AccessibleStateMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AccessibleStateSetMap = {"_p_AccessibleStateSetMap", "AccessibleStateSetMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EpsilonCloseCache = {"_p_EpsilonCloseCache", "EpsilonCloseCache *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ITrans = {"_p_ITrans", "std::set< ITrans *,ITransLT >::key_type|std::set< ITrans *,ITransLT >::value_type|ITrans *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ITransLT = {"_p_ITransLT", "ITransLT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IncomingTransMap_t = {"_p_IncomingTransMap_t", "IncomingTransMap_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_KeyPair = {"_p_KeyPair", "KeyPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PredHash_t = {"_p_PredHash_t", "PredHash_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PySemElem = {"_p_PySemElem", "PySemElem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SemElem = {"_p_SemElem", "SemElem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StateSet_t = {"_p_StateSet_t", "StateSet_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TaggedWeight = {"_p_TaggedWeight", "TaggedWeight *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TransSet = {"_p_TransSet", "TransSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WeightMaker = {"_p_WeightMaker", "WeightMaker *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Word = {"_p_Word", "Word *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__object = {"_p__object", "_object *|PyObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__functionT_bool_fITrans_const_pF_t = {"_p_boost__functionT_bool_fITrans_const_pF_t", "boost::function< bool (ITrans const *) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__functionT_void_fITrans_const_pF_t = {"_p_boost__functionT_void_fITrans_const_pF_t", "boost::function< void (ITrans const *) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__functionT_void_fITrans_pF_t = {"_p_boost__functionT_void_fITrans_pF_t", "boost::function< void (ITrans *) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__functionT_wali__sem_elem_t_fwali__sem_elem_tF_t = {"_p_boost__functionT_wali__sem_elem_t_fwali__sem_elem_tF_t", "boost::function< wali::sem_elem_t (wali::sem_elem_t) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__functionT_wali__wfa__delta__DeltaResult_fwali__wfa__WFA_const_RF_t = {"_p_boost__functionT_wali__wfa__delta__DeltaResult_fwali__wfa__WFA_const_RF_t", "boost::function< wali::wfa::delta::DeltaResult (wali::wfa::WFA const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bucket_type = {"_p_bucket_type", "bucket_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_count_t = {"_p_count_t", "count_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_domains__SemElemSet__SemElemSubsumptionComputer = {"_p_domains__SemElemSet__SemElemSubsumptionComputer", "domains::SemElemSet::SemElemSubsumptionComputer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_element_type = {"_p_element_type", "element_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eps_map_t = {"_p_eps_map_t", "eps_map_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hashmap_type = {"_p_hashmap_type", "hashmap_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_impl_t = {"_p_impl_t", "impl_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kp_map_t = {"_p_kp_map_t", "kp_map_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_merge_fn_t = {"_p_merge_fn_t", "merge_fn_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_merge_rule_hash_t = {"_p_merge_rule_hash_t", "merge_rule_hash_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p__object = {"_p_p__object", "_object **|PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pair_type = {"_p_pair_type", "pair_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_progress_t = {"_p_progress_t", "progress_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reference = {"_p_reference", "reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sem_elem_t = {"_p_sem_elem_t", "sem_elem_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *|wali::Key *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_state_map_t = {"_p_state_map_t", "state_map_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_wali__wfa__Trans_p_t = {"_p_std__allocatorT_wali__wfa__Trans_p_t", "std::allocator< wali::wfa::Trans * > *|std::vector< wali::wfa::Trans * >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_size_t_t = {"_p_std__lessT_size_t_t", "std::less< size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_size_t_domains__SemElemSet__ElementSet_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_domains__SemElemSet__ElementSet_t_t_t = {"_p_std__mapT_size_t_domains__SemElemSet__ElementSet_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_domains__SemElemSet__ElementSet_t_t_t", "std::map< size_t,domains::SemElemSet::ElementSet,std::less< size_t >,std::allocator< std::pair< size_t const,domains::SemElemSet::ElementSet > > > *|wali::wfa::WFA::AccessibleStateSetMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_size_t_size_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_size_t_t_t_t = {"_p_std__mapT_size_t_size_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_size_t_t_t_t", "std::map< wali::Key,wali::Key,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,wali::Key > > > *|std::map< size_t,size_t,std::less< size_t >,std::allocator< std::pair< size_t const,size_t > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_size_t_std__mapT_size_t_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_t_t_t_t_t_t = {"_p_std__mapT_size_t_std__mapT_size_t_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_t_t_t_t_t_t", "std::map< size_t,std::map< size_t,std::set< size_t,std::less< size_t >,std::allocator< size_t > >,std::less< size_t >,std::allocator< std::pair< size_t const,std::set< size_t,std::less< size_t >,std::allocator< size_t > > > > >,std::less< size_t >,std::allocator< std::pair< size_t const,std::map< size_t,std::set< size_t,std::less< size_t >,std::allocator< size_t > >,std::less< size_t >,std::allocator< std::pair< size_t const,std::set< size_t,std::less< size_t >,std::allocator< size_t > > > > > > > > *|std::map< wali::Key,std::map< wali::Key,std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > >,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > > > >,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,std::map< wali::Key,std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > >,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > > > > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_size_t_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_t_t_t = {"_p_std__mapT_size_t_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_t_t_t", "std::map< size_t,std::map< size_t,wali::ref_ptr< wali::SemElem >,std::less< size_t >,std::allocator< std::pair< size_t const,wali::ref_ptr< wali::SemElem > > > >,std::less< size_t >,std::allocator< std::pair< size_t const,std::map< size_t,wali::ref_ptr< wali::SemElem >,std::less< size_t >,std::allocator< std::pair< size_t const,wali::ref_ptr< wali::SemElem > > > > > > > *|wali::wfa::WFA::EpsilonCloseCache *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t = {"_p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t", "std::map< size_t,wali::ref_ptr< wali::SemElem >,std::less< size_t >,std::allocator< std::pair< size_t const,wali::ref_ptr< wali::SemElem > > > > *|std::map< wali::Key,wali::sem_elem_t,std::less< wali::Key >,std::allocator< std::pair< wali::Key const,wali::sem_elem_t > > > *|wali::wfa::WFA::AccessibleStateMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_ITrans_const_p_bool_t = {"_p_std__pairT_ITrans_const_p_bool_t", "std::pair< ITrans const *,bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_ITrans_p_bool_t = {"_p_std__pairT_ITrans_p_bool_t", "std::pair< ITrans *,bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_KeyPair_TransSet_t = {"_p_std__pairT_KeyPair_TransSet_t", "std::pair< KeyPair,TransSet > *|wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_sem_elem_t_sem_elem_t_t = {"_p_std__pairT_sem_elem_t_sem_elem_t_t", "std::pair< sem_elem_t,sem_elem_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_size_t_size_t_t = {"_p_std__pairT_size_t_size_t_t", "std::pair< size_t,size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_size_t_wali__ref_ptrT_wali__SemElem_t_t = {"_p_std__pairT_size_t_wali__ref_ptrT_wali__SemElem_t_t", "std::pair< size_t,wali::ref_ptr< wali::SemElem > > *|std::pair< wali::Key,wali::sem_elem_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t_bool_t = {"_p_std__pairT_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t_bool_t", "std::pair< wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator,bool > *|std::pair< wali::HashMapIterator< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > >,bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_wali__ref_ptrT_PySemElem_t_wali__ref_ptrT_PySemElem_t_t = {"_p_std__pairT_wali__ref_ptrT_PySemElem_t_wali__ref_ptrT_PySemElem_t_t", "std::pair< wali::ref_ptr< PySemElem >,wali::ref_ptr< PySemElem > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_wali__ref_ptrT_wali__SemElem_t_wali__ref_ptrT_wali__SemElem_t_t = {"_p_std__pairT_wali__ref_ptrT_wali__SemElem_t_wali__ref_ptrT_wali__SemElem_t_t", "std::pair< wali::sem_elem_t,wali::sem_elem_t > *|std::pair< wali::ref_ptr< wali::SemElem >,wali::ref_ptr< wali::SemElem > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t = {"_p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t", "std::set< ITrans *,ITransLT > *|std::set< ITrans *,ITransLT,std::allocator< ITrans * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__const_iterator = {"_p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__const_iterator", "std::set< ITrans *,ITransLT,std::allocator< wali::wfa::ITrans * > >::const_iterator *|wali::wfa::TransSet::const_iterator *|wali::wfa::State::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__iterator = {"_p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__iterator", "std::set< ITrans *,ITransLT,std::allocator< wali::wfa::ITrans * > >::iterator *|wali::wfa::TransSet::iterator *|wali::wfa::State::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t = {"_p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t", "std::set< size_t,std::less< size_t >,std::allocator< size_t > > *|std::set< size_t > *|std::set< wali::Key,std::less< wali::Key >,std::allocator< wali::Key > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT__Tp_p__Alloc_t = {"_p_std__vectorT__Tp_p__Alloc_t", "std::vector< _Tp *,_Alloc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t = {"_p_std__vectorT_size_t_std__allocatorT_size_t_t_t", "std::vector< size_t,std::allocator< size_t > > *|wali::wfa::WFA::Word *|std::vector< wali::Key,std::allocator< wali::Key > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t = {"_p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t", "std::vector< wali::wfa::Trans *,std::allocator< wali::wfa::Trans * > > *|std::vector< wali::wfa::Trans * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_util__WeightChanger = {"_p_util__WeightChanger", "util::WeightChanger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__HashMapConstIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t = {"_p_wali__HashMapConstIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t", "wali::HashMapConstIterator< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > > *|wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t = {"_p_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t", "wali::HashMapIterator< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > > *|wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t = {"_p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t", "wali::HashMap< KeyPair,TransSet,wali::hm_hash< KeyPair >,wali::hm_equal< KeyPair > > *|wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__KeySource = {"_p_wali__KeySource", "wali::KeySource *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__KeySpace = {"_p_wali__KeySpace", "wali::KeySpace *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__Printable = {"_p_wali__Printable", "wali::Printable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__Reach = {"_p_wali__Reach", "wali::Reach *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__SemElem = {"_p_wali__SemElem", "wali::SemElem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__SemElemRefPtrContainerLessThan = {"_p_wali__SemElemRefPtrContainerLessThan", "wali::SemElemRefPtrContainerLessThan *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__SemElemRefPtrEqual = {"_p_wali__SemElemRefPtrEqual", "wali::SemElemRefPtrEqual *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__SemElemRefPtrHash = {"_p_wali__SemElemRefPtrHash", "wali::SemElemRefPtrHash *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__WorklistT_wali__wfa__State_t = {"_p_wali__WorklistT_wali__wfa__State_t", "wali::Worklist< wali::wfa::State > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__ref_ptrT_PySemElem_t = {"_p_wali__ref_ptrT_PySemElem_t", "wali::ref_ptr< PySemElem > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__ref_ptrT_WorklistData_t = {"_p_wali__ref_ptrT_WorklistData_t", "wali::ref_ptr< WorklistData > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__ref_ptrT_Wrapper_t = {"_p_wali__ref_ptrT_Wrapper_t", "wali::ref_ptr< Wrapper > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__ref_ptrT_wali__KeySource_t = {"_p_wali__ref_ptrT_wali__KeySource_t", "wali::ref_ptr< wali::KeySource > *|wali::key_src_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__ref_ptrT_wali__SemElem_t = {"_p_wali__ref_ptrT_wali__SemElem_t", "wali::ref_ptr< SemElem > *|wali::ref_ptr< wali::SemElem > *|wali::sem_elem_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__ref_ptrT_wali__WorklistT_wali__wfa__ITrans_t_t = {"_p_wali__ref_ptrT_wali__WorklistT_wali__wfa__ITrans_t_t", "wali::ref_ptr< wali::Worklist< wali::wfa::ITrans > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__ref_ptrT_wali__regex__Regex_t = {"_p_wali__ref_ptrT_wali__regex__Regex_t", "wali::regex::regex_t *|wali::ref_ptr< wali::regex::Regex > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__ref_ptrT_wali__wpds__Wrapper_t = {"_p_wali__ref_ptrT_wali__wpds__Wrapper_t", "wali::ref_ptr< wali::wpds::Wrapper > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__ref_ptrT_wali__wpds__ewpds__ERule_t = {"_p_wali__ref_ptrT_wali__wpds__ewpds__ERule_t", "wali::wpds::ewpds::erule_t *|wali::ref_ptr< wali::wpds::ewpds::ERule > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__wfa__ConstTransFunctor = {"_p_wali__wfa__ConstTransFunctor", "wali::wfa::ConstTransFunctor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__wfa__DeterminizeWeightGen = {"_p_wali__wfa__DeterminizeWeightGen", "wali::wfa::DeterminizeWeightGen *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__wfa__DotAttributePrinter = {"_p_wali__wfa__DotAttributePrinter", "wali::wfa::DotAttributePrinter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__wfa__ITrans = {"_p_wali__wfa__ITrans", "wali::wfa::ITrans *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__wfa__State = {"_p_wali__wfa__State", "wali::wfa::State *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__wfa__Trans = {"_p_wali__wfa__Trans", "std::vector< wali::wfa::Trans * >::value_type|wali::wfa::Trans *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__wfa__TransFunctor = {"_p_wali__wfa__TransFunctor", "wali::wfa::TransFunctor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__wfa__TransSet = {"_p_wali__wfa__TransSet", "wali::wfa::TransSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__wfa__WFA = {"_p_wali__wfa__WFA", "wali::wfa::WFA *|::wali::wfa::WFA *|wali::wpds::ewpds::WFA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__wpds__Config = {"_p_wali__wpds__Config", "wali::wpds::Config *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__wpds__ConstRuleFunctor = {"_p_wali__wpds__ConstRuleFunctor", "wali::wpds::ConstRuleFunctor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__wpds__GenKeySource = {"_p_wali__wpds__GenKeySource", "wali::wpds::GenKeySource *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__wpds__RuleFunctor = {"_p_wali__wpds__RuleFunctor", "wali::wpds::RuleFunctor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__wpds__WPDS = {"_p_wali__wpds__WPDS", "wali::wpds::WPDS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__wpds__ewpds__EWPDS = {"_p_wali__wpds__ewpds__EWPDS", "wali::wpds::ewpds::EWPDS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__wpds__fwpds__FWPDS = {"_p_wali__wpds__fwpds__FWPDS", "wali::wpds::fwpds::FWPDS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wali__wpds__rule_t = {"_p_wali__wpds__rule_t", "wali::wpds::rule_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AccessibleStateMap,
  &_swigt__p_AccessibleStateSetMap,
  &_swigt__p_EpsilonCloseCache,
  &_swigt__p_ITrans,
  &_swigt__p_ITransLT,
  &_swigt__p_IncomingTransMap_t,
  &_swigt__p_KeyPair,
  &_swigt__p_PredHash_t,
  &_swigt__p_PySemElem,
  &_swigt__p_SemElem,
  &_swigt__p_StateSet_t,
  &_swigt__p_TaggedWeight,
  &_swigt__p_TransSet,
  &_swigt__p_WeightMaker,
  &_swigt__p_Word,
  &_swigt__p__object,
  &_swigt__p_allocator_type,
  &_swigt__p_boost__functionT_bool_fITrans_const_pF_t,
  &_swigt__p_boost__functionT_void_fITrans_const_pF_t,
  &_swigt__p_boost__functionT_void_fITrans_pF_t,
  &_swigt__p_boost__functionT_wali__sem_elem_t_fwali__sem_elem_tF_t,
  &_swigt__p_boost__functionT_wali__wfa__delta__DeltaResult_fwali__wfa__WFA_const_RF_t,
  &_swigt__p_bucket_type,
  &_swigt__p_char,
  &_swigt__p_const_iterator,
  &_swigt__p_const_reference,
  &_swigt__p_count_t,
  &_swigt__p_difference_type,
  &_swigt__p_domains__SemElemSet__SemElemSubsumptionComputer,
  &_swigt__p_element_type,
  &_swigt__p_eps_map_t,
  &_swigt__p_first_type,
  &_swigt__p_hashmap_type,
  &_swigt__p_impl_t,
  &_swigt__p_iterator,
  &_swigt__p_key_type,
  &_swigt__p_kp_map_t,
  &_swigt__p_mapped_type,
  &_swigt__p_merge_fn_t,
  &_swigt__p_merge_rule_hash_t,
  &_swigt__p_p__object,
  &_swigt__p_pair_type,
  &_swigt__p_progress_t,
  &_swigt__p_reference,
  &_swigt__p_second_type,
  &_swigt__p_sem_elem_t,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_state_map_t,
  &_swigt__p_std__allocatorT_wali__wfa__Trans_p_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__lessT_size_t_t,
  &_swigt__p_std__mapT_size_t_domains__SemElemSet__ElementSet_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_domains__SemElemSet__ElementSet_t_t_t,
  &_swigt__p_std__mapT_size_t_size_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_size_t_t_t_t,
  &_swigt__p_std__mapT_size_t_std__mapT_size_t_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_t_t_t_t_t_t,
  &_swigt__p_std__mapT_size_t_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_t_t_t,
  &_swigt__p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t,
  &_swigt__p_std__ostream,
  &_swigt__p_std__pairT_ITrans_const_p_bool_t,
  &_swigt__p_std__pairT_ITrans_p_bool_t,
  &_swigt__p_std__pairT_KeyPair_TransSet_t,
  &_swigt__p_std__pairT_sem_elem_t_sem_elem_t_t,
  &_swigt__p_std__pairT_size_t_size_t_t,
  &_swigt__p_std__pairT_size_t_wali__ref_ptrT_wali__SemElem_t_t,
  &_swigt__p_std__pairT_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t_bool_t,
  &_swigt__p_std__pairT_wali__ref_ptrT_PySemElem_t_wali__ref_ptrT_PySemElem_t_t,
  &_swigt__p_std__pairT_wali__ref_ptrT_wali__SemElem_t_wali__ref_ptrT_wali__SemElem_t_t,
  &_swigt__p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t,
  &_swigt__p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__const_iterator,
  &_swigt__p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__iterator,
  &_swigt__p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t,
  &_swigt__p_std__vectorT__Tp_p__Alloc_t,
  &_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  &_swigt__p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_util__WeightChanger,
  &_swigt__p_value_type,
  &_swigt__p_wali__HashMapConstIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t,
  &_swigt__p_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t,
  &_swigt__p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t,
  &_swigt__p_wali__KeySource,
  &_swigt__p_wali__KeySpace,
  &_swigt__p_wali__Printable,
  &_swigt__p_wali__Reach,
  &_swigt__p_wali__SemElem,
  &_swigt__p_wali__SemElemRefPtrContainerLessThan,
  &_swigt__p_wali__SemElemRefPtrEqual,
  &_swigt__p_wali__SemElemRefPtrHash,
  &_swigt__p_wali__WorklistT_wali__wfa__State_t,
  &_swigt__p_wali__ref_ptrT_PySemElem_t,
  &_swigt__p_wali__ref_ptrT_WorklistData_t,
  &_swigt__p_wali__ref_ptrT_Wrapper_t,
  &_swigt__p_wali__ref_ptrT_wali__KeySource_t,
  &_swigt__p_wali__ref_ptrT_wali__SemElem_t,
  &_swigt__p_wali__ref_ptrT_wali__WorklistT_wali__wfa__ITrans_t_t,
  &_swigt__p_wali__ref_ptrT_wali__regex__Regex_t,
  &_swigt__p_wali__ref_ptrT_wali__wpds__Wrapper_t,
  &_swigt__p_wali__ref_ptrT_wali__wpds__ewpds__ERule_t,
  &_swigt__p_wali__wfa__ConstTransFunctor,
  &_swigt__p_wali__wfa__DeterminizeWeightGen,
  &_swigt__p_wali__wfa__DotAttributePrinter,
  &_swigt__p_wali__wfa__ITrans,
  &_swigt__p_wali__wfa__State,
  &_swigt__p_wali__wfa__Trans,
  &_swigt__p_wali__wfa__TransFunctor,
  &_swigt__p_wali__wfa__TransSet,
  &_swigt__p_wali__wfa__WFA,
  &_swigt__p_wali__wpds__Config,
  &_swigt__p_wali__wpds__ConstRuleFunctor,
  &_swigt__p_wali__wpds__GenKeySource,
  &_swigt__p_wali__wpds__RuleFunctor,
  &_swigt__p_wali__wpds__WPDS,
  &_swigt__p_wali__wpds__ewpds__EWPDS,
  &_swigt__p_wali__wpds__fwpds__FWPDS,
  &_swigt__p_wali__wpds__rule_t,
};

static swig_cast_info _swigc__p_AccessibleStateMap[] = {  {&_swigt__p_AccessibleStateMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AccessibleStateSetMap[] = {  {&_swigt__p_AccessibleStateSetMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EpsilonCloseCache[] = {  {&_swigt__p_EpsilonCloseCache, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ITrans[] = {  {&_swigt__p_ITrans, 0, 0, 0},  {&_swigt__p_wali__wfa__Trans, _p_wali__wfa__TransTo_p_ITrans, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ITransLT[] = {  {&_swigt__p_ITransLT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IncomingTransMap_t[] = {  {&_swigt__p_IncomingTransMap_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KeyPair[] = {  {&_swigt__p_KeyPair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PredHash_t[] = {  {&_swigt__p_PredHash_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PySemElem[] = {  {&_swigt__p_PySemElem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SemElem[] = {  {&_swigt__p_SemElem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StateSet_t[] = {  {&_swigt__p_StateSet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TaggedWeight[] = {  {&_swigt__p_TaggedWeight, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransSet[] = {  {&_swigt__p_TransSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WeightMaker[] = {  {&_swigt__p_WeightMaker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Word[] = {  {&_swigt__p_Word, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__object[] = {  {&_swigt__p__object, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__functionT_bool_fITrans_const_pF_t[] = {  {&_swigt__p_boost__functionT_bool_fITrans_const_pF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__functionT_void_fITrans_const_pF_t[] = {  {&_swigt__p_boost__functionT_void_fITrans_const_pF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__functionT_void_fITrans_pF_t[] = {  {&_swigt__p_boost__functionT_void_fITrans_pF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__functionT_wali__sem_elem_t_fwali__sem_elem_tF_t[] = {  {&_swigt__p_boost__functionT_wali__sem_elem_t_fwali__sem_elem_tF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__functionT_wali__wfa__delta__DeltaResult_fwali__wfa__WFA_const_RF_t[] = {  {&_swigt__p_boost__functionT_wali__wfa__delta__DeltaResult_fwali__wfa__WFA_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bucket_type[] = {  {&_swigt__p_bucket_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_count_t[] = {  {&_swigt__p_count_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_domains__SemElemSet__SemElemSubsumptionComputer[] = {  {&_swigt__p_domains__SemElemSet__SemElemSubsumptionComputer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_element_type[] = {  {&_swigt__p_element_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eps_map_t[] = {  {&_swigt__p_eps_map_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hashmap_type[] = {  {&_swigt__p_hashmap_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_impl_t[] = {  {&_swigt__p_impl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kp_map_t[] = {  {&_swigt__p_kp_map_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_merge_fn_t[] = {  {&_swigt__p_merge_fn_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_merge_rule_hash_t[] = {  {&_swigt__p_merge_rule_hash_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p__object[] = {  {&_swigt__p_p__object, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pair_type[] = {  {&_swigt__p_pair_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_progress_t[] = {  {&_swigt__p_progress_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reference[] = {  {&_swigt__p_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sem_elem_t[] = {  {&_swigt__p_sem_elem_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_state_map_t[] = {  {&_swigt__p_state_map_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_wali__wfa__Trans_p_t[] = {  {&_swigt__p_std__allocatorT_wali__wfa__Trans_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_size_t_t[] = {  {&_swigt__p_std__lessT_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_size_t_domains__SemElemSet__ElementSet_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_domains__SemElemSet__ElementSet_t_t_t[] = {  {&_swigt__p_std__mapT_size_t_domains__SemElemSet__ElementSet_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_domains__SemElemSet__ElementSet_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_size_t_size_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_size_t_t_t_t[] = {  {&_swigt__p_std__mapT_size_t_size_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_size_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_size_t_std__mapT_size_t_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_t_t_t_t_t_t[] = {  {&_swigt__p_std__mapT_size_t_std__mapT_size_t_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_t_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_size_t_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_t_t_t[] = {  {&_swigt__p_std__mapT_size_t_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t[] = {  {&_swigt__p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_ITrans_const_p_bool_t[] = {  {&_swigt__p_std__pairT_ITrans_const_p_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_ITrans_p_bool_t[] = {  {&_swigt__p_std__pairT_ITrans_p_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_KeyPair_TransSet_t[] = {  {&_swigt__p_std__pairT_KeyPair_TransSet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_sem_elem_t_sem_elem_t_t[] = {  {&_swigt__p_std__pairT_sem_elem_t_sem_elem_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_size_t_size_t_t[] = {  {&_swigt__p_std__pairT_size_t_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_size_t_wali__ref_ptrT_wali__SemElem_t_t[] = {  {&_swigt__p_std__pairT_size_t_wali__ref_ptrT_wali__SemElem_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t_bool_t[] = {  {&_swigt__p_std__pairT_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_wali__ref_ptrT_PySemElem_t_wali__ref_ptrT_PySemElem_t_t[] = {  {&_swigt__p_std__pairT_wali__ref_ptrT_PySemElem_t_wali__ref_ptrT_PySemElem_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_wali__ref_ptrT_wali__SemElem_t_wali__ref_ptrT_wali__SemElem_t_t[] = {  {&_swigt__p_std__pairT_wali__ref_ptrT_wali__SemElem_t_wali__ref_ptrT_wali__SemElem_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t[] = {  {&_swigt__p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__const_iterator[] = {  {&_swigt__p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__iterator[] = {  {&_swigt__p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t[] = {  {&_swigt__p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT__Tp_p__Alloc_t[] = {  {&_swigt__p_std__vectorT__Tp_p__Alloc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t[] = {  {&_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t[] = {  {&_swigt__p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_util__WeightChanger[] = {  {&_swigt__p_util__WeightChanger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__HashMapConstIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t[] = {  {&_swigt__p_wali__HashMapConstIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t[] = {  {&_swigt__p_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t[] = {  {&_swigt__p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__KeySource[] = {  {&_swigt__p_wali__KeySource, 0, 0, 0},  {&_swigt__p_wali__wpds__GenKeySource, _p_wali__wpds__GenKeySourceTo_p_wali__KeySource, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__KeySpace[] = {  {&_swigt__p_wali__KeySpace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__Printable[] = {  {&_swigt__p_wali__wpds__WPDS, _p_wali__wpds__WPDSTo_p_wali__Printable, 0, 0},  {&_swigt__p_wali__wpds__ewpds__EWPDS, _p_wali__wpds__ewpds__EWPDSTo_p_wali__Printable, 0, 0},  {&_swigt__p_wali__wfa__State, _p_wali__wfa__StateTo_p_wali__Printable, 0, 0},  {&_swigt__p_wali__Reach, _p_wali__ReachTo_p_wali__Printable, 0, 0},  {&_swigt__p_wali__Printable, 0, 0, 0},  {&_swigt__p_wali__KeySource, _p_wali__KeySourceTo_p_wali__Printable, 0, 0},  {&_swigt__p_wali__wpds__GenKeySource, _p_wali__wpds__GenKeySourceTo_p_wali__Printable, 0, 0},  {&_swigt__p_wali__wfa__WFA, _p_wali__wfa__WFATo_p_wali__Printable, 0, 0},  {&_swigt__p_wali__wpds__fwpds__FWPDS, _p_wali__wpds__fwpds__FWPDSTo_p_wali__Printable, 0, 0},  {&_swigt__p_wali__SemElem, _p_wali__SemElemTo_p_wali__Printable, 0, 0},  {&_swigt__p_PySemElem, _p_PySemElemTo_p_wali__Printable, 0, 0},  {&_swigt__p_wali__wfa__TransSet, _p_wali__wfa__TransSetTo_p_wali__Printable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__Reach[] = {  {&_swigt__p_wali__Reach, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__SemElem[] = {  {&_swigt__p_wali__Reach, _p_wali__ReachTo_p_wali__SemElem, 0, 0},  {&_swigt__p_wali__SemElem, 0, 0, 0},  {&_swigt__p_PySemElem, _p_PySemElemTo_p_wali__SemElem, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__SemElemRefPtrContainerLessThan[] = {  {&_swigt__p_wali__SemElemRefPtrContainerLessThan, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__SemElemRefPtrEqual[] = {  {&_swigt__p_wali__SemElemRefPtrEqual, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__SemElemRefPtrHash[] = {  {&_swigt__p_wali__SemElemRefPtrHash, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__WorklistT_wali__wfa__State_t[] = {  {&_swigt__p_wali__WorklistT_wali__wfa__State_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__ref_ptrT_PySemElem_t[] = {  {&_swigt__p_wali__ref_ptrT_PySemElem_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__ref_ptrT_WorklistData_t[] = {  {&_swigt__p_wali__ref_ptrT_WorklistData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__ref_ptrT_Wrapper_t[] = {  {&_swigt__p_wali__ref_ptrT_Wrapper_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__ref_ptrT_wali__KeySource_t[] = {  {&_swigt__p_wali__ref_ptrT_wali__KeySource_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__ref_ptrT_wali__SemElem_t[] = {  {&_swigt__p_wali__ref_ptrT_wali__SemElem_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__ref_ptrT_wali__WorklistT_wali__wfa__ITrans_t_t[] = {  {&_swigt__p_wali__ref_ptrT_wali__WorklistT_wali__wfa__ITrans_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__ref_ptrT_wali__regex__Regex_t[] = {  {&_swigt__p_wali__ref_ptrT_wali__regex__Regex_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__ref_ptrT_wali__wpds__Wrapper_t[] = {  {&_swigt__p_wali__ref_ptrT_wali__wpds__Wrapper_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__ref_ptrT_wali__wpds__ewpds__ERule_t[] = {  {&_swigt__p_wali__ref_ptrT_wali__wpds__ewpds__ERule_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__wfa__ConstTransFunctor[] = {  {&_swigt__p_wali__wfa__ConstTransFunctor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__wfa__DeterminizeWeightGen[] = {  {&_swigt__p_wali__wfa__DeterminizeWeightGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__wfa__DotAttributePrinter[] = {  {&_swigt__p_wali__wfa__DotAttributePrinter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__wfa__ITrans[] = {  {&_swigt__p_wali__wfa__ITrans, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__wfa__State[] = {  {&_swigt__p_wali__wfa__State, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__wfa__Trans[] = {  {&_swigt__p_wali__wfa__Trans, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__wfa__TransFunctor[] = {  {&_swigt__p_wali__wfa__TransFunctor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__wfa__TransSet[] = {  {&_swigt__p_wali__wfa__TransSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__wfa__WFA[] = {  {&_swigt__p_wali__wfa__WFA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__wpds__Config[] = {  {&_swigt__p_wali__wpds__Config, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__wpds__ConstRuleFunctor[] = {  {&_swigt__p_wali__wpds__ConstRuleFunctor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__wpds__GenKeySource[] = {  {&_swigt__p_wali__wpds__GenKeySource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__wpds__RuleFunctor[] = {  {&_swigt__p_wali__wpds__RuleFunctor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__wpds__WPDS[] = {  {&_swigt__p_wali__wpds__WPDS, 0, 0, 0},  {&_swigt__p_wali__wpds__ewpds__EWPDS, _p_wali__wpds__ewpds__EWPDSTo_p_wali__wpds__WPDS, 0, 0},  {&_swigt__p_wali__wpds__fwpds__FWPDS, _p_wali__wpds__fwpds__FWPDSTo_p_wali__wpds__WPDS, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__wpds__ewpds__EWPDS[] = {  {&_swigt__p_wali__wpds__ewpds__EWPDS, 0, 0, 0},  {&_swigt__p_wali__wpds__fwpds__FWPDS, _p_wali__wpds__fwpds__FWPDSTo_p_wali__wpds__ewpds__EWPDS, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__wpds__fwpds__FWPDS[] = {  {&_swigt__p_wali__wpds__fwpds__FWPDS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wali__wpds__rule_t[] = {  {&_swigt__p_wali__wpds__rule_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AccessibleStateMap,
  _swigc__p_AccessibleStateSetMap,
  _swigc__p_EpsilonCloseCache,
  _swigc__p_ITrans,
  _swigc__p_ITransLT,
  _swigc__p_IncomingTransMap_t,
  _swigc__p_KeyPair,
  _swigc__p_PredHash_t,
  _swigc__p_PySemElem,
  _swigc__p_SemElem,
  _swigc__p_StateSet_t,
  _swigc__p_TaggedWeight,
  _swigc__p_TransSet,
  _swigc__p_WeightMaker,
  _swigc__p_Word,
  _swigc__p__object,
  _swigc__p_allocator_type,
  _swigc__p_boost__functionT_bool_fITrans_const_pF_t,
  _swigc__p_boost__functionT_void_fITrans_const_pF_t,
  _swigc__p_boost__functionT_void_fITrans_pF_t,
  _swigc__p_boost__functionT_wali__sem_elem_t_fwali__sem_elem_tF_t,
  _swigc__p_boost__functionT_wali__wfa__delta__DeltaResult_fwali__wfa__WFA_const_RF_t,
  _swigc__p_bucket_type,
  _swigc__p_char,
  _swigc__p_const_iterator,
  _swigc__p_const_reference,
  _swigc__p_count_t,
  _swigc__p_difference_type,
  _swigc__p_domains__SemElemSet__SemElemSubsumptionComputer,
  _swigc__p_element_type,
  _swigc__p_eps_map_t,
  _swigc__p_first_type,
  _swigc__p_hashmap_type,
  _swigc__p_impl_t,
  _swigc__p_iterator,
  _swigc__p_key_type,
  _swigc__p_kp_map_t,
  _swigc__p_mapped_type,
  _swigc__p_merge_fn_t,
  _swigc__p_merge_rule_hash_t,
  _swigc__p_p__object,
  _swigc__p_pair_type,
  _swigc__p_progress_t,
  _swigc__p_reference,
  _swigc__p_second_type,
  _swigc__p_sem_elem_t,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_state_map_t,
  _swigc__p_std__allocatorT_wali__wfa__Trans_p_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__lessT_size_t_t,
  _swigc__p_std__mapT_size_t_domains__SemElemSet__ElementSet_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_domains__SemElemSet__ElementSet_t_t_t,
  _swigc__p_std__mapT_size_t_size_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_size_t_t_t_t,
  _swigc__p_std__mapT_size_t_std__mapT_size_t_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t_t_t_t_t_t_t,
  _swigc__p_std__mapT_size_t_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t_t_t_t,
  _swigc__p_std__mapT_size_t_wali__ref_ptrT_wali__SemElem_t_std__lessT_size_t_t_std__allocatorT_std__pairT_size_t_const_wali__ref_ptrT_wali__SemElem_t_t_t_t,
  _swigc__p_std__ostream,
  _swigc__p_std__pairT_ITrans_const_p_bool_t,
  _swigc__p_std__pairT_ITrans_p_bool_t,
  _swigc__p_std__pairT_KeyPair_TransSet_t,
  _swigc__p_std__pairT_sem_elem_t_sem_elem_t_t,
  _swigc__p_std__pairT_size_t_size_t_t,
  _swigc__p_std__pairT_size_t_wali__ref_ptrT_wali__SemElem_t_t,
  _swigc__p_std__pairT_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t_bool_t,
  _swigc__p_std__pairT_wali__ref_ptrT_PySemElem_t_wali__ref_ptrT_PySemElem_t_t,
  _swigc__p_std__pairT_wali__ref_ptrT_wali__SemElem_t_wali__ref_ptrT_wali__SemElem_t_t,
  _swigc__p_std__setT_ITrans_p_ITransLT_std__allocatorT_ITrans_p_t_t,
  _swigc__p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__const_iterator,
  _swigc__p_std__setT_ITrans_p_ITransLT_std__allocatorT_wali__wfa__ITrans_p_t_t__iterator,
  _swigc__p_std__setT_size_t_std__lessT_size_t_t_std__allocatorT_size_t_t_t,
  _swigc__p_std__vectorT__Tp_p__Alloc_t,
  _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  _swigc__p_std__vectorT_wali__wfa__Trans_p_std__allocatorT_wali__wfa__Trans_p_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_util__WeightChanger,
  _swigc__p_value_type,
  _swigc__p_wali__HashMapConstIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t,
  _swigc__p_wali__HashMapIteratorT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t,
  _swigc__p_wali__HashMapT_KeyPair_TransSet_wali__hm_hashT_KeyPair_t_wali__hm_equalT_KeyPair_t_t,
  _swigc__p_wali__KeySource,
  _swigc__p_wali__KeySpace,
  _swigc__p_wali__Printable,
  _swigc__p_wali__Reach,
  _swigc__p_wali__SemElem,
  _swigc__p_wali__SemElemRefPtrContainerLessThan,
  _swigc__p_wali__SemElemRefPtrEqual,
  _swigc__p_wali__SemElemRefPtrHash,
  _swigc__p_wali__WorklistT_wali__wfa__State_t,
  _swigc__p_wali__ref_ptrT_PySemElem_t,
  _swigc__p_wali__ref_ptrT_WorklistData_t,
  _swigc__p_wali__ref_ptrT_Wrapper_t,
  _swigc__p_wali__ref_ptrT_wali__KeySource_t,
  _swigc__p_wali__ref_ptrT_wali__SemElem_t,
  _swigc__p_wali__ref_ptrT_wali__WorklistT_wali__wfa__ITrans_t_t,
  _swigc__p_wali__ref_ptrT_wali__regex__Regex_t,
  _swigc__p_wali__ref_ptrT_wali__wpds__Wrapper_t,
  _swigc__p_wali__ref_ptrT_wali__wpds__ewpds__ERule_t,
  _swigc__p_wali__wfa__ConstTransFunctor,
  _swigc__p_wali__wfa__DeterminizeWeightGen,
  _swigc__p_wali__wfa__DotAttributePrinter,
  _swigc__p_wali__wfa__ITrans,
  _swigc__p_wali__wfa__State,
  _swigc__p_wali__wfa__Trans,
  _swigc__p_wali__wfa__TransFunctor,
  _swigc__p_wali__wfa__TransSet,
  _swigc__p_wali__wfa__WFA,
  _swigc__p_wali__wpds__Config,
  _swigc__p_wali__wpds__ConstRuleFunctor,
  _swigc__p_wali__wpds__GenKeySource,
  _swigc__p_wali__wpds__RuleFunctor,
  _swigc__p_wali__wpds__WPDS,
  _swigc__p_wali__wpds__ewpds__EWPDS,
  _swigc__p_wali__wpds__fwpds__FWPDS,
  _swigc__p_wali__wpds__rule_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"SemElem_xmltag",Swig_var_SemElem_xmltag_get, Swig_var_SemElem_xmltag_set);
  SWIG_Python_SetConstant(d, "KeyPairMap_SIZE_TYPE_MAX",SWIG_From_int(static_cast< int >(wali::HashMap< KeyPair,TransSet,hm_hash< KeyPair >,hm_equal< KeyPair > >::SIZE_TYPE_MAX)));
  SWIG_addvarlink(SWIG_globals(),(char*)"Trans_num_trans",Swig_var_Trans_num_trans_get, Swig_var_Trans_num_trans_set);
  SWIG_Python_SetConstant(d, "wali_wfa_STATE_GUARD",SWIG_From_int(static_cast< int >(1)));
  SWIG_addvarlink(SWIG_globals(),(char*)"State_num_states",Swig_var_State_num_states_get, Swig_var_State_num_states_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"State_xmltag",Swig_var_State_xmltag_get, Swig_var_State_xmltag_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"State_xmlinitial_tag",Swig_var_State_xmlinitial_tag_get, Swig_var_State_xmlinitial_tag_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"State_xmlfinal_tag",Swig_var_State_xmlfinal_tag_get, Swig_var_State_xmlfinal_tag_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"State_xmlname_tag",Swig_var_State_xmlname_tag_get, Swig_var_State_xmlname_tag_set);
  SWIG_Python_SetConstant(d, "WFA_INORDER",SWIG_From_int(static_cast< int >(wali::wfa::WFA::INORDER)));
  SWIG_Python_SetConstant(d, "WFA_REVERSE",SWIG_From_int(static_cast< int >(wali::wfa::WFA::REVERSE)));
  SWIG_Python_SetConstant(d, "WFA_MAX",SWIG_From_int(static_cast< int >(wali::wfa::WFA::MAX)));
  SWIG_Python_SetConstant(d, "WFA_IterativeOriginal",SWIG_From_int(static_cast< int >(wali::wfa::WFA::IterativeOriginal)));
  SWIG_Python_SetConstant(d, "WFA_IterativeWpds",SWIG_From_int(static_cast< int >(wali::wfa::WFA::IterativeWpds)));
  SWIG_Python_SetConstant(d, "WFA_TarjanFwpds",SWIG_From_int(static_cast< int >(wali::wfa::WFA::TarjanFwpds)));
  SWIG_Python_SetConstant(d, "WFA_CrosscheckAll",SWIG_From_int(static_cast< int >(wali::wfa::WFA::CrosscheckAll)));
  SWIG_addvarlink(SWIG_globals(),(char*)"WFA_global_default_path_summary_implementation",Swig_var_WFA_global_default_path_summary_implementation_get, Swig_var_WFA_global_default_path_summary_implementation_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WFA_global_default_path_summary_fwpds_top_down",Swig_var_WFA_global_default_path_summary_fwpds_top_down_get, Swig_var_WFA_global_default_path_summary_fwpds_top_down_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WFA_xmltag",Swig_var_WFA_xmltag_get, Swig_var_WFA_xmltag_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WFA_xmlquery_tag",Swig_var_WFA_xmlquery_tag_get, Swig_var_WFA_xmlquery_tag_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WFA_xmlinorder_tag",Swig_var_WFA_xmlinorder_tag_get, Swig_var_WFA_xmlinorder_tag_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"WFA_xmlreverse_tag",Swig_var_WFA_xmlreverse_tag_get, Swig_var_WFA_xmlreverse_tag_set);
  SWIG_Python_SetConstant(d, "Interesting",SWIG_From_int(static_cast< int >(wali::wfa::delta::Interesting)));
  SWIG_Python_SetConstant(d, "Uninteresting",SWIG_From_int(static_cast< int >(wali::wfa::delta::Uninteresting)));
  SWIG_Python_SetConstant(d, "Invalid",SWIG_From_int(static_cast< int >(wali::wfa::delta::Invalid)));
  SWIG_addvarlink(SWIG_globals(),(char*)"WPDS_xmltag",Swig_var_WPDS_xmltag_get, Swig_var_WPDS_xmltag_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EWPDS_xmltag",Swig_var_EWPDS_xmltag_get, Swig_var_EWPDS_xmltag_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"FWPDS_xmltag",Swig_var_FWPDS_xmltag_get, Swig_var_FWPDS_xmltag_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Reach_num_reaches",Swig_var_Reach_num_reaches_get, Swig_var_Reach_num_reaches_set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

